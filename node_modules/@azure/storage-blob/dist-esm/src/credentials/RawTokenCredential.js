// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
import * as tslib_1 from "tslib";
/**
 * RawTokenCredential is a TokenCredential that always returns the given token.
 * Renew the token by setting a new token string value to token property.
 *
 * @example
 *  const rawTokenCredential = new RawTokenCredential("token");
 *  const pipeline = newPipeline(tokenCredential);
 *
 *  const queueServiceClient = new QueueServiceClient("https://mystorageaccount.queue.core.windows.net", pipeline);
 *
 *  // Set up a timer to refresh the token
 *  const timerID = setInterval(() => {
 *    // Update token by accessing to public tokenCredential.token
 *    tokenCredential.token = "updatedToken";
 *    // WARNING: Timer must be manually stopped! It will forbid GC of tokenCredential
 *    if (shouldStop()) {
 *      clearInterval(timerID);
 *    }
 *  }, 60 * 60 * 1000); // Set an interval time before your token expired
 * @export
 * @implements {TokenCredential}
 *
 */
var RawTokenCredential = /** @class */ (function () {
    /**
     * Creates an instance of TokenCredential.
     * @param {string} token
     */
    function RawTokenCredential(token) {
        this.token = token;
    }
    /**
     * Retrieves the token stored in this RawTokenCredential.
     *
     * @param _scopes Ignored since token is already known.
     * @param _options Ignored since token is already known.
     * @returns {AccessToken} The access token details.
     */
    RawTokenCredential.prototype.getToken = function (_scopes, _options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, {
                        token: this.token,
                        expiresOnTimestamp: Date.now() + 2 * 60 * 1000 // 2 Minutes
                    }];
            });
        });
    };
    return RawTokenCredential;
}());
export { RawTokenCredential };
//# sourceMappingURL=RawTokenCredential.js.map