{"version":3,"file":"azure-storage-blob.min.js","sources":["../../../core/core-http/lib/httpHeaders.ts","../../../core/core-http/lib/util/base64.browser.ts","../../../../common/temp/node_modules/.registry.npmjs.org/uuid/3.3.2/node_modules/uuid/lib/bytesToUuid.js","../../../core/core-http/node_modules/uuid/lib/rng-browser.js","../../../core/core-http/node_modules/uuid/v4.js","../../../core/core-http/lib/util/constants.ts","../../../core/core-http/lib/util/utils.ts","../../../core/core-http/lib/serializer.ts","../../../core/core-http/lib/webResource.ts","../../../../common/temp/node_modules/.registry.npmjs.org/tslib/1.10.0/node_modules/tslib/tslib.es6.js","../../../core/core-http/lib/restError.ts","../../../core/core-http/lib/xhrHttpClient.ts","../../../core/core-http/lib/httpPipelineLogLevel.ts","../../../core/core-http/lib/credentials/tokenCredential.ts","../../../core/core-http/lib/operationParameter.ts","../../../core/core-http/lib/operationSpec.ts","../../../core/core-http/lib/util/xml.browser.ts","../../../core/core-http/lib/policies/requestPolicy.ts","../../../core/core-http/lib/policies/deserializationPolicy.ts","../../../core/core-http/lib/policies/exponentialRetryPolicy.ts","../../../core/core-http/lib/policies/generateClientRequestIdPolicy.ts","../../../core/core-http/lib/policies/msRestUserAgentPolicy.browser.ts","../../../core/core-http/lib/policies/userAgentPolicy.ts","../../../core/core-http/lib/url.ts","../../../core/core-http/lib/policies/redirectPolicy.ts","../../../core/core-http/lib/policies/rpRegistrationPolicy.ts","../../../core/core-http/lib/policies/signingPolicy.ts","../../../core/core-http/lib/policies/bearerTokenAuthenticationPolicy.ts","../../../core/core-http/lib/policies/systemErrorRetryPolicy.ts","../../../core/core-http/lib/queryCollectionFormat.ts","../../../core/core-http/lib/policies/proxyPolicy.browser.ts","../../../core/core-http/lib/policies/throttlingRetryPolicy.ts","../../../core/core-http/lib/serviceClient.ts","../src/Aborter.ts","../src/generated/lib/models/mappers.ts","../src/generated/lib/models/parameters.ts","../src/generated/lib/operations/service.ts","../src/generated/lib/operations/container.ts","../src/generated/lib/operations/blob.ts","../src/generated/lib/operations/pageBlob.ts","../src/generated/lib/operations/appendBlob.ts","../src/generated/lib/operations/blockBlob.ts","../src/utils/constants.ts","../src/utils/utils.common.ts","../src/policies/BrowserPolicy.ts","../src/BrowserPolicyFactory.ts","../src/policies/LoggingPolicy.ts","../src/policies/RetryPolicy.ts","../src/LoggingPolicyFactory.ts","../src/RetryPolicyFactory.ts","../src/policies/TelemetryPolicy.ts","../src/TelemetryPolicyFactory.ts","../src/policies/UniqueRequestIDPolicy.ts","../src/UniqueRequestIDPolicyFactory.ts","../src/Pipeline.ts","../src/generated/lib/storageClientContext.ts","../src/StorageClient.ts","../src/Range.ts","../src/credentials/Credential.ts","../src/credentials/SharedKeyCredential.browser.ts","../src/policies/CredentialPolicy.ts","../src/policies/AnonymousCredentialPolicy.ts","../src/credentials/AnonymousCredential.ts","../node_modules/events/events.js","../src/utils/Batch.ts","../src/LeaseClient.ts","../src/BlobClient.ts","../src/BlobDownloadResponse.browser.ts","../src/utils/utils.node.ts","../src/AppendBlobClient.ts","../src/utils/BufferScheduler.ts","../src/BlockBlobClient.ts","../src/PageBlobClient.ts","../../../core/core-paging/node_modules/@azure/core-asynciterator-polyfill/src/index.ts","../node_modules/@azure/core-paging/dist-esm/index.js","../src/ContainerClient.ts","../src/BlobServiceClient.ts","../src/credentials/RawTokenCredential.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * A collection of HttpHeaders that can be sent with a HTTP request.\n */\nfunction getHeaderKey(headerName: string) {\n  return headerName.toLowerCase();\n}\n\n/**\n * An individual header within a HttpHeaders collection.\n */\nexport interface HttpHeader {\n  /**\n   * The name of the header.\n   */\n  name: string;\n\n  /**\n   * The value of the header.\n   */\n  value: string;\n}\n\n/**\n * A HttpHeaders collection represented as a simple JSON object.\n */\nexport type RawHttpHeaders = { [headerName: string]: string };\n\n/**\n * A collection of HTTP header key/value pairs.\n */\nexport class HttpHeaders {\n  private readonly _headersMap: { [headerKey: string]: HttpHeader };\n\n  constructor(rawHeaders?: RawHttpHeaders) {\n    this._headersMap = {};\n    if (rawHeaders) {\n      for (const headerName in rawHeaders) {\n        this.set(headerName, rawHeaders[headerName]);\n      }\n    }\n  }\n\n  /**\n   * Set a header in this collection with the provided name and value. The name is\n   * case-insensitive.\n   * @param headerName The name of the header to set. This value is case-insensitive.\n   * @param headerValue The value of the header to set.\n   */\n  public set(headerName: string, headerValue: string | number): void {\n    this._headersMap[getHeaderKey(headerName)] = { name: headerName, value: headerValue.toString() };\n  }\n\n  /**\n   * Get the header value for the provided header name, or undefined if no header exists in this\n   * collection with the provided name.\n   * @param headerName The name of the header.\n   */\n  public get(headerName: string): string | undefined {\n    const header: HttpHeader = this._headersMap[getHeaderKey(headerName)];\n    return !header ? undefined : header.value;\n  }\n\n  /**\n   * Get whether or not this header collection contains a header entry for the provided header name.\n   */\n  public contains(headerName: string): boolean {\n    return !!this._headersMap[getHeaderKey(headerName)];\n  }\n\n  /**\n   * Remove the header with the provided headerName. Return whether or not the header existed and\n   * was removed.\n   * @param headerName The name of the header to remove.\n   */\n  public remove(headerName: string): boolean {\n    const result: boolean = this.contains(headerName);\n    delete this._headersMap[getHeaderKey(headerName)];\n    return result;\n  }\n\n  /**\n   * Get the headers that are contained this collection as an object.\n   */\n  public rawHeaders(): RawHttpHeaders {\n    const result: RawHttpHeaders = {};\n    for (const headerKey in this._headersMap) {\n      const header: HttpHeader = this._headersMap[headerKey];\n      result[header.name.toLowerCase()] = header.value;\n    }\n    return result;\n  }\n\n  /**\n   * Get the headers that are contained in this collection as an array.\n   */\n  public headersArray(): HttpHeader[] {\n    const headers: HttpHeader[] = [];\n    for (const headerKey in this._headersMap) {\n      headers.push(this._headersMap[headerKey]);\n    }\n    return headers;\n  }\n\n  /**\n   * Get the header names that are contained in this collection.\n   */\n  public headerNames(): string[] {\n    const headerNames: string[] = [];\n    const headers: HttpHeader[] = this.headersArray();\n    for (let i = 0; i < headers.length; ++i) {\n      headerNames.push(headers[i].name);\n    }\n    return headerNames;\n  }\n\n  /**\n   * Get the header names that are contained in this collection.\n   */\n  public headerValues(): string[] {\n    const headerValues: string[] = [];\n    const headers: HttpHeader[] = this.headersArray();\n    for (let i = 0; i < headers.length; ++i) {\n      headerValues.push(headers[i].value);\n    }\n    return headerValues;\n  }\n\n  /**\n   * Get the JSON object representation of this HTTP header collection.\n   */\n  public toJson(): RawHttpHeaders {\n    return this.rawHeaders();\n  }\n\n  /**\n   * Get the string representation of this HTTP header collection.\n   */\n  public toString(): string {\n    return JSON.stringify(this.toJson());\n  }\n\n  /**\n   * Create a deep clone/copy of this HttpHeaders collection.\n   */\n  public clone(): HttpHeaders {\n    return new HttpHeaders(this.rawHeaders());\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Encodes a string in base64 format.\n * @param value the string to encode\n */\nexport function encodeString(value: string): string {\n  return btoa(value);\n}\n\n/**\n * Encodes a byte array in base64 format.\n * @param value the Uint8Aray to encode\n */\nexport function encodeByteArray(value: Uint8Array): string {\n  let str = \"\";\n  for (let i = 0; i < value.length; i++) {\n    str += String.fromCharCode(value[i]);\n  }\n  return btoa(str);\n}\n\n/**\n * Decodes a base64 string into a byte array.\n * @param value the base64 string to decode\n */\nexport function decodeString(value: string): Uint8Array {\n  const byteString = atob(value);\n  const arr = new Uint8Array(byteString.length);\n  for (let i = 0; i < byteString.length; i++) {\n    arr[i] = byteString.charCodeAt(i);\n  }\n  return arr;\n}\n","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([bth[buf[i++]], bth[buf[i++]], \n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]]]).join('');\n}\n\nmodule.exports = bytesToUuid;\n","// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto\n// implementation. Also, find the complete implementation of crypto on IE11.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));\n\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nexport const Constants = {\n  /**\n   * The ms-rest version\n   * @const\n   * @type {string}\n   */\n  msRestVersion: \"1.8.10\",\n\n  /**\n   * Specifies HTTP.\n   *\n   * @const\n   * @type {string}\n   */\n  HTTP: \"http:\",\n\n  /**\n   * Specifies HTTPS.\n   *\n   * @const\n   * @type {string}\n   */\n  HTTPS: \"https:\",\n\n  /**\n   * Specifies HTTP Proxy.\n   *\n   * @const\n   * @type {string}\n   */\n  HTTP_PROXY: \"HTTP_PROXY\",\n\n  /**\n   * Specifies HTTPS Proxy.\n   *\n   * @const\n   * @type {string}\n   */\n  HTTPS_PROXY: \"HTTPS_PROXY\",\n\n  HttpConstants: {\n    /**\n     * Http Verbs\n     *\n     * @const\n     * @enum {string}\n     */\n    HttpVerbs: {\n      PUT: \"PUT\",\n      GET: \"GET\",\n      DELETE: \"DELETE\",\n      POST: \"POST\",\n      MERGE: \"MERGE\",\n      HEAD: \"HEAD\",\n      PATCH: \"PATCH\"\n    },\n\n    StatusCodes: {\n      TooManyRequests: 429\n    }\n  },\n\n  /**\n   * Defines constants for use with HTTP headers.\n   */\n  HeaderConstants: {\n    /**\n     * The Authorization header.\n     *\n     * @const\n     * @type {string}\n     */\n    AUTHORIZATION: \"authorization\",\n\n    AUTHORIZATION_SCHEME: \"Bearer\",\n\n    /**\n     * The Retry-After response-header field can be used with a 503 (Service\n     * Unavailable) or 349 (Too Many Requests) responses to indicate how long\n     * the service is expected to be unavailable to the requesting client.\n     *\n     * @const\n     * @type {string}\n     */\n    RETRY_AFTER: \"Retry-After\",\n\n    /**\n     * The UserAgent header.\n     *\n     * @const\n     * @type {string}\n     */\n    USER_AGENT: \"User-Agent\"\n  }\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport uuidv4 from \"uuid/v4\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { RestError } from \"../restError\";\nimport { WebResource } from \"../webResource\";\nimport { Constants } from \"./constants\";\n\n/**\n * A constant that indicates whether the environment is node.js or browser based.\n */\nexport const isNode = (typeof process !== \"undefined\") && !!process.version && !!process.versions && !!process.versions.node;\n\n/**\n * Checks if a parsed URL is HTTPS\n *\n * @param {object} urlToCheck The url to check\n * @return {boolean} True if the URL is HTTPS; false otherwise.\n */\nexport function urlIsHTTPS(urlToCheck: { protocol: string }): boolean {\n  return urlToCheck.protocol.toLowerCase() === Constants.HTTPS;\n}\n\n/**\n * Encodes an URI.\n *\n * @param {string} uri The URI to be encoded.\n * @return {string} The encoded URI.\n */\nexport function encodeUri(uri: string): string {\n  return encodeURIComponent(uri)\n    .replace(/!/g, \"%21\")\n    .replace(/\"/g, \"%27\")\n    .replace(/\\(/g, \"%28\")\n    .replace(/\\)/g, \"%29\")\n    .replace(/\\*/g, \"%2A\");\n}\n\n/**\n * Returns a stripped version of the Http Response which only contains body,\n * headers and the status.\n *\n * @param {HttpOperationResponse} response The Http Response\n *\n * @return {object} The stripped version of Http Response.\n */\nexport function stripResponse(response: HttpOperationResponse): any {\n  const strippedResponse: any = {};\n  strippedResponse.body = response.bodyAsText;\n  strippedResponse.headers = response.headers;\n  strippedResponse.status = response.status;\n  return strippedResponse;\n}\n\n/**\n * Returns a stripped version of the Http Request that does not contain the\n * Authorization header.\n *\n * @param {WebResource} request The Http Request object\n *\n * @return {WebResource} The stripped version of Http Request.\n */\nexport function stripRequest(request: WebResource): WebResource {\n  const strippedRequest = request.clone();\n  if (strippedRequest.headers) {\n    strippedRequest.headers.remove(\"authorization\");\n  }\n  return strippedRequest;\n}\n\n/**\n * Validates the given uuid as a string\n *\n * @param {string} uuid The uuid as a string that needs to be validated\n *\n * @return {boolean} True if the uuid is valid; false otherwise.\n */\nexport function isValidUuid(uuid: string): boolean {\n  const validUuidRegex = new RegExp(\"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$\", \"ig\");\n  return validUuidRegex.test(uuid);\n}\n\n/**\n * Provides an array of values of an object. For example\n * for a given object { \"a\": \"foo\", \"b\": \"bar\" }, the method returns [\"foo\", \"bar\"].\n *\n * @param {object} obj An object whose properties need to be enumerated so that it\"s values can be provided as an array\n *\n * @return {any[]} An array of values of the given object.\n */\nexport function objectValues(obj: { [key: string]: any; }): any[] {\n  const result: any[] = [];\n  if (obj && obj instanceof Object) {\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        result.push((<any>obj)[key]);\n      }\n    }\n  } else {\n    throw new Error(`The provided object ${JSON.stringify(obj, undefined, 2)} is not a valid object that can be ` +\n      `enumerated to provide its values as an array.`);\n  }\n  return result;\n}\n\n/**\n * Generated UUID\n *\n * @return {string} RFC4122 v4 UUID.\n */\nexport function generateUuid(): string {\n  return uuidv4();\n}\n\n/**\n * Executes an array of promises sequentially. Inspiration of this method is here:\n * https://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html. An awesome blog on promises!\n *\n * @param {Array} promiseFactories An array of promise factories(A function that return a promise)\n *\n * @param {any} [kickstart] Input to the first promise that is used to kickstart the promise chain.\n * If not provided then the promise chain starts with undefined.\n *\n * @return A chain of resolved or rejected promises\n */\nexport function executePromisesSequentially(promiseFactories: Array<any>, kickstart: any) {\n  let result = Promise.resolve(kickstart);\n  promiseFactories.forEach((promiseFactory) => {\n    result = result.then(promiseFactory);\n  });\n  return result;\n}\n\n/**\n * Merges source object into the target object\n * @param {object} source The object that needs to be merged\n *\n * @param {object} target The object to be merged into\n *\n * @returns {object} Returns the merged target object.\n */\nexport function mergeObjects(source: { [key: string]: any; }, target: { [key: string]: any; }) {\n  Object.keys(source).forEach((key) => {\n    target[key] = source[key];\n  });\n  return target;\n}\n\n/**\n * A wrapper for setTimeout that resolves a promise after t milliseconds.\n * @param {number} t The number of milliseconds to be delayed.\n * @param {T} value The value to be resolved with after a timeout of t milliseconds.\n * @returns {Promise<T>} Resolved promise\n */\nexport function delay<T>(t: number, value?: T): Promise<T> {\n  return new Promise((resolve) => setTimeout(() => resolve(value), t));\n}\n\n/**\n * Service callback that is returned for REST requests initiated by the service client.\n */\nexport interface ServiceCallback<TResult> {\n  /**\n   * A method that will be invoked as a callback to a service function.\n   * @param {Error | RestError | null} err The error occurred if any, while executing the request; otherwise null.\n   * @param {TResult} [result] The deserialized response body if an error did not occur.\n   * @param {WebResource} [request] The raw/actual request sent to the server if an error did not occur.\n   * @param {HttpOperationResponse} [response] The raw/actual response from the server if an error did not occur.\n   */\n  (err: Error | RestError | null, result?: TResult, request?: WebResource, response?: HttpOperationResponse): void;\n}\n\n/**\n * Converts a Promise to a callback.\n * @param {Promise<any>} promise The Promise to be converted to a callback\n * @returns {Function} A function that takes the callback (cb: Function): void\n * @deprecated generated code should instead depend on responseToBody\n */\nexport function promiseToCallback(promise: Promise<any>): Function {\n  if (typeof promise.then !== \"function\") {\n    throw new Error(\"The provided input is not a Promise.\");\n  }\n  return (cb: Function): void => {\n    promise.then((data: any) => {\n      cb(undefined, data);\n    }, (err: Error) => {\n      cb(err);\n    });\n  };\n}\n\n/**\n * Converts a Promise to a service callback.\n * @param {Promise<HttpOperationResponse>} promise - The Promise of HttpOperationResponse to be converted to a service callback\n * @returns {Function} A function that takes the service callback (cb: ServiceCallback<T>): void\n */\nexport function promiseToServiceCallback<T>(promise: Promise<HttpOperationResponse>): Function {\n  if (typeof promise.then !== \"function\") {\n    throw new Error(\"The provided input is not a Promise.\");\n  }\n  return (cb: ServiceCallback<T>): void => {\n    promise.then((data: HttpOperationResponse) => {\n      process.nextTick(cb, undefined, data.parsedBody as T, data.request, data);\n    }, (err: Error) => {\n      process.nextTick(cb, err);\n    });\n  };\n}\n\nexport function prepareXMLRootList(obj: any, elementName: string) {\n  if (!Array.isArray(obj)) {\n    obj = [obj];\n  }\n  return { [elementName]: obj };\n}\n\n/**\n * Applies the properties on the prototype of sourceCtors to the prototype of targetCtor\n * @param {object} targetCtor The target object on which the properties need to be applied.\n * @param {Array<object>} sourceCtors An array of source objects from which the properties need to be taken.\n */\nexport function applyMixins(targetCtor: any, sourceCtors: any[]): void {\n  sourceCtors.forEach(sourceCtors => {\n    Object.getOwnPropertyNames(sourceCtors.prototype).forEach(name => {\n      targetCtor.prototype[name] = sourceCtors.prototype[name];\n    });\n  });\n}\n\nconst validateISODuration = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n\n/**\n * Indicates whether the given string is in ISO 8601 format.\n * @param {string} value The value to be validated for ISO 8601 duration format.\n * @return {boolean} `true` if valid, `false` otherwise.\n */\nexport function isDuration(value: string): boolean {\n  return validateISODuration.test(value);\n}\n\n/**\n * Replace all of the instances of searchValue in value with the provided replaceValue.\n * @param {string | undefined} value The value to search and replace in.\n * @param {string} searchValue The value to search for in the value argument.\n * @param {string} replaceValue The value to replace searchValue with in the value argument.\n * @returns {string | undefined} The value where each instance of searchValue was replaced with replacedValue.\n */\nexport function replaceAll(value: string | undefined, searchValue: string, replaceValue: string): string | undefined {\n  return !value || !searchValue ? value : value.split(searchValue).join(replaceValue || \"\");\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport * as base64 from \"./util/base64\";\nimport * as utils from \"./util/utils\";\n\nexport class Serializer {\n  constructor(public readonly modelMappers: { [key: string]: any } = {}, public readonly isXML?: boolean) { }\n\n  validateConstraints(mapper: Mapper, value: any, objectName: string): void {\n    const failValidation = (constraintName: keyof MapperConstraints, constraintValue: any) => {\n      throw new Error(`\"${objectName}\" with value \"${value}\" should satisfy the constraint \"${constraintName}\": ${constraintValue}.`);\n    };\n    if (mapper.constraints && (value != undefined)) {\n      const {\n        ExclusiveMaximum,\n        ExclusiveMinimum,\n        InclusiveMaximum,\n        InclusiveMinimum,\n        MaxItems,\n        MaxLength,\n        MinItems,\n        MinLength,\n        MultipleOf,\n        Pattern,\n        UniqueItems\n      } = mapper.constraints;\n      if (ExclusiveMaximum != undefined && value >= ExclusiveMaximum) {\n        failValidation(\"ExclusiveMaximum\", ExclusiveMaximum);\n      }\n      if (ExclusiveMinimum != undefined && value <= ExclusiveMinimum) {\n        failValidation(\"ExclusiveMinimum\", ExclusiveMinimum);\n      }\n      if (InclusiveMaximum != undefined && value > InclusiveMaximum) {\n        failValidation(\"InclusiveMaximum\", InclusiveMaximum);\n      }\n      if (InclusiveMinimum != undefined && value < InclusiveMinimum) {\n        failValidation(\"InclusiveMinimum\", InclusiveMinimum);\n      }\n      if (MaxItems != undefined && value.length > MaxItems) {\n        failValidation(\"MaxItems\", MaxItems);\n      }\n      if (MaxLength != undefined && value.length > MaxLength) {\n        failValidation(\"MaxLength\", MaxLength);\n      }\n      if (MinItems != undefined && value.length < MinItems) {\n        failValidation(\"MinItems\", MinItems);\n      }\n      if (MinLength != undefined && value.length < MinLength) {\n        failValidation(\"MinLength\", MinLength);\n      }\n      if (MultipleOf != undefined && value % MultipleOf !== 0) {\n        failValidation(\"MultipleOf\", MultipleOf);\n      }\n      if (Pattern && value.match(Pattern) === null) {\n        failValidation(\"Pattern\", Pattern);\n      }\n      if (UniqueItems && value.some((item: any, i: number, ar: Array<any>) => ar.indexOf(item) !== i)) {\n        failValidation(\"UniqueItems\", UniqueItems);\n      }\n    }\n  }\n\n  /**\n   * Serialize the given object based on its metadata defined in the mapper\n   *\n   * @param {Mapper} mapper The mapper which defines the metadata of the serializable object\n   *\n   * @param {object|string|Array|number|boolean|Date|stream} object A valid Javascript object to be serialized\n   *\n   * @param {string} objectName Name of the serialized object\n   *\n   * @returns {object|string|Array|number|boolean|Date|stream} A valid serialized Javascript object\n   */\n  serialize(mapper: Mapper, object: any, objectName?: string): any {\n    let payload: any = {};\n    const mapperType = mapper.type.name as string;\n    if (!objectName) {\n      objectName = mapper.serializedName!;\n    }\n    if (mapperType.match(/^Sequence$/ig) !== null) {\n      payload = [];\n    }\n\n    if (object == undefined && (mapper.defaultValue != undefined || mapper.isConstant)) {\n      object = mapper.defaultValue;\n    }\n\n    // This table of allowed values should help explain\n    // the mapper.required and mapper.nullable properties.\n    // X means \"neither undefined or null are allowed\".\n    //           || required\n    //           || true      | false\n    //  nullable || ==========================\n    //      true || null      | undefined/null\n    //     false || X         | undefined\n    // undefined || X         | undefined/null\n\n    const { required, nullable } = mapper;\n\n    if (required && nullable && object === undefined) {\n      throw new Error(`${objectName} cannot be undefined.`);\n    }\n    if (required && !nullable && object == undefined) {\n      throw new Error(`${objectName} cannot be null or undefined.`);\n    }\n    if (!required && nullable === false && object === null) {\n      throw new Error(`${objectName} cannot be null.`);\n    }\n\n    if (object == undefined) {\n      payload = object;\n    } else {\n      // Validate Constraints if any\n      this.validateConstraints(mapper, object, objectName);\n      if (mapperType.match(/^any$/ig) !== null) {\n        payload = object;\n      } else if (mapperType.match(/^(Number|String|Boolean|Object|Stream|Uuid)$/ig) !== null) {\n        payload = serializeBasicTypes(mapperType, objectName, object);\n      } else if (mapperType.match(/^Enum$/ig) !== null) {\n        const enumMapper: EnumMapper = mapper as EnumMapper;\n        payload = serializeEnumType(objectName, enumMapper.type.allowedValues, object);\n      } else if (mapperType.match(/^(Date|DateTime|TimeSpan|DateTimeRfc1123|UnixTime)$/ig) !== null) {\n        payload = serializeDateTypes(mapperType, object, objectName);\n      } else if (mapperType.match(/^ByteArray$/ig) !== null) {\n        payload = serializeByteArrayType(objectName, object);\n      } else if (mapperType.match(/^Base64Url$/ig) !== null) {\n        payload = serializeBase64UrlType(objectName, object);\n      } else if (mapperType.match(/^Sequence$/ig) !== null) {\n        payload = serializeSequenceType(this, mapper as SequenceMapper, object, objectName);\n      } else if (mapperType.match(/^Dictionary$/ig) !== null) {\n        payload = serializeDictionaryType(this, mapper as DictionaryMapper, object, objectName);\n      } else if (mapperType.match(/^Composite$/ig) !== null) {\n        payload = serializeCompositeType(this, mapper as CompositeMapper, object, objectName);\n      }\n    }\n    return payload;\n  }\n\n  /**\n   * Deserialize the given object based on its metadata defined in the mapper\n   *\n   * @param {object} mapper The mapper which defines the metadata of the serializable object\n   *\n   * @param {object|string|Array|number|boolean|Date|stream} responseBody A valid Javascript entity to be deserialized\n   *\n   * @param {string} objectName Name of the deserialized object\n   *\n   * @returns {object|string|Array|number|boolean|Date|stream} A valid deserialized Javascript object\n   */\n  deserialize(mapper: Mapper, responseBody: any, objectName: string): any {\n    if (responseBody == undefined) {\n      if (this.isXML && mapper.type.name === \"Sequence\" && !mapper.xmlIsWrapped) {\n        // Edge case for empty XML non-wrapped lists. xml2js can't distinguish\n        // between the list being empty versus being missing,\n        // so let's do the more user-friendly thing and return an empty list.\n        responseBody = [];\n      }\n      return responseBody;\n    }\n\n    let payload: any;\n    const mapperType = mapper.type.name;\n    if (!objectName) {\n      objectName = mapper.serializedName!;\n    }\n\n    if (mapperType.match(/^Composite$/ig) !== null) {\n      payload = deserializeCompositeType(this, mapper as CompositeMapper, responseBody, objectName);\n    } else {\n      if (this.isXML) {\n        /**\n         * If the mapper specifies this as a non-composite type value but the responseBody contains\n         * both header (\"$\") and body (\"_\") properties, then just reduce the responseBody value to\n         * the body (\"_\") property.\n         */\n        if (responseBody[\"$\"] != undefined && responseBody[\"_\"] != undefined) {\n          responseBody = responseBody[\"_\"];\n        }\n      }\n\n      if (mapperType.match(/^Number$/ig) !== null) {\n        payload = parseFloat(responseBody);\n        if (isNaN(payload)) {\n          payload = responseBody;\n        }\n      } else if (mapperType.match(/^Boolean$/ig) !== null) {\n        if (responseBody === \"true\") {\n          payload = true;\n        } else if (responseBody === \"false\") {\n          payload = false;\n        } else {\n          payload = responseBody;\n        }\n      } else if (mapperType.match(/^(String|Enum|Object|Stream|Uuid|TimeSpan|any)$/ig) !== null) {\n        payload = responseBody;\n      } else if (mapperType.match(/^(Date|DateTime|DateTimeRfc1123)$/ig) !== null) {\n        payload = new Date(responseBody);\n      } else if (mapperType.match(/^UnixTime$/ig) !== null) {\n        payload = unixTimeToDate(responseBody);\n      } else if (mapperType.match(/^ByteArray$/ig) !== null) {\n        payload = base64.decodeString(responseBody);\n      } else if (mapperType.match(/^Base64Url$/ig) !== null) {\n        payload = base64UrlToByteArray(responseBody);\n      } else if (mapperType.match(/^Sequence$/ig) !== null) {\n        payload = deserializeSequenceType(this, mapper as SequenceMapper, responseBody, objectName);\n      } else if (mapperType.match(/^Dictionary$/ig) !== null) {\n        payload = deserializeDictionaryType(this, mapper as DictionaryMapper, responseBody, objectName);\n      }\n    }\n\n    if (mapper.isConstant) {\n      payload = mapper.defaultValue;\n    }\n\n    return payload;\n  }\n}\n\nfunction trimEnd(str: string, ch: string) {\n  let len = str.length;\n  while ((len - 1) >= 0 && str[len - 1] === ch) {\n    --len;\n  }\n  return str.substr(0, len);\n}\n\nfunction bufferToBase64Url(buffer: any): string | undefined {\n  if (!buffer) {\n    return undefined;\n  }\n  if (!(buffer instanceof Uint8Array)) {\n    throw new Error(`Please provide an input of type Uint8Array for converting to Base64Url.`);\n  }\n  // Uint8Array to Base64.\n  const str = base64.encodeByteArray(buffer);\n  // Base64 to Base64Url.\n  return trimEnd(str, \"=\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\n\nfunction base64UrlToByteArray(str: string): Uint8Array | undefined {\n  if (!str) {\n    return undefined;\n  }\n  if (str && typeof str.valueOf() !== \"string\") {\n    throw new Error(\"Please provide an input of type string for converting to Uint8Array\");\n  }\n  // Base64Url to Base64.\n  str = str.replace(/\\-/g, \"+\").replace(/\\_/g, \"/\");\n  // Base64 to Uint8Array.\n  return base64.decodeString(str);\n}\n\nfunction splitSerializeName(prop: string | undefined): string[] {\n  const classes: string[] = [];\n  let partialclass = \"\";\n  if (prop) {\n    const subwords = prop.split(\".\");\n\n    for (const item of subwords) {\n      if (item.charAt(item.length - 1) === \"\\\\\") {\n        partialclass += item.substr(0, item.length - 1) + \".\";\n      } else {\n        partialclass += item;\n        classes.push(partialclass);\n        partialclass = \"\";\n      }\n    }\n  }\n\n  return classes;\n}\n\nfunction dateToUnixTime(d: string | Date): number | undefined {\n  if (!d) {\n    return undefined;\n  }\n\n  if (typeof d.valueOf() === \"string\") {\n    d = new Date(d as string);\n  }\n  return Math.floor((d as Date).getTime() / 1000);\n}\n\nfunction unixTimeToDate(n: number): Date | undefined {\n  if (!n) {\n    return undefined;\n  }\n  return new Date(n * 1000);\n}\n\nfunction serializeBasicTypes(typeName: string, objectName: string, value: any): any {\n  if (value !== null && value !== undefined) {\n    if (typeName.match(/^Number$/ig) !== null) {\n      if (typeof value !== \"number\") {\n        throw new Error(`${objectName} with value ${value} must be of type number.`);\n      }\n    } else if (typeName.match(/^String$/ig) !== null) {\n      if (typeof value.valueOf() !== \"string\") {\n        throw new Error(`${objectName} with value \"${value}\" must be of type string.`);\n      }\n    } else if (typeName.match(/^Uuid$/ig) !== null) {\n      if (!(typeof value.valueOf() === \"string\" && utils.isValidUuid(value))) {\n        throw new Error(`${objectName} with value \"${value}\" must be of type string and a valid uuid.`);\n      }\n    } else if (typeName.match(/^Boolean$/ig) !== null) {\n      if (typeof value !== \"boolean\") {\n        throw new Error(`${objectName} with value ${value} must be of type boolean.`);\n      }\n    } else if (typeName.match(/^Stream$/ig) !== null) {\n      const objectType = typeof value;\n      if (objectType !== \"string\" &&\n        objectType !== \"function\" &&\n        !(value instanceof ArrayBuffer) &&\n        !ArrayBuffer.isView(value) &&\n        !(typeof Blob === \"function\" && value instanceof Blob)) {\n        throw new Error(`${objectName} must be a string, Blob, ArrayBuffer, ArrayBufferView, or a function returning NodeJS.ReadableStream.`);\n      }\n    }\n  }\n  return value;\n}\n\nfunction serializeEnumType(objectName: string, allowedValues: Array<any>, value: any): any {\n  if (!allowedValues) {\n    throw new Error(`Please provide a set of allowedValues to validate ${objectName} as an Enum Type.`);\n  }\n  const isPresent = allowedValues.some((item) => {\n    if (typeof item.valueOf() === \"string\") {\n      return item.toLowerCase() === value.toLowerCase();\n    }\n    return item === value;\n  });\n  if (!isPresent) {\n    throw new Error(`${value} is not a valid value for ${objectName}. The valid values are: ${JSON.stringify(allowedValues)}.`);\n  }\n  return value;\n}\n\nfunction serializeByteArrayType(objectName: string, value: any): any {\n  if (value != undefined) {\n    if (!(value instanceof Uint8Array)) {\n      throw new Error(`${objectName} must be of type Uint8Array.`);\n    }\n    value = base64.encodeByteArray(value);\n  }\n  return value;\n}\n\nfunction serializeBase64UrlType(objectName: string, value: any): any {\n  if (value != undefined) {\n    if (!(value instanceof Uint8Array)) {\n      throw new Error(`${objectName} must be of type Uint8Array.`);\n    }\n    value = bufferToBase64Url(value);\n  }\n  return value;\n}\n\nfunction serializeDateTypes(typeName: string, value: any, objectName: string) {\n  if (value != undefined) {\n    if (typeName.match(/^Date$/ig) !== null) {\n      if (!(value instanceof Date ||\n        (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n      }\n      value = (value instanceof Date) ? value.toISOString().substring(0, 10) : new Date(value).toISOString().substring(0, 10);\n    } else if (typeName.match(/^DateTime$/ig) !== null) {\n      if (!(value instanceof Date ||\n        (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n      }\n      value = (value instanceof Date) ? value.toISOString() : new Date(value).toISOString();\n    } else if (typeName.match(/^DateTimeRfc1123$/ig) !== null) {\n      if (!(value instanceof Date ||\n        (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123 format.`);\n      }\n      value = (value instanceof Date) ? value.toUTCString() : new Date(value).toUTCString();\n    } else if (typeName.match(/^UnixTime$/ig) !== null) {\n      if (!(value instanceof Date ||\n        (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123/ISO8601 format ` +\n          `for it to be serialized in UnixTime/Epoch format.`);\n      }\n      value = dateToUnixTime(value);\n    } else if (typeName.match(/^TimeSpan$/ig) !== null) {\n      if (!utils.isDuration(value)) {\n        throw new Error(`${objectName} must be a string in ISO 8601 format. Instead was \"${value}\".`);\n      }\n      value = value;\n    }\n  }\n  return value;\n}\n\nfunction serializeSequenceType(serializer: Serializer, mapper: SequenceMapper, object: any, objectName: string) {\n  if (!Array.isArray(object)) {\n    throw new Error(`${objectName} must be of type Array.`);\n  }\n  const elementType = mapper.type.element;\n  if (!elementType || typeof elementType !== \"object\") {\n    throw new Error(`element\" metadata for an Array must be defined in the ` +\n      `mapper and it must of type \"object\" in ${objectName}.`);\n  }\n  const tempArray = [];\n  for (let i = 0; i < object.length; i++) {\n    tempArray[i] = serializer.serialize(elementType, object[i], objectName);\n  }\n  return tempArray;\n}\n\nfunction serializeDictionaryType(serializer: Serializer, mapper: DictionaryMapper, object: any, objectName: string) {\n  if (typeof object !== \"object\") {\n    throw new Error(`${objectName} must be of type object.`);\n  }\n  const valueType = mapper.type.value;\n  if (!valueType || typeof valueType !== \"object\") {\n    throw new Error(`\"value\" metadata for a Dictionary must be defined in the ` +\n      `mapper and it must of type \"object\" in ${objectName}.`);\n  }\n  const tempDictionary: { [key: string]: any } = {};\n  for (const key of Object.keys(object)) {\n    tempDictionary[key] = serializer.serialize(valueType, object[key], objectName + \".\" + key);\n  }\n  return tempDictionary;\n}\n\n/**\n * Resolves a composite mapper's modelProperties.\n * @param serializer the serializer containing the entire set of mappers\n * @param mapper the composite mapper to resolve\n */\nfunction resolveModelProperties(serializer: Serializer, mapper: CompositeMapper, objectName: string): { [propertyName: string]: Mapper } {\n  let modelProps = mapper.type.modelProperties;\n  if (!modelProps) {\n    const className = mapper.type.className;\n    if (!className) {\n      throw new Error(`Class name for model \"${objectName}\" is not provided in the mapper \"${JSON.stringify(mapper, undefined, 2)}\".`);\n    }\n\n    const modelMapper = serializer.modelMappers[className];\n    if (!modelMapper) {\n      throw new Error(`mapper() cannot be null or undefined for model \"${className}\".`);\n    }\n    modelProps = modelMapper.type.modelProperties;\n    if (!modelProps) {\n      throw new Error(`modelProperties cannot be null or undefined in the ` +\n        `mapper \"${JSON.stringify(modelMapper)}\" of type \"${className}\" for object \"${objectName}\".`);\n    }\n  }\n\n  return modelProps;\n}\n\nfunction serializeCompositeType(serializer: Serializer, mapper: CompositeMapper, object: any, objectName: string) {\n  if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n    mapper = getPolymorphicMapper(serializer, mapper, object, \"clientName\");\n  }\n\n  if (object != undefined) {\n    const payload: any = {};\n    const modelProps = resolveModelProperties(serializer, mapper, objectName);\n    for (const key of Object.keys(modelProps)) {\n      const propertyMapper = modelProps[key];\n      if (propertyMapper.readOnly) {\n        continue;\n      }\n\n      let propName: string | undefined;\n      let parentObject: any = payload;\n      if (serializer.isXML) {\n        if (propertyMapper.xmlIsWrapped) {\n          propName = propertyMapper.xmlName;\n        } else {\n          propName = propertyMapper.xmlElementName || propertyMapper.xmlName;\n        }\n      } else {\n        const paths = splitSerializeName(propertyMapper.serializedName!);\n        propName = paths.pop();\n\n        for (const pathName of paths) {\n          const childObject = parentObject[pathName];\n          if ((childObject == undefined) && (object[key] != undefined)) {\n            parentObject[pathName] = {};\n          }\n          parentObject = parentObject[pathName];\n        }\n      }\n\n      if (parentObject != undefined) {\n        const propertyObjectName = propertyMapper.serializedName !== \"\"\n          ? objectName + \".\" + propertyMapper.serializedName\n          : objectName;\n\n        let toSerialize = object[key];\n        const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n        if (polymorphicDiscriminator && polymorphicDiscriminator.clientName === key && toSerialize == undefined) {\n          toSerialize = mapper.serializedName;\n        }\n\n        const serializedValue = serializer.serialize(propertyMapper, toSerialize, propertyObjectName);\n        if (serializedValue !== undefined && propName != undefined) {\n          if (propertyMapper.xmlIsAttribute) {\n            // $ is the key attributes are kept under in xml2js.\n            // This keeps things simple while preventing name collision\n            // with names in user documents.\n            parentObject.$ = parentObject.$ || {};\n            parentObject.$[propName] = serializedValue;\n          } else if (propertyMapper.xmlIsWrapped) {\n            parentObject[propName] = { [propertyMapper.xmlElementName!]: serializedValue };\n          } else {\n            parentObject[propName] = serializedValue;\n          }\n        }\n      }\n    }\n\n    const additionalPropertiesMapper = mapper.type.additionalProperties;\n    if (additionalPropertiesMapper) {\n      const propNames = Object.keys(modelProps);\n      for (const clientPropName in object) {\n        const isAdditionalProperty = propNames.every(pn => pn !== clientPropName);\n        if (isAdditionalProperty) {\n          payload[clientPropName] = serializer.serialize(additionalPropertiesMapper, object[clientPropName], objectName + '[\"' + clientPropName + '\"]');\n        }\n      }\n    }\n\n    return payload;\n  }\n  return object;\n}\n\nfunction isSpecialXmlProperty(propertyName: string): boolean {\n  return [\"$\", \"_\"].includes(propertyName);\n}\n\nfunction deserializeCompositeType(serializer: Serializer, mapper: CompositeMapper, responseBody: any, objectName: string): any {\n  if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n    mapper = getPolymorphicMapper(serializer, mapper, responseBody, \"serializedName\");\n  }\n\n  const modelProps = resolveModelProperties(serializer, mapper, objectName);\n  let instance: { [key: string]: any } = {};\n  const handledPropertyNames: string[] = [];\n\n  for (const key of Object.keys(modelProps)) {\n    const propertyMapper = modelProps[key];\n    const paths = splitSerializeName(modelProps[key].serializedName!);\n    handledPropertyNames.push(paths[0]);\n    const { serializedName, xmlName, xmlElementName } = propertyMapper;\n    let propertyObjectName = objectName;\n    if (serializedName !== \"\" && serializedName !== undefined) {\n      propertyObjectName = objectName + \".\" + serializedName;\n    }\n\n    const headerCollectionPrefix = (propertyMapper as DictionaryMapper).headerCollectionPrefix;\n    if (headerCollectionPrefix) {\n      const dictionary: any = {};\n      for (const headerKey of Object.keys(responseBody)) {\n        if (headerKey.startsWith(headerCollectionPrefix)) {\n          dictionary[headerKey.substring(headerCollectionPrefix.length)] = serializer.deserialize((propertyMapper as DictionaryMapper).type.value, responseBody[headerKey], propertyObjectName);\n        }\n\n        handledPropertyNames.push(headerKey);\n      }\n      instance[key] = dictionary;\n    } else if (serializer.isXML) {\n      if (propertyMapper.xmlIsAttribute && responseBody.$) {\n        instance[key] = serializer.deserialize(propertyMapper, responseBody.$[xmlName!], propertyObjectName);\n      } else {\n        const propertyName = xmlElementName || xmlName || serializedName;\n        let unwrappedProperty = responseBody[propertyName!];\n        if (propertyMapper.xmlIsWrapped) {\n          unwrappedProperty = responseBody[xmlName!];\n          unwrappedProperty = unwrappedProperty && unwrappedProperty[xmlElementName!];\n\n          const isEmptyWrappedList = unwrappedProperty === undefined;\n          if (isEmptyWrappedList) {\n            unwrappedProperty = [];\n          }\n        }\n        instance[key] = serializer.deserialize(propertyMapper, unwrappedProperty, propertyObjectName);\n      }\n    } else {\n      // deserialize the property if it is present in the provided responseBody instance\n      let propertyInstance;\n      let res = responseBody;\n      // traversing the object step by step.\n      for (const item of paths) {\n        if (!res) break;\n        res = res[item];\n      }\n      propertyInstance = res;\n      const polymorphicDiscriminator = mapper.type.polymorphicDiscriminator;\n      if (polymorphicDiscriminator && propertyMapper.serializedName === polymorphicDiscriminator.serializedName && propertyInstance == undefined) {\n        propertyInstance = mapper.serializedName;\n      }\n\n      let serializedValue;\n      // paging\n      if (Array.isArray(responseBody[key]) && modelProps[key].serializedName === \"\") {\n        propertyInstance = responseBody[key];\n        instance = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName);\n      } else if (propertyInstance !== undefined) {\n        serializedValue = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName);\n        instance[key] = serializedValue;\n      }\n    }\n  }\n\n  const additionalPropertiesMapper = mapper.type.additionalProperties;\n  if (additionalPropertiesMapper) {\n    const isAdditionalProperty = (responsePropName: string) => {\n      for (const clientPropName in modelProps) {\n        const paths = splitSerializeName(modelProps[clientPropName].serializedName);\n        if (paths[0] === responsePropName) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    for (const responsePropName in responseBody) {\n      if (isAdditionalProperty(responsePropName)) {\n        instance[responsePropName] = serializer.deserialize(additionalPropertiesMapper, responseBody[responsePropName], objectName + '[\"' + responsePropName + '\"]');\n      }\n    }\n  } else if (responseBody) {\n    for (const key of Object.keys(responseBody)) {\n      if (instance[key] === undefined && !handledPropertyNames.includes(key) && !isSpecialXmlProperty(key)) {\n        instance[key] = responseBody[key];\n      }\n    }\n  }\n\n  return instance;\n}\n\nfunction deserializeDictionaryType(serializer: Serializer, mapper: DictionaryMapper, responseBody: any, objectName: string): any {\n  /*jshint validthis: true */\n  const value = mapper.type.value;\n  if (!value || typeof value !== \"object\") {\n    throw new Error(`\"value\" metadata for a Dictionary must be defined in the ` +\n      `mapper and it must of type \"object\" in ${objectName}`);\n  }\n  if (responseBody) {\n    const tempDictionary: { [key: string]: any } = {};\n    for (const key of Object.keys(responseBody)) {\n      tempDictionary[key] = serializer.deserialize(value, responseBody[key], objectName);\n    }\n    return tempDictionary;\n  }\n  return responseBody;\n}\n\nfunction deserializeSequenceType(serializer: Serializer, mapper: SequenceMapper, responseBody: any, objectName: string): any {\n  /*jshint validthis: true */\n  const element = mapper.type.element;\n  if (!element || typeof element !== \"object\") {\n    throw new Error(`element\" metadata for an Array must be defined in the ` +\n      `mapper and it must of type \"object\" in ${objectName}`);\n  }\n  if (responseBody) {\n    if (!Array.isArray(responseBody)) {\n      // xml2js will interpret a single element array as just the element, so force it to be an array\n      responseBody = [responseBody];\n    }\n\n    const tempArray = [];\n    for (let i = 0; i < responseBody.length; i++) {\n      tempArray[i] = serializer.deserialize(element, responseBody[i], `${objectName}[${i}]`);\n    }\n    return tempArray;\n  }\n  return responseBody;\n}\n\nfunction getPolymorphicMapper(serializer: Serializer, mapper: CompositeMapper, object: any, polymorphicPropertyName: \"clientName\" | \"serializedName\"): CompositeMapper {\n  const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n  if (polymorphicDiscriminator) {\n    const discriminatorName = polymorphicDiscriminator[polymorphicPropertyName];\n    if (discriminatorName != undefined) {\n      const discriminatorValue = object[discriminatorName];\n      if (discriminatorValue != undefined) {\n        const typeName = mapper.type.uberParent || mapper.type.className;\n        const indexDiscriminator = discriminatorValue === typeName\n          ? discriminatorValue\n          : typeName + \".\" + discriminatorValue;\n        const polymorphicMapper = serializer.modelMappers.discriminators[indexDiscriminator];\n        if (polymorphicMapper) {\n          mapper = polymorphicMapper;\n        }\n      }\n    }\n  }\n  return mapper;\n}\n\nfunction getPolymorphicDiscriminatorRecursively(serializer: Serializer, mapper: CompositeMapper): PolymorphicDiscriminator | undefined {\n  return mapper.type.polymorphicDiscriminator\n    || getPolymorphicDiscriminatorSafely(serializer, mapper.type.uberParent)\n    || getPolymorphicDiscriminatorSafely(serializer, mapper.type.className);\n}\n\nfunction getPolymorphicDiscriminatorSafely(serializer: Serializer, typeName?: string) {\n  return (typeName && serializer.modelMappers[typeName] && serializer.modelMappers[typeName].type.polymorphicDiscriminator);\n}\n\nexport interface MapperConstraints {\n  InclusiveMaximum?: number;\n  ExclusiveMaximum?: number;\n  InclusiveMinimum?: number;\n  ExclusiveMinimum?: number;\n  MaxLength?: number;\n  MinLength?: number;\n  Pattern?: RegExp;\n  MaxItems?: number;\n  MinItems?: number;\n  UniqueItems?: true;\n  MultipleOf?: number;\n}\n\nexport type MapperType = SimpleMapperType | CompositeMapperType | SequenceMapperType | DictionaryMapperType | EnumMapperType;\n\nexport interface SimpleMapperType {\n  name: \"Base64Url\"\n  | \"Boolean\"\n  | \"ByteArray\"\n  | \"Date\"\n  | \"DateTime\"\n  | \"DateTimeRfc1123\"\n  | \"Object\"\n  | \"Stream\"\n  | \"String\"\n  | \"TimeSpan\"\n  | \"UnixTime\"\n  | \"Uuid\"\n  | \"Number\"\n  | \"any\";\n}\n\nexport interface CompositeMapperType {\n  name: \"Composite\";\n\n  // Only one of the two below properties should be present.\n  // Use className to reference another type definition,\n  // and use modelProperties/additionalProperties when the reference to the other type has been resolved.\n  className?: string;\n\n  modelProperties?: { [propertyName: string]: Mapper };\n  additionalProperties?: Mapper;\n\n  uberParent?: string;\n  polymorphicDiscriminator?: PolymorphicDiscriminator;\n}\n\nexport interface SequenceMapperType {\n  name: \"Sequence\";\n  element: Mapper;\n}\n\nexport interface DictionaryMapperType {\n  name: \"Dictionary\";\n  value: Mapper;\n}\n\nexport interface EnumMapperType {\n  name: \"Enum\";\n  allowedValues: any[];\n}\n\nexport interface BaseMapper {\n  xmlName?: string;\n  xmlIsAttribute?: boolean;\n  xmlElementName?: string;\n  xmlIsWrapped?: boolean;\n  readOnly?: boolean;\n  isConstant?: boolean;\n  required?: boolean;\n  nullable?: boolean;\n  serializedName?: string;\n  type: MapperType;\n  defaultValue?: any;\n  constraints?: MapperConstraints;\n}\n\nexport type Mapper = BaseMapper | CompositeMapper | SequenceMapper | DictionaryMapper | EnumMapper;\n\nexport interface PolymorphicDiscriminator {\n  serializedName: string;\n  clientName: string;\n  [key: string]: string;\n}\n\nexport interface CompositeMapper extends BaseMapper {\n  type: CompositeMapperType;\n}\n\nexport interface SequenceMapper extends BaseMapper {\n  type: SequenceMapperType;\n}\n\nexport interface DictionaryMapper extends BaseMapper {\n  type: DictionaryMapperType;\n  headerCollectionPrefix?: string;\n}\n\nexport interface EnumMapper extends BaseMapper {\n  type: EnumMapperType;\n}\n\nexport interface UrlParameterValue {\n  value: string;\n  skipUrlEncoding: boolean;\n}\n\n// TODO: why is this here?\nexport function serializeObject(toSerialize: any): any {\n  if (toSerialize == undefined) return undefined;\n  if (toSerialize instanceof Uint8Array) {\n    toSerialize = base64.encodeByteArray(toSerialize);\n    return toSerialize;\n  }\n  else if (toSerialize instanceof Date) {\n    return toSerialize.toISOString();\n  }\n  else if (Array.isArray(toSerialize)) {\n    const array = [];\n    for (let i = 0; i < toSerialize.length; i++) {\n      array.push(serializeObject(toSerialize[i]));\n    }\n    return array;\n  } else if (typeof toSerialize === \"object\") {\n    const dictionary: { [key: string]: any } = {};\n    for (const property in toSerialize) {\n      dictionary[property] = serializeObject(toSerialize[property]);\n    }\n    return dictionary;\n  }\n  return toSerialize;\n}\n\n/**\n * Utility function to create a K:V from a list of strings\n */\nfunction strEnum<T extends string>(o: Array<T>): { [K in T]: K } {\n  const result: any = {};\n  for (const key of o) {\n    result[key] = key;\n  }\n  return result;\n}\n\nexport const MapperType = strEnum([\n  \"Base64Url\",\n  \"Boolean\",\n  \"ByteArray\",\n  \"Composite\",\n  \"Date\",\n  \"DateTime\",\n  \"DateTimeRfc1123\",\n  \"Dictionary\",\n  \"Enum\",\n  \"Number\",\n  \"Object\",\n  \"Sequence\",\n  \"String\",\n  \"Stream\",\n  \"TimeSpan\",\n  \"UnixTime\"\n]);\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpHeaders } from \"./httpHeaders\";\nimport { OperationSpec } from \"./operationSpec\";\nimport { Mapper, Serializer } from \"./serializer\";\nimport { generateUuid } from \"./util/utils\";\nimport { HttpOperationResponse } from \"./httpOperationResponse\";\nimport { OperationResponse } from \"./operationResponse\";\nimport { ProxySettings } from \"./serviceClient\";\n\nexport type HttpMethods = \"GET\" | \"PUT\" | \"POST\" | \"DELETE\" | \"PATCH\" | \"HEAD\" | \"OPTIONS\" | \"TRACE\";\nexport type HttpRequestBody = Blob | string | ArrayBuffer | ArrayBufferView | (() => NodeJS.ReadableStream);\n\n/**\n * Fired in response to upload or download progress.\n */\nexport type TransferProgressEvent = {\n  /**\n   * The number of bytes loaded so far.\n   */\n  loadedBytes: number\n};\n\n/**\n * Allows the request to be aborted upon firing of the \"abort\" event.\n * Compatible with the browser built-in AbortSignal and common polyfills.\n */\nexport interface AbortSignalLike {\n  readonly aborted: boolean;\n  addEventListener(type: \"abort\", listener: (this: AbortSignalLike, ev: any) => any, options?: any): void;\n  removeEventListener(type: \"abort\", listener: (this: AbortSignalLike, ev: any) => any, options?: any): void;\n}\n\n/**\n * Creates a new WebResource object.\n *\n * This class provides an abstraction over a REST call by being library / implementation agnostic and wrapping the necessary\n * properties to initiate a request.\n *\n * @constructor\n */\nexport class WebResource {\n  url: string;\n  method: HttpMethods;\n  body?: any;\n  headers: HttpHeaders;\n  /**\n   * Whether or not the body of the HttpOperationResponse should be treated as a stream.\n   */\n  streamResponseBody?: boolean;\n  /**\n   * Whether or not the HttpOperationResponse should be deserialized. If this is undefined, then the\n   * HttpOperationResponse should be deserialized.\n   */\n  shouldDeserialize?: boolean | ((response: HttpOperationResponse) => boolean);\n  /**\n   * A function that returns the proper OperationResponse for the given OperationSpec and\n   * HttpOperationResponse combination. If this is undefined, then a simple status code lookup will\n   * be used.\n   */\n  operationResponseGetter?: (operationSpec: OperationSpec, response: HttpOperationResponse) => (undefined | OperationResponse);\n  formData?: any;\n  query?: { [key: string]: any; };\n  operationSpec?: OperationSpec;\n  withCredentials: boolean;\n  timeout: number;\n  proxySettings?: ProxySettings;\n\n  abortSignal?: AbortSignalLike;\n\n  /** Callback which fires upon upload progress. */\n  onUploadProgress?: (progress: TransferProgressEvent) => void;\n\n  /** Callback which fires upon download progress. */\n  onDownloadProgress?: (progress: TransferProgressEvent) => void;\n\n  constructor(\n    url?: string,\n    method?: HttpMethods,\n    body?: any,\n    query?: { [key: string]: any; },\n    headers?: { [key: string]: any; } | HttpHeaders,\n    streamResponseBody?: boolean,\n    withCredentials?: boolean,\n    abortSignal?: AbortSignalLike,\n    timeout?: number,\n    onUploadProgress?: (progress: TransferProgressEvent) => void,\n    onDownloadProgress?: (progress: TransferProgressEvent) => void,\n    proxySettings?: ProxySettings) {\n\n    this.streamResponseBody = streamResponseBody;\n    this.url = url || \"\";\n    this.method = method || \"GET\";\n    this.headers = (headers instanceof HttpHeaders ? headers : new HttpHeaders(headers));\n    this.body = body;\n    this.query = query;\n    this.formData = undefined;\n    this.withCredentials = withCredentials || false;\n    this.abortSignal = abortSignal;\n    this.timeout = timeout || 0;\n    this.onUploadProgress = onUploadProgress;\n    this.onDownloadProgress = onDownloadProgress;\n    this.proxySettings = proxySettings;\n  }\n\n  /**\n   * Validates that the required properties such as method, url, headers[\"Content-Type\"],\n   * headers[\"accept-language\"] are defined. It will throw an error if one of the above\n   * mentioned properties are not defined.\n   */\n  validateRequestProperties(): void {\n    if (!this.method) {\n      throw new Error(\"WebResource.method is required.\");\n    }\n    if (!this.url) {\n      throw new Error(\"WebResource.url is required.\");\n    }\n  }\n\n  /**\n   * Prepares the request.\n   * @param {RequestPrepareOptions} options Options to provide for preparing the request.\n   * @returns {WebResource} Returns the prepared WebResource (HTTP Request) object that needs to be given to the request pipeline.\n   */\n  prepare(options: RequestPrepareOptions): WebResource {\n    if (!options) {\n      throw new Error(\"options object is required\");\n    }\n\n    if (options.method == undefined || typeof options.method.valueOf() !== \"string\") {\n      throw new Error(\"options.method must be a string.\");\n    }\n\n    if (options.url && options.pathTemplate) {\n      throw new Error(\"options.url and options.pathTemplate are mutually exclusive. Please provide exactly one of them.\");\n    }\n\n\n    if ((options.pathTemplate == undefined || typeof options.pathTemplate.valueOf() !== \"string\") && (options.url == undefined || typeof options.url.valueOf() !== \"string\")) {\n      throw new Error(\"Please provide exactly one of options.pathTemplate or options.url.\");\n    }\n\n    // set the url if it is provided.\n    if (options.url) {\n      if (typeof options.url !== \"string\") {\n        throw new Error(\"options.url must be of type \\\"string\\\".\");\n      }\n      this.url = options.url;\n    }\n\n    // set the method\n    if (options.method) {\n      const validMethods = [\"GET\", \"PUT\", \"HEAD\", \"DELETE\", \"OPTIONS\", \"POST\", \"PATCH\", \"TRACE\"];\n      if (validMethods.indexOf(options.method.toUpperCase()) === -1) {\n        throw new Error(\"The provided method \\\"\" + options.method + \"\\\" is invalid. Supported HTTP methods are: \" + JSON.stringify(validMethods));\n      }\n    }\n    this.method = (options.method.toUpperCase() as HttpMethods);\n\n    // construct the url if path template is provided\n    if (options.pathTemplate) {\n      const { pathTemplate, pathParameters } = options;\n      if (typeof pathTemplate !== \"string\") {\n        throw new Error(\"options.pathTemplate must be of type \\\"string\\\".\");\n      }\n      if (!options.baseUrl) {\n        options.baseUrl = \"https://management.azure.com\";\n      }\n      const baseUrl = options.baseUrl;\n      let url = baseUrl + (baseUrl.endsWith(\"/\") ? \"\" : \"/\") + (pathTemplate.startsWith(\"/\") ? pathTemplate.slice(1) : pathTemplate);\n      const segments = url.match(/({\\w*\\s*\\w*})/ig);\n      if (segments && segments.length) {\n        if (!pathParameters) {\n          throw new Error(`pathTemplate: ${pathTemplate} has been provided. Hence, options.pathParameters must also be provided.`);\n        }\n        segments.forEach(function (item) {\n          const pathParamName = item.slice(1, -1);\n          const pathParam = (pathParameters as { [key: string]: any })[pathParamName];\n          if (pathParam === null || pathParam === undefined || !(typeof pathParam === \"string\" || typeof pathParam === \"object\")) {\n            throw new Error(`pathTemplate: ${pathTemplate} contains the path parameter ${pathParamName}` +\n              ` however, it is not present in ${pathParameters} - ${JSON.stringify(pathParameters, undefined, 2)}.` +\n              `The value of the path parameter can either be a \"string\" of the form { ${pathParamName}: \"some sample value\" } or ` +\n              `it can be an \"object\" of the form { \"${pathParamName}\": { value: \"some sample value\", skipUrlEncoding: true } }.`);\n          }\n\n          if (typeof pathParam.valueOf() === \"string\") {\n            url = url.replace(item, encodeURIComponent(pathParam));\n          }\n\n          if (typeof pathParam.valueOf() === \"object\") {\n            if (!pathParam.value) {\n              throw new Error(`options.pathParameters[${pathParamName}] is of type \"object\" but it does not contain a \"value\" property.`);\n            }\n            if (pathParam.skipUrlEncoding) {\n              url = url.replace(item, pathParam.value);\n            } else {\n              url = url.replace(item, encodeURIComponent(pathParam.value));\n            }\n          }\n        });\n      }\n      this.url = url;\n    }\n\n    // append query parameters to the url if they are provided. They can be provided with pathTemplate or url option.\n    if (options.queryParameters) {\n      const queryParameters = options.queryParameters;\n      if (typeof queryParameters !== \"object\") {\n        throw new Error(`options.queryParameters must be of type object. It should be a JSON object ` +\n          `of \"query-parameter-name\" as the key and the \"query-parameter-value\" as the value. ` +\n          `The \"query-parameter-value\" may be fo type \"string\" or an \"object\" of the form { value: \"query-parameter-value\", skipUrlEncoding: true }.`);\n      }\n      // append question mark if it is not present in the url\n      if (this.url && this.url.indexOf(\"?\") === -1) {\n        this.url += \"?\";\n      }\n      // construct queryString\n      const queryParams = [];\n      // We need to populate this.query as a dictionary if the request is being used for Sway's validateRequest().\n      this.query = {};\n      for (const queryParamName in queryParameters) {\n        const queryParam: any = queryParameters[queryParamName];\n        if (queryParam) {\n          if (typeof queryParam === \"string\") {\n            queryParams.push(queryParamName + \"=\" + encodeURIComponent(queryParam));\n            this.query[queryParamName] = encodeURIComponent(queryParam);\n          }\n          else if (typeof queryParam === \"object\") {\n            if (!queryParam.value) {\n              throw new Error(`options.queryParameters[${queryParamName}] is of type \"object\" but it does not contain a \"value\" property.`);\n            }\n            if (queryParam.skipUrlEncoding) {\n              queryParams.push(queryParamName + \"=\" + queryParam.value);\n              this.query[queryParamName] = queryParam.value;\n            } else {\n              queryParams.push(queryParamName + \"=\" + encodeURIComponent(queryParam.value));\n              this.query[queryParamName] = encodeURIComponent(queryParam.value);\n            }\n          }\n        }\n      }// end-of-for\n      // append the queryString\n      this.url += queryParams.join(\"&\");\n    }\n\n    // add headers to the request if they are provided\n    if (options.headers) {\n      const headers = options.headers;\n      for (const headerName of Object.keys(options.headers)) {\n        this.headers.set(headerName, headers[headerName]);\n      }\n    }\n    // ensure accept-language is set correctly\n    if (!this.headers.get(\"accept-language\")) {\n      this.headers.set(\"accept-language\", \"en-US\");\n    }\n    // ensure the request-id is set correctly\n    if (!this.headers.get(\"x-ms-client-request-id\") && !options.disableClientRequestId) {\n      this.headers.set(\"x-ms-client-request-id\", generateUuid());\n    }\n\n    // default\n    if (!this.headers.get(\"Content-Type\")) {\n      this.headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n    }\n\n    // set the request body. request.js automatically sets the Content-Length request header, so we need not set it explicilty\n    this.body = options.body;\n    if (options.body != undefined) {\n      // body as a stream special case. set the body as-is and check for some special request headers specific to sending a stream.\n      if (options.bodyIsStream) {\n        if (!this.headers.get(\"Transfer-Encoding\")) {\n          this.headers.set(\"Transfer-Encoding\", \"chunked\");\n        }\n        if (this.headers.get(\"Content-Type\") !== \"application/octet-stream\") {\n          this.headers.set(\"Content-Type\", \"application/octet-stream\");\n        }\n      } else {\n        if (options.serializationMapper) {\n          this.body = new Serializer(options.mappers).serialize(options.serializationMapper, options.body, \"requestBody\");\n        }\n        if (!options.disableJsonStringifyOnBody) {\n          this.body = JSON.stringify(options.body);\n        }\n      }\n    }\n\n    this.abortSignal = options.abortSignal;\n    this.onDownloadProgress = options.onDownloadProgress;\n    this.onUploadProgress = options.onUploadProgress;\n\n    return this;\n  }\n\n  /**\n   * Clone this WebResource HTTP request object.\n   * @returns {WebResource} The clone of this WebResource HTTP request object.\n   */\n  clone(): WebResource {\n    const result = new WebResource(\n      this.url,\n      this.method,\n      this.body,\n      this.query,\n      this.headers && this.headers.clone(),\n      this.streamResponseBody,\n      this.withCredentials,\n      this.abortSignal,\n      this.timeout,\n      this.onUploadProgress,\n      this.onDownloadProgress);\n\n    if (this.formData) {\n      result.formData = this.formData;\n    }\n\n    if (this.operationSpec) {\n      result.operationSpec = this.operationSpec;\n    }\n\n    if (this.shouldDeserialize) {\n      result.shouldDeserialize = this.shouldDeserialize;\n    }\n\n    if (this.operationResponseGetter) {\n      result.operationResponseGetter = this.operationResponseGetter;\n    }\n\n    return result;\n  }\n}\n\nexport interface RequestPrepareOptions {\n  /**\n   * The HTTP request method. Valid values are \"GET\", \"PUT\", \"HEAD\", \"DELETE\", \"OPTIONS\", \"POST\",\n   * or \"PATCH\".\n   */\n  method: HttpMethods;\n  /**\n   * The request url. It may or may not have query parameters in it. Either provide the \"url\" or\n   * provide the \"pathTemplate\" in the options object. Both the options are mutually exclusive.\n   */\n  url?: string;\n  /**\n   * A dictionary of query parameters to be appended to the url, where\n   * the \"key\" is the \"query-parameter-name\" and the \"value\" is the \"query-parameter-value\".\n   * The \"query-parameter-value\" can be of type \"string\" or it can be of type \"object\".\n   * The \"object\" format should be used when you want to skip url encoding. While using the object format,\n   * the object must have a property named value which provides the \"query-parameter-value\".\n   * Example:\n   *    - query-parameter-value in \"object\" format: { \"query-parameter-name\": { value: \"query-parameter-value\", skipUrlEncoding: true } }\n   *    - query-parameter-value in \"string\" format: { \"query-parameter-name\": \"query-parameter-value\"}.\n   * Note: \"If options.url already has some query parameters, then the value provided in options.queryParameters will be appended to the url.\n   */\n  queryParameters?: { [key: string]: any | ParameterValue };\n  /**\n   * The path template of the request url. Either provide the \"url\" or provide the \"pathTemplate\" in\n   * the options object. Both the options are mutually exclusive.\n   * Example: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}\"\n   */\n  pathTemplate?: string;\n  /**\n   * The base url of the request. Default value is: \"https://management.azure.com\". This is\n   * applicable only with pathTemplate. If you are providing options.url then it is expected that\n   * you provide the complete url.\n   */\n  baseUrl?: string;\n  /**\n   * A dictionary of path parameters that need to be replaced with actual values in the pathTemplate.\n   * Here the key is the \"path-parameter-name\" and the value is the \"path-parameter-value\".\n   * The \"path-parameter-value\" can be of type \"string\"  or it can be of type \"object\".\n   * The \"object\" format should be used when you want to skip url encoding. While using the object format,\n   * the object must have a property named value which provides the \"path-parameter-value\".\n   * Example:\n   *    - path-parameter-value in \"object\" format: { \"path-parameter-name\": { value: \"path-parameter-value\", skipUrlEncoding: true } }\n   *    - path-parameter-value in \"string\" format: { \"path-parameter-name\": \"path-parameter-value\" }.\n   */\n  pathParameters?: { [key: string]: any | ParameterValue };\n  formData?: { [key: string]: any };\n  /**\n   * A dictionary of request headers that need to be applied to the request.\n   * Here the key is the \"header-name\" and the value is the \"header-value\". The header-value MUST be of type string.\n   *  - ContentType must be provided with the key name as \"Content-Type\". Default value \"application/json; charset=utf-8\".\n   *  - \"Transfer-Encoding\" is set to \"chunked\" by default if \"options.bodyIsStream\" is set to true.\n   *  - \"Content-Type\" is set to \"application/octet-stream\" by default if \"options.bodyIsStream\" is set to true.\n   *  - \"accept-language\" by default is set to \"en-US\"\n   *  - \"x-ms-client-request-id\" by default is set to a new Guid. To not generate a guid for the request, please set options.disableClientRequestId to true\n   */\n  headers?: { [key: string]: any };\n  /**\n   * When set to true, instructs the client to not set \"x-ms-client-request-id\" header to a new Guid().\n   */\n  disableClientRequestId?: boolean;\n  /**\n   * The request body. It can be of any type. This value will be serialized if it is not a stream.\n   */\n  body?: any;\n  /**\n   * Provides information on how to serialize the request body.\n   */\n  serializationMapper?: Mapper;\n  /**\n   * A dictionary of mappers that may be used while [de]serialization.\n   */\n  mappers?: { [x: string]: any };\n  /**\n   * Provides information on how to deserialize the response body.\n   */\n  deserializationMapper?: object;\n  /**\n   * Indicates whether this method should JSON.stringify() the request body. Default value: false.\n   */\n  disableJsonStringifyOnBody?: boolean;\n  /**\n   * Indicates whether the request body is a stream (useful for file upload scenarios).\n   */\n  bodyIsStream?: boolean;\n  abortSignal?: AbortSignalLike;\n  onUploadProgress?: (progress: TransferProgressEvent) => void;\n  onDownloadProgress?: (progress: TransferProgressEvent) => void;\n}\n\n/**\n * The Parameter value provided for path or query parameters in RequestPrepareOptions\n */\nexport interface ParameterValue {\n  value: any;\n  skipUrlEncoding: boolean;\n  [key: string]: any;\n}\n\n/**\n * Describes the base structure of the options object that will be used in every operation.\n */\nexport interface RequestOptionsBase {\n  /**\n   * @property {object} [customHeaders] User defined custom request headers that\n   * will be applied before the request is sent.\n   */\n  customHeaders?: { [key: string]: string };\n\n  /**\n   * The signal which can be used to abort requests.\n   */\n  abortSignal?: AbortSignalLike;\n\n  /**\n   * The number of milliseconds a request can take before automatically being terminated.\n   */\n  timeout?: number;\n\n  /**\n   * Callback which fires upon upload progress.\n   */\n  onUploadProgress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * Callback which fires upon download progress.\n   */\n  onDownloadProgress?: (progress: TransferProgressEvent) => void;\n\n  [key: string]: any;\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpOperationResponse } from \"./httpOperationResponse\";\nimport { WebResource } from \"./webResource\";\n\nexport class RestError extends Error {\n  static readonly REQUEST_SEND_ERROR: string = \"REQUEST_SEND_ERROR\";\n  static readonly REQUEST_ABORTED_ERROR: string = \"REQUEST_ABORTED_ERROR\";\n  static readonly PARSE_ERROR: string = \"PARSE_ERROR\";\n\n  code?: string;\n  statusCode?: number;\n  request?: WebResource;\n  response?: HttpOperationResponse;\n  body?: any;\n  constructor(message: string, code?: string, statusCode?: number, request?: WebResource, response?: HttpOperationResponse, body?: any) {\n    super(message);\n    this.code = code;\n    this.statusCode = statusCode;\n    this.request = request;\n    this.response = response;\n    this.body = body;\n\n    Object.setPrototypeOf(this, RestError.prototype);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpClient } from \"./httpClient\";\nimport { HttpHeaders } from \"./httpHeaders\";\nimport { WebResource, TransferProgressEvent } from \"./webResource\";\nimport { HttpOperationResponse } from \"./httpOperationResponse\";\nimport { RestError } from \"./restError\";\n\n/**\n * A HttpClient implementation that uses XMLHttpRequest to send HTTP requests.\n */\nexport class XhrHttpClient implements HttpClient {\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    const xhr = new XMLHttpRequest();\n\n    if (request.proxySettings) {\n      throw new Error(\"HTTP proxy is not supported in browser environment\");\n    }\n\n    const abortSignal = request.abortSignal;\n    if (abortSignal) {\n      const listener = () => {\n        xhr.abort();\n      };\n      abortSignal.addEventListener(\"abort\", listener);\n      xhr.addEventListener(\"readystatechange\", () => {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n          abortSignal.removeEventListener(\"abort\", listener);\n        }\n      });\n    }\n\n    addProgressListener(xhr.upload, request.onUploadProgress);\n    addProgressListener(xhr, request.onDownloadProgress);\n\n    if (request.formData) {\n      const formData = request.formData;\n      const requestForm = new FormData();\n      const appendFormValue = (key: string, value: any) => {\n        if (value && value.hasOwnProperty(\"value\") && value.hasOwnProperty(\"options\")) {\n          requestForm.append(key, value.value, value.options);\n        } else {\n          requestForm.append(key, value);\n        }\n      };\n      for (const formKey of Object.keys(formData)) {\n        const formValue = formData[formKey];\n        if (Array.isArray(formValue)) {\n          for (let j = 0; j < formValue.length; j++) {\n            appendFormValue(formKey, formValue[j]);\n          }\n        } else {\n          appendFormValue(formKey, formValue);\n        }\n      }\n\n      request.body = requestForm;\n      request.formData = undefined;\n      const contentType = request.headers.get(\"Content-Type\");\n      if (contentType && contentType.indexOf(\"multipart/form-data\") !== -1) {\n        // browser will automatically apply a suitable content-type header\n        request.headers.remove(\"Content-Type\");\n      }\n    }\n\n    xhr.open(request.method, request.url);\n    xhr.timeout = request.timeout;\n    xhr.withCredentials = request.withCredentials;\n    for (const header of request.headers.headersArray()) {\n      xhr.setRequestHeader(header.name, header.value);\n    }\n    xhr.responseType = request.streamResponseBody ? \"blob\" : \"text\";\n\n    // tslint:disable-next-line:no-null-keyword\n    xhr.send(request.body === undefined ? null : request.body);\n\n    if (request.streamResponseBody) {\n      return new Promise((resolve, reject) => {\n        xhr.addEventListener(\"readystatechange\", () => {\n          // Resolve as soon as headers are loaded\n          if (xhr.readyState === XMLHttpRequest.HEADERS_RECEIVED) {\n            const blobBody = new Promise<Blob>((resolve, reject) => {\n              xhr.addEventListener(\"load\", () => {\n                resolve(xhr.response);\n              });\n              rejectOnTerminalEvent(request, xhr, reject);\n            });\n            resolve({\n              request,\n              status: xhr.status,\n              headers: parseHeaders(xhr),\n              blobBody\n            });\n          }\n        });\n        rejectOnTerminalEvent(request, xhr, reject);\n      });\n    } else {\n      return new Promise(function (resolve, reject) {\n        xhr.addEventListener(\"load\", () => resolve({\n          request,\n          status: xhr.status,\n          headers: parseHeaders(xhr),\n          bodyAsText: xhr.responseText\n        }));\n        rejectOnTerminalEvent(request, xhr, reject);\n      });\n    }\n  }\n}\n\nfunction addProgressListener(xhr: XMLHttpRequestEventTarget, listener?: (progress: TransferProgressEvent) => void) {\n  if (listener) {\n    xhr.addEventListener(\"progress\", rawEvent => listener({\n      loadedBytes: rawEvent.loaded\n    }));\n  }\n}\n\n// exported locally for testing\nexport function parseHeaders(xhr: XMLHttpRequest) {\n  const responseHeaders = new HttpHeaders();\n  const headerLines = xhr.getAllResponseHeaders().trim().split(/[\\r\\n]+/);\n  for (const line of headerLines) {\n    const index = line.indexOf(\":\");\n    const headerName = line.slice(0, index);\n    const headerValue = line.slice(index + 2);\n    responseHeaders.set(headerName, headerValue);\n  }\n  return responseHeaders;\n}\n\nfunction rejectOnTerminalEvent(request: WebResource, xhr: XMLHttpRequest, reject: (err: any) => void) {\n  xhr.addEventListener(\"error\", () => reject(new RestError(`Failed to send request to ${request.url}`, RestError.REQUEST_SEND_ERROR, undefined, request)));\n  xhr.addEventListener(\"abort\", () => reject(new RestError(\"The request was aborted\", RestError.REQUEST_ABORTED_ERROR, undefined, request)));\n  xhr.addEventListener(\"timeout\", () => reject(new RestError(`timeout of ${xhr.timeout}ms exceeded`, RestError.REQUEST_SEND_ERROR, undefined, request)));\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * The different levels of logs that can be used with the HttpPipelineLogger.\n */\nexport enum HttpPipelineLogLevel {\n  /**\n   * A log level that indicates that no logs will be logged.\n   */\n  OFF,\n\n  /**\n   * An error log.\n   */\n  ERROR,\n\n  /**\n   * A warning log.\n   */\n  WARNING,\n\n  /**\n   * An information log.\n   */\n  INFO\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { AbortSignalLike } from \"../webResource\";\n\n/**\n * Represents a credential capable of providing an authentication token.\n */\nexport interface TokenCredential {\n  /**\n   * Gets the token provided by this credential.\n   *\n   * @param scopes The list of scopes for which the token will have access.\n   * @param options The options used to configure any requests this\n   *                TokenCredential implementation might make.\n   */\n  getToken(scopes: string | string[], options?: GetTokenOptions): Promise<AccessToken | null>;\n}\n\n/**\n * Defines options for TokenCredential.getToken.\n */\nexport interface GetTokenOptions {\n  /**\n   * An AbortSignalLike implementation that can be used to cancel\n   * the token request.\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Represents an access token with an expiration time.\n */\nexport interface AccessToken {\n  /**\n   * The access token.\n   */\n  token: string;\n\n  /**\n   * The access token's expiration timestamp.\n   */\n  expiresOnTimestamp: number;\n}\n\n/**\n * Tests an object to determine whether it implements TokenCredential.\n *\n * @param credential The assumed TokenCredential to be tested.\n */\nexport function isTokenCredential(credential: any): credential is TokenCredential {\n  return credential && typeof credential.getToken === \"function\";\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { QueryCollectionFormat } from \"./queryCollectionFormat\";\nimport { Mapper } from \"./serializer\";\n\nexport type ParameterPath = string | string[] | { [propertyName: string]: ParameterPath };\n\n/**\n * A common interface that all Operation parameter's extend.\n */\nexport interface OperationParameter {\n  /**\n   * The path to this parameter's value in OperationArguments or the object that contains paths for\n   * each property's value in OperationArguments.\n   */\n  parameterPath: ParameterPath;\n\n  /**\n   * The mapper that defines how to validate and serialize this parameter's value.\n   */\n  mapper: Mapper;\n}\n\n/**\n * A parameter for an operation that will be substituted into the operation's request URL.\n */\nexport interface OperationURLParameter extends OperationParameter {\n  /**\n   * Whether or not to skip encoding the URL parameter's value before adding it to the URL.\n   */\n  skipEncoding?: boolean;\n}\n\n/**\n * A parameter for an operation that will be added as a query parameter to the operation's HTTP\n * request.\n */\nexport interface OperationQueryParameter extends OperationParameter {\n  /**\n   * Whether or not to skip encoding the query parameter's value before adding it to the URL.\n   */\n  skipEncoding?: boolean;\n\n  /**\n   * If this query parameter's value is a collection, what type of format should the value be\n   * converted to.\n   */\n  collectionFormat?: QueryCollectionFormat;\n}\n\n/**\n * Get the path to this parameter's value as a dotted string (a.b.c).\n * @param parameter The parameter to get the path string for.\n * @returns The path to this parameter's value as a dotted string.\n */\nexport function getPathStringFromParameter(parameter: OperationParameter): string {\n  return getPathStringFromParameterPath(parameter.parameterPath, parameter.mapper);\n}\n\nexport function getPathStringFromParameterPath(parameterPath: ParameterPath, mapper: Mapper): string {\n  let result: string;\n  if (typeof parameterPath === \"string\") {\n    result = parameterPath;\n  } else if (Array.isArray(parameterPath)) {\n    result = parameterPath.join(\".\");\n  } else {\n    result = mapper.serializedName!;\n  }\n  return result;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { OperationParameter, OperationQueryParameter, OperationURLParameter } from \"./operationParameter\";\nimport { OperationResponse } from \"./operationResponse\";\nimport { MapperType, Serializer } from \"./serializer\";\nimport { HttpMethods } from \"./webResource\";\n\n/**\n * A specification that defines an operation.\n */\nexport interface OperationSpec {\n  /**\n   * The serializer to use in this operation.\n   */\n  readonly serializer: Serializer;\n\n  /**\n   * The HTTP method that should be used by requests for this operation.\n   */\n  readonly httpMethod: HttpMethods;\n\n  /**\n   * The URL that was provided in the service's specification. This will still have all of the URL\n   * template variables in it. If this is not provided when the OperationSpec is created, then it\n   * will be populated by a \"baseUri\" property on the ServiceClient.\n   */\n  readonly baseUrl?: string;\n\n  /**\n   * The fixed path for this operation's URL. This will still have all of the URL template variables\n   * in it.\n   */\n  readonly path?: string;\n\n  /**\n   * The content type of the request body. This value will be used as the \"Content-Type\" header if\n   * it is provided.\n   */\n  readonly contentType?: string;\n\n  /**\n   * The parameter that will be used to construct the HTTP request's body.\n   */\n  readonly requestBody?: OperationParameter;\n\n  /**\n   * Whether or not this operation uses XML request and response bodies.\n   */\n  readonly isXML?: boolean;\n\n  /**\n   * The parameters to the operation method that will be substituted into the constructed URL.\n   */\n  readonly urlParameters?: ReadonlyArray<OperationURLParameter>;\n\n  /**\n   * The parameters to the operation method that will be added to the constructed URL's query.\n   */\n  readonly queryParameters?: ReadonlyArray<OperationQueryParameter>;\n\n  /**\n   * The parameters to the operation method that will be converted to headers on the operation's\n   * HTTP request.\n   */\n  readonly headerParameters?: ReadonlyArray<OperationParameter>;\n\n  /**\n   * The parameters to the operation method that will be used to create a formdata body for the\n   * operation's HTTP request.\n   */\n  readonly formDataParameters?: ReadonlyArray<OperationParameter>;\n\n  /**\n   * The different types of responses that this operation can return based on what status code is\n   * returned.\n   */\n  readonly responses: { [responseCode: string]: OperationResponse };\n}\n\nexport function isStreamOperation(operationSpec: OperationSpec): boolean {\n  let result = false;\n  for (const statusCode in operationSpec.responses) {\n    const operationResponse: OperationResponse = operationSpec.responses[statusCode];\n    if (operationResponse.bodyMapper && operationResponse.bodyMapper.type.name === MapperType.Stream) {\n      result = true;\n      break;\n    }\n  }\n  return result;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nconst parser = new DOMParser();\nexport function parseXML(str: string): Promise<any> {\n  try {\n    const dom = parser.parseFromString(str, \"application/xml\");\n    throwIfError(dom);\n\n    const obj = domToObject(dom.childNodes[0]);\n    return Promise.resolve(obj);\n  } catch (err) {\n    return Promise.reject(err);\n  }\n}\n\nlet errorNS = \"\";\ntry {\n  errorNS = parser.parseFromString(\"INVALID\", \"text/xml\").getElementsByTagName(\"parsererror\")[0].namespaceURI!;\n} catch (ignored) {\n  // Most browsers will return a document containing <parsererror>, but IE will throw.\n}\n\nfunction throwIfError(dom: Document) {\n  if (errorNS) {\n    const parserErrors = dom.getElementsByTagNameNS(errorNS, \"parsererror\");\n    if (parserErrors.length) {\n      throw new Error(parserErrors.item(0)!.innerHTML);\n    }\n  }\n}\n\nfunction isElement(node: Node): node is Element {\n  return !!(node as Element).attributes;\n}\n\n/**\n * Get the Element-typed version of the provided Node if the provided node is an element with\n * attributes. If it isn't, then undefined is returned.\n */\nfunction asElementWithAttributes(node: Node): Element | undefined {\n  return isElement(node) && node.hasAttributes() ? node : undefined;\n}\n\nfunction domToObject(node: Node): any {\n  let result: any = {};\n\n  const childNodeCount: number = node.childNodes.length;\n\n  const firstChildNode: Node = node.childNodes[0];\n  const onlyChildTextValue: string | undefined = (firstChildNode && childNodeCount === 1 && firstChildNode.nodeType === Node.TEXT_NODE && firstChildNode.nodeValue) || undefined;\n\n  const elementWithAttributes: Element | undefined = asElementWithAttributes(node);\n  if (elementWithAttributes) {\n    result[\"$\"] = {};\n\n    for (let i = 0; i < elementWithAttributes.attributes.length; i++) {\n      const attr = elementWithAttributes.attributes[i];\n      result[\"$\"][attr.nodeName] = attr.nodeValue;\n    }\n\n    if (onlyChildTextValue) {\n      result[\"_\"] = onlyChildTextValue;\n    }\n  } else if (childNodeCount === 0) {\n    result = \"\";\n  } else if (onlyChildTextValue) {\n    result = onlyChildTextValue;\n  }\n\n  if (!onlyChildTextValue) {\n    for (let i = 0; i < childNodeCount; i++) {\n      const child = node.childNodes[i];\n      // Ignore leading/trailing whitespace nodes\n      if (child.nodeType !== Node.TEXT_NODE) {\n        const childObject: any = domToObject(child);\n        if (!result[child.nodeName]) {\n          result[child.nodeName] = childObject;\n        } else if (Array.isArray(result[child.nodeName])) {\n          result[child.nodeName].push(childObject);\n        } else {\n          result[child.nodeName] = [result[child.nodeName], childObject];\n        }\n      }\n    }\n  }\n\n  return result;\n}\n\n// tslint:disable-next-line:no-null-keyword\nconst doc = document.implementation.createDocument(null, null, null);\nconst serializer = new XMLSerializer();\n\nexport function stringifyXML(obj: any, opts?: { rootName?: string }) {\n  const rootName = opts && opts.rootName || \"root\";\n  const dom = buildNode(obj, rootName)[0];\n  return '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>' + serializer.serializeToString(dom);\n}\n\nfunction buildAttributes(attrs: { [key: string]: { toString(): string; } }): Attr[] {\n  const result = [];\n  for (const key of Object.keys(attrs)) {\n    const attr = doc.createAttribute(key);\n    attr.value = attrs[key].toString();\n    result.push(attr);\n  }\n  return result;\n}\n\nfunction buildNode(obj: any, elementName: string): Node[] {\n  if (typeof obj === \"string\" || typeof obj === \"number\" || typeof obj === \"boolean\") {\n    const elem = doc.createElement(elementName);\n    elem.textContent = obj.toString();\n    return [elem];\n  }\n  else if (Array.isArray(obj)) {\n    const result = [];\n    for (const arrayElem of obj) {\n      for (const child of buildNode(arrayElem, elementName)) {\n        result.push(child);\n      }\n    }\n    return result;\n  } else if (typeof obj === \"object\") {\n    const elem = doc.createElement(elementName);\n    for (const key of Object.keys(obj)) {\n      if (key === \"$\") {\n        for (const attr of buildAttributes(obj[key])) {\n          elem.attributes.setNamedItem(attr);\n        }\n      } else {\n        for (const child of buildNode(obj[key], key)) {\n          elem.appendChild(child);\n        }\n      }\n    }\n    return [elem];\n  }\n  else {\n    throw new Error(`Illegal value passed to buildObject: ${obj}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { HttpPipelineLogger } from \"../httpPipelineLogger\";\nimport { HttpPipelineLogLevel } from \"../httpPipelineLogLevel\";\nimport { WebResource } from \"../webResource\";\n\n/**\n * Creates a new RequestPolicy per-request that uses the provided nextPolicy.\n */\nexport type RequestPolicyFactory = {\n  create(nextPolicy: RequestPolicy, options: RequestPolicyOptions): RequestPolicy\n};\n\nexport interface RequestPolicy {\n  sendRequest(httpRequest: WebResource): Promise<HttpOperationResponse>;\n}\n\nexport abstract class BaseRequestPolicy implements RequestPolicy {\n  protected constructor(readonly _nextPolicy: RequestPolicy, readonly _options: RequestPolicyOptions) {\n  }\n\n  public abstract sendRequest(webResource: WebResource): Promise<HttpOperationResponse>;\n\n  /**\n   * Get whether or not a log with the provided log level should be logged.\n   * @param logLevel The log level of the log that will be logged.\n   * @returns Whether or not a log with the provided log level should be logged.\n   */\n  public shouldLog(logLevel: HttpPipelineLogLevel): boolean {\n    return this._options.shouldLog(logLevel);\n  }\n\n  /**\n   * Attempt to log the provided message to the provided logger. If no logger was provided or if\n   * the log level does not meat the logger's threshold, then nothing will be logged.\n   * @param logLevel The log level of this log.\n   * @param message The message of this log.\n   */\n  public log(logLevel: HttpPipelineLogLevel, message: string): void {\n    this._options.log(logLevel, message);\n  }\n}\n\n/**\n * Optional properties that can be used when creating a RequestPolicy.\n */\nexport class RequestPolicyOptions {\n  constructor(private _logger?: HttpPipelineLogger) {\n  }\n\n  /**\n   * Get whether or not a log with the provided log level should be logged.\n   * @param logLevel The log level of the log that will be logged.\n   * @returns Whether or not a log with the provided log level should be logged.\n   */\n  public shouldLog(logLevel: HttpPipelineLogLevel): boolean {\n    return !!this._logger &&\n      logLevel !== HttpPipelineLogLevel.OFF &&\n      logLevel <= this._logger.minimumLogLevel;\n  }\n\n  /**\n   * Attempt to log the provided message to the provided logger. If no logger was provided or if\n   * the log level does not meat the logger's threshold, then nothing will be logged.\n   * @param logLevel The log level of this log.\n   * @param message The message of this log.\n   */\n  public log(logLevel: HttpPipelineLogLevel, message: string): void {\n    if (this._logger && this.shouldLog(logLevel)) {\n      this._logger.log(logLevel, message);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { OperationResponse } from \"../operationResponse\";\nimport { OperationSpec, isStreamOperation } from \"../operationSpec\";\nimport { RestError } from \"../restError\";\nimport { Mapper, MapperType } from \"../serializer\";\nimport * as utils from \"../util/utils\";\nimport { parseXML } from \"../util/xml\";\nimport { WebResource } from \"../webResource\";\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"./requestPolicy\";\n\n/**\n * The content-types that will indicate that an operation response should be deserialized in a\n * particular way.\n */\nexport interface DeserializationContentTypes {\n  /**\n   * The content-types that indicate that an operation response should be deserialized as JSON.\n   * Defaults to [ \"application/json\", \"text/json\" ].\n   */\n  json?: string[];\n\n  /**\n   * The content-types that indicate that an operation response should be deserialized as XML.\n   * Defaults to [ \"application/xml\", \"application/atom+xml\" ].\n   */\n  xml?: string[];\n}\n\n/**\n * Create a new serialization RequestPolicyCreator that will serialized HTTP request bodies as they\n * pass through the HTTP pipeline.\n */\nexport function deserializationPolicy(deserializationContentTypes?: DeserializationContentTypes): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new DeserializationPolicy(nextPolicy, deserializationContentTypes, options);\n    }\n  };\n}\n\nexport const defaultJsonContentTypes = [\"application/json\", \"text/json\"];\nexport const defaultXmlContentTypes = [\"application/xml\", \"application/atom+xml\"];\n\n/**\n * A RequestPolicy that will deserialize HTTP response bodies and headers as they pass through the\n * HTTP pipeline.\n */\nexport class DeserializationPolicy extends BaseRequestPolicy {\n  public readonly jsonContentTypes: string[];\n  public readonly xmlContentTypes: string[];\n\n  constructor(nextPolicy: RequestPolicy, deserializationContentTypes: DeserializationContentTypes | undefined, options: RequestPolicyOptions) {\n    super(nextPolicy, options);\n\n    this.jsonContentTypes = deserializationContentTypes && deserializationContentTypes.json || defaultJsonContentTypes;\n    this.xmlContentTypes = deserializationContentTypes && deserializationContentTypes.xml || defaultXmlContentTypes;\n  }\n\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this._nextPolicy.sendRequest(request).then((response: HttpOperationResponse) => deserializeResponseBody(this.jsonContentTypes, this.xmlContentTypes, response));\n  }\n}\n\nfunction getOperationResponse(parsedResponse: HttpOperationResponse): undefined | OperationResponse {\n  let result: OperationResponse | undefined;\n  const request: WebResource = parsedResponse.request;\n  const operationSpec: OperationSpec | undefined = request.operationSpec;\n  if (operationSpec) {\n    const operationResponseGetter: undefined | ((operationSpec: OperationSpec, response: HttpOperationResponse) => (undefined | OperationResponse)) = request.operationResponseGetter;\n    if (!operationResponseGetter) {\n      result = operationSpec.responses[parsedResponse.status];\n    } else {\n      result = operationResponseGetter(operationSpec, parsedResponse);\n    }\n  }\n  return result;\n}\n\nfunction shouldDeserializeResponse(parsedResponse: HttpOperationResponse): boolean {\n  const shouldDeserialize: undefined | boolean | ((response: HttpOperationResponse) => boolean) = parsedResponse.request.shouldDeserialize;\n  let result: boolean;\n  if (shouldDeserialize === undefined) {\n    result = true;\n  } else if (typeof shouldDeserialize === \"boolean\") {\n    result = shouldDeserialize;\n  } else {\n    result = shouldDeserialize(parsedResponse);\n  }\n  return result;\n}\n\nexport function deserializeResponseBody(jsonContentTypes: string[], xmlContentTypes: string[], response: HttpOperationResponse): Promise<HttpOperationResponse> {\n  return parse(jsonContentTypes, xmlContentTypes, response).then(parsedResponse => {\n    const shouldDeserialize: boolean = shouldDeserializeResponse(parsedResponse);\n    if (shouldDeserialize) {\n      const operationSpec: OperationSpec | undefined = parsedResponse.request.operationSpec;\n      if (operationSpec && operationSpec.responses) {\n        const statusCode: number = parsedResponse.status;\n\n        const expectedStatusCodes: string[] = Object.keys(operationSpec.responses);\n\n        const hasNoExpectedStatusCodes: boolean = (expectedStatusCodes.length === 0 || (expectedStatusCodes.length === 1 && expectedStatusCodes[0] === \"default\"));\n\n        const responseSpec: OperationResponse | undefined = getOperationResponse(parsedResponse);\n\n        const isExpectedStatusCode: boolean = hasNoExpectedStatusCodes ? (200 <= statusCode && statusCode < 300) : !!responseSpec;\n        if (!isExpectedStatusCode) {\n          const defaultResponseSpec: OperationResponse = operationSpec.responses.default;\n          if (defaultResponseSpec) {\n            const initialErrorMessage: string = isStreamOperation(operationSpec)\n              ? `Unexpected status code: ${statusCode}`\n              : parsedResponse.bodyAsText as string;\n\n            const error = new RestError(initialErrorMessage);\n            error.statusCode = statusCode;\n            error.request = utils.stripRequest(parsedResponse.request);\n            error.response = utils.stripResponse(parsedResponse);\n\n            let parsedErrorResponse: { [key: string]: any } = parsedResponse.parsedBody;\n            try {\n              if (parsedErrorResponse) {\n                const defaultResponseBodyMapper: Mapper | undefined = defaultResponseSpec.bodyMapper;\n                if (defaultResponseBodyMapper && defaultResponseBodyMapper.serializedName === \"CloudError\") {\n                  if (parsedErrorResponse.error) {\n                    parsedErrorResponse = parsedErrorResponse.error;\n                  }\n                  if (parsedErrorResponse.code) {\n                    error.code = parsedErrorResponse.code;\n                  }\n                  if (parsedErrorResponse.message) {\n                    error.message = parsedErrorResponse.message;\n                  }\n                } else {\n                  let internalError: any = parsedErrorResponse;\n                  if (parsedErrorResponse.error) {\n                    internalError = parsedErrorResponse.error;\n                  }\n\n                  error.code = internalError.code;\n                  if (internalError.message) {\n                    error.message = internalError.message;\n                  }\n                }\n\n                if (defaultResponseBodyMapper) {\n                  let valueToDeserialize: any = parsedErrorResponse;\n                  if (operationSpec.isXML && defaultResponseBodyMapper.type.name === MapperType.Sequence) {\n                    valueToDeserialize = typeof parsedErrorResponse === \"object\"\n                      ? parsedErrorResponse[defaultResponseBodyMapper.xmlElementName!]\n                      : [];\n                  }\n                  error.body = operationSpec.serializer.deserialize(defaultResponseBodyMapper, valueToDeserialize, \"error.body\");\n                }\n              }\n            } catch (defaultError) {\n              error.message = `Error \\\"${defaultError.message}\\\" occurred in deserializing the responseBody - \\\"${parsedResponse.bodyAsText}\\\" for the default response.`;\n            }\n            return Promise.reject(error);\n          }\n        } else if (responseSpec) {\n          if (responseSpec.bodyMapper) {\n            let valueToDeserialize: any = parsedResponse.parsedBody;\n            if (operationSpec.isXML && responseSpec.bodyMapper.type.name === MapperType.Sequence) {\n              valueToDeserialize = typeof valueToDeserialize === \"object\" ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName!] : [];\n            }\n            try {\n              parsedResponse.parsedBody = operationSpec.serializer.deserialize(responseSpec.bodyMapper, valueToDeserialize, \"operationRes.parsedBody\");\n            } catch (error) {\n              const restError = new RestError(`Error ${error} occurred in deserializing the responseBody - ${parsedResponse.bodyAsText}`);\n              restError.request = utils.stripRequest(parsedResponse.request);\n              restError.response = utils.stripResponse(parsedResponse);\n              return Promise.reject(restError);\n            }\n          } else if (operationSpec.httpMethod === \"HEAD\") {\n            // head methods never have a body, but we return a boolean to indicate presence/absence of the resource\n            parsedResponse.parsedBody = response.status >= 200 && response.status < 300;\n          }\n\n          if (responseSpec.headersMapper) {\n            parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(responseSpec.headersMapper, parsedResponse.headers.rawHeaders(), \"operationRes.parsedHeaders\");\n          }\n        }\n      }\n    }\n    return Promise.resolve(parsedResponse);\n  });\n}\n\nfunction parse(jsonContentTypes: string[], xmlContentTypes: string[], operationResponse: HttpOperationResponse): Promise<HttpOperationResponse> {\n  const errorHandler = (err: Error & { code: string }) => {\n    const msg = `Error \"${err}\" occurred while parsing the response body - ${operationResponse.bodyAsText}.`;\n    const errCode = err.code || RestError.PARSE_ERROR;\n    const e = new RestError(msg, errCode, operationResponse.status, operationResponse.request, operationResponse, operationResponse.bodyAsText);\n    return Promise.reject(e);\n  };\n\n  if (!operationResponse.request.streamResponseBody && operationResponse.bodyAsText) {\n    const text = operationResponse.bodyAsText;\n    const contentType: string = operationResponse.headers.get(\"Content-Type\") || \"\";\n    const contentComponents: string[] = !contentType ? [] : contentType.split(\";\").map(component => component.toLowerCase());\n    if (contentComponents.length === 0 || contentComponents.some(component => jsonContentTypes.indexOf(component) !== -1)) {\n      return new Promise<HttpOperationResponse>(resolve => {\n        operationResponse.parsedBody = JSON.parse(text);\n        resolve(operationResponse);\n      }).catch(errorHandler);\n    } else if (contentComponents.some(component => xmlContentTypes.indexOf(component) !== -1)) {\n      return parseXML(text)\n        .then(body => {\n          operationResponse.parsedBody = body;\n          return operationResponse;\n        })\n        .catch(errorHandler);\n    }\n  }\n\n  return Promise.resolve(operationResponse);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport * as utils from \"../util/utils\";\nimport { WebResource } from \"../webResource\";\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"./requestPolicy\";\nimport { RestError } from \"../restError\";\n\nexport interface RetryData {\n  retryCount: number;\n  retryInterval: number;\n  error?: RetryError;\n}\n\nexport interface RetryError extends Error {\n  message: string;\n  code?: string;\n  innerError?: RetryError;\n}\n\nexport function exponentialRetryPolicy(retryCount?: number, retryInterval?: number, minRetryInterval?: number, maxRetryInterval?: number): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new ExponentialRetryPolicy(nextPolicy, options, retryCount, retryInterval, minRetryInterval, maxRetryInterval);\n    }\n  };\n}\n\nconst DEFAULT_CLIENT_RETRY_INTERVAL = 1000 * 30;\nconst DEFAULT_CLIENT_RETRY_COUNT = 3;\nconst DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 90;\nconst DEFAULT_CLIENT_MIN_RETRY_INTERVAL = 1000 * 3;\n\n/**\n * @class\n * Instantiates a new \"ExponentialRetryPolicyFilter\" instance.\n */\nexport class ExponentialRetryPolicy extends BaseRequestPolicy {\n  /**\n   * The client retry count.\n   */\n  retryCount: number;\n  /**\n   * The client retry interval in milliseconds.\n   */\n  retryInterval: number;\n  /**\n   * The minimum retry interval in milliseconds.\n   */\n  minRetryInterval: number;\n  /**\n   * The maximum retry interval in milliseconds.\n   */\n  maxRetryInterval: number;\n\n  /**\n   * @constructor\n   * @param {RequestPolicy} nextPolicy The next RequestPolicy in the pipeline chain.\n   * @param {RequestPolicyOptions} options The options for this RequestPolicy.\n   * @param {number} [retryCount]        The client retry count.\n   * @param {number} [retryInterval]     The client retry interval, in milliseconds.\n   * @param {number} [minRetryInterval]  The minimum retry interval, in milliseconds.\n   * @param {number} [maxRetryInterval]  The maximum retry interval, in milliseconds.\n   */\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, retryCount?: number, retryInterval?: number, minRetryInterval?: number, maxRetryInterval?: number) {\n    super(nextPolicy, options);\n    function isNumber(n: any): n is number { return typeof n === \"number\"; }\n    this.retryCount = isNumber(retryCount) ? retryCount : DEFAULT_CLIENT_RETRY_COUNT;\n    this.retryInterval = isNumber(retryInterval) ? retryInterval : DEFAULT_CLIENT_RETRY_INTERVAL;\n    this.minRetryInterval = isNumber(minRetryInterval) ? minRetryInterval : DEFAULT_CLIENT_MIN_RETRY_INTERVAL;\n    this.maxRetryInterval = isNumber(maxRetryInterval) ? maxRetryInterval : DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n  }\n\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this._nextPolicy.sendRequest(request.clone())\n      .then(response => retry(this, request, response))\n      .catch(error => retry(this, request, error.response, undefined, error));\n  }\n}\n\n/**\n * Determines if the operation should be retried and how long to wait until the next retry.\n *\n * @param {ExponentialRetryPolicy} policy The ExponentialRetryPolicy that this function is being called against.\n * @param {number} statusCode The HTTP status code.\n * @param {RetryData} retryData  The retry data.\n * @return {boolean} True if the operation qualifies for a retry; false otherwise.\n */\nfunction shouldRetry(policy: ExponentialRetryPolicy, statusCode: number | undefined, retryData: RetryData): boolean {\n  if (statusCode == undefined || (statusCode < 500 && statusCode !== 408) || statusCode === 501 || statusCode === 505) {\n    return false;\n  }\n\n  let currentCount: number;\n  if (!retryData) {\n    throw new Error(\"retryData for the ExponentialRetryPolicyFilter cannot be null.\");\n  } else {\n    currentCount = (retryData && retryData.retryCount);\n  }\n\n  return (currentCount < policy.retryCount);\n}\n\n/**\n * Updates the retry data for the next attempt.\n *\n * @param {ExponentialRetryPolicy} policy The ExponentialRetryPolicy that this function is being called against.\n * @param {RetryData} retryData  The retry data.\n * @param {RetryError} [err] The operation\"s error, if any.\n */\nfunction updateRetryData(policy: ExponentialRetryPolicy, retryData?: RetryData, err?: RetryError): RetryData {\n  if (!retryData) {\n    retryData = {\n      retryCount: 0,\n      retryInterval: 0\n    };\n  }\n\n  if (err) {\n    if (retryData.error) {\n      err.innerError = retryData.error;\n    }\n\n    retryData.error = err;\n  }\n\n  // Adjust retry count\n  retryData.retryCount++;\n\n  // Adjust retry interval\n  let incrementDelta = Math.pow(2, retryData.retryCount) - 1;\n  const boundedRandDelta = policy.retryInterval * 0.8 +\n    Math.floor(Math.random() * (policy.retryInterval * 1.2 - policy.retryInterval * 0.8));\n  incrementDelta *= boundedRandDelta;\n\n  retryData.retryInterval = Math.min(policy.minRetryInterval + incrementDelta, policy.maxRetryInterval);\n\n  return retryData;\n}\n\nfunction retry(policy: ExponentialRetryPolicy, request: WebResource, response?: HttpOperationResponse, retryData?: RetryData, requestError?: RetryError): Promise<HttpOperationResponse> {\n  retryData = updateRetryData(policy, retryData, requestError);\n  const isAborted: boolean | undefined = request.abortSignal && request.abortSignal.aborted;\n  if (!isAborted && shouldRetry(policy, response && response.status, retryData)) {\n    return utils.delay(retryData.retryInterval)\n      .then(() => policy._nextPolicy.sendRequest(request.clone()))\n      .then(res => retry(policy, request, res, retryData, undefined))\n      .catch(err => retry(policy, request, response, retryData, err));\n  } else if (isAborted || requestError || !response) {\n    // If the operation failed in the end, return all errors instead of just the last one\n    const err = retryData.error ||\n      new RestError(\n        \"Failed to send the request.\",\n        RestError.REQUEST_SEND_ERROR,\n        response && response.status,\n        response && response.request,\n        response);\n    return Promise.reject(err);\n  } else {\n    return Promise.resolve(response);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport * as utils from \"../util/utils\";\nimport { WebResource } from \"../webResource\";\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"./requestPolicy\";\n\nexport function generateClientRequestIdPolicy(requestIdHeaderName = \"x-ms-client-request-id\"): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new GenerateClientRequestIdPolicy(nextPolicy, options, requestIdHeaderName);\n    }\n  };\n}\n\nexport class GenerateClientRequestIdPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, private _requestIdHeaderName: string) {\n    super(nextPolicy, options);\n  }\n\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    if (!request.headers.contains(this._requestIdHeaderName)) {\n      request.headers.set(this._requestIdHeaderName, utils.generateUuid());\n    }\n    return this._nextPolicy.sendRequest(request);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/*\n * NOTE: When moving this file, please update \"browser\" section in package.json\n * and \"plugins\" section in webpack.testconfig.ts.\n */\n\nimport { TelemetryInfo } from \"./userAgentPolicy\";\n\ninterface NavigatorEx extends Navigator {\n  readonly oscpu: string | undefined;\n}\n\nexport function getDefaultUserAgentKey(): string {\n  return \"x-ms-command-name\";\n}\n\nexport function getPlatformSpecificData(): TelemetryInfo[] {\n  const navigator = window.navigator as NavigatorEx;\n  const osInfo = {\n    key: \"OS\",\n    value: (navigator.oscpu || navigator.platform).replace(\" \", \"\")\n  };\n\n  return [osInfo];\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpHeaders } from \"../httpHeaders\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { Constants } from \"../util/constants\";\nimport { WebResource } from \"../webResource\";\nimport { getDefaultUserAgentKey, getPlatformSpecificData } from \"./msRestUserAgentPolicy\";\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"./requestPolicy\";\n\nexport type TelemetryInfo = { key?: string; value?: string };\n\nfunction getRuntimeInfo(): TelemetryInfo[] {\n  const msRestRuntime = {\n    key: \"ms-rest-js\",\n    value: Constants.msRestVersion\n  };\n\n  return [msRestRuntime];\n}\n\nfunction getUserAgentString(telemetryInfo: TelemetryInfo[], keySeparator = \" \", valueSeparator = \"/\"): string {\n  return telemetryInfo.map(info => {\n    const value = info.value ? `${valueSeparator}${info.value}` : \"\";\n    return `${info.key}${value}`;\n  }).join(keySeparator);\n}\n\nexport const getDefaultUserAgentHeaderName = getDefaultUserAgentKey;\n\nexport function getDefaultUserAgentValue(): string {\n  const runtimeInfo = getRuntimeInfo();\n  const platformSpecificData = getPlatformSpecificData();\n  const userAgent = getUserAgentString(runtimeInfo.concat(platformSpecificData));\n  return userAgent;\n}\n\nexport function userAgentPolicy(userAgentData?: TelemetryInfo): RequestPolicyFactory {\n  const key: string = (!userAgentData || userAgentData.key == undefined) ? getDefaultUserAgentKey() : userAgentData.key;\n  const value: string = (!userAgentData || userAgentData.value == undefined) ? getDefaultUserAgentValue() : userAgentData.value;\n\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new UserAgentPolicy(nextPolicy, options, key, value);\n    }\n  };\n}\n\nexport class UserAgentPolicy extends BaseRequestPolicy {\n  constructor(readonly _nextPolicy: RequestPolicy, readonly _options: RequestPolicyOptions, protected headerKey: string, protected headerValue: string) {\n    super(_nextPolicy, _options);\n  }\n\n  sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    this.addUserAgentHeader(request);\n    return this._nextPolicy.sendRequest(request);\n  }\n\n  addUserAgentHeader(request: WebResource): void {\n    if (!request.headers) {\n      request.headers = new HttpHeaders();\n    }\n\n    if (!request.headers.get(this.headerKey) && this.headerValue) {\n      request.headers.set(this.headerKey, this.headerValue);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { replaceAll } from \"./util/utils\";\n\ntype URLQueryParseState = \"ParameterName\" | \"ParameterValue\" | \"Invalid\";\n\n/**\n * A class that handles the query portion of a URLBuilder.\n */\nexport class URLQuery {\n  private readonly _rawQuery: { [queryParameterName: string]: string | string[] } = {};\n\n  /**\n   * Get whether or not there any query parameters in this URLQuery.\n   */\n  public any(): boolean {\n    return Object.keys(this._rawQuery).length > 0;\n  }\n\n  /**\n   * Set a query parameter with the provided name and value. If the parameterValue is undefined or\n   * empty, then this will attempt to remove an existing query parameter with the provided\n   * parameterName.\n   */\n  public set(parameterName: string, parameterValue: any): void {\n    if (parameterName) {\n      if (parameterValue != undefined) {\n        const newValue = Array.isArray(parameterValue) ? parameterValue : parameterValue.toString();\n        this._rawQuery[parameterName] = newValue;\n      } else {\n        delete this._rawQuery[parameterName];\n      }\n    }\n  }\n\n  /**\n   * Get the value of the query parameter with the provided name. If no parameter exists with the\n   * provided parameter name, then undefined will be returned.\n   */\n  public get(parameterName: string): string | string[] | undefined {\n    return parameterName ? this._rawQuery[parameterName] : undefined;\n  }\n\n  /**\n   * Get the string representation of this query. The return value will not start with a \"?\".\n   */\n  public toString(): string {\n    let result = \"\";\n    for (const parameterName in this._rawQuery) {\n      if (result) {\n        result += \"&\";\n      }\n      const parameterValue = this._rawQuery[parameterName];\n      if (Array.isArray(parameterValue)) {\n        const parameterStrings = [];\n        for (const parameterValueElement of parameterValue) {\n          parameterStrings.push(`${parameterName}=${parameterValueElement}`);\n        }\n        result += parameterStrings.join(\"&\");\n      } else {\n        result += `${parameterName}=${parameterValue}`;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Parse a URLQuery from the provided text.\n   */\n  public static parse(text: string): URLQuery {\n    const result = new URLQuery();\n\n    if (text) {\n      if (text.startsWith(\"?\")) {\n        text = text.substring(1);\n      }\n\n      let currentState: URLQueryParseState = \"ParameterName\";\n\n      let parameterName = \"\";\n      let parameterValue = \"\";\n      for (let i = 0; i < text.length; ++i) {\n        const currentCharacter: string = text[i];\n        switch (currentState) {\n        case \"ParameterName\":\n          switch (currentCharacter) {\n          case \"=\":\n            currentState = \"ParameterValue\";\n            break;\n\n          case \"&\":\n            parameterName = \"\";\n            parameterValue = \"\";\n            break;\n\n          default:\n            parameterName += currentCharacter;\n            break;\n          }\n          break;\n\n        case \"ParameterValue\":\n          switch (currentCharacter) {\n          case \"=\":\n            parameterName = \"\";\n            parameterValue = \"\";\n            currentState = \"Invalid\";\n            break;\n\n          case \"&\":\n            result.set(parameterName, parameterValue);\n            parameterName = \"\";\n            parameterValue = \"\";\n            currentState = \"ParameterName\";\n            break;\n\n          default:\n            parameterValue += currentCharacter;\n            break;\n          }\n          break;\n\n        case \"Invalid\":\n          if (currentCharacter === \"&\") {\n            currentState = \"ParameterName\";\n          }\n          break;\n\n        default:\n          throw new Error(\"Unrecognized URLQuery parse state: \" + currentState);\n        }\n      }\n      if (currentState === \"ParameterValue\") {\n        result.set(parameterName, parameterValue);\n      }\n    }\n\n    return result;\n  }\n}\n\n/**\n * A class that handles creating, modifying, and parsing URLs.\n */\nexport class URLBuilder {\n  private _scheme: string | undefined;\n  private _host: string | undefined;\n  private _port: string | undefined;\n  private _path: string | undefined;\n  private _query: URLQuery | undefined;\n\n  /**\n   * Set the scheme/protocol for this URL. If the provided scheme contains other parts of a URL\n   * (such as a host, port, path, or query), those parts will be added to this URL as well.\n   */\n  public setScheme(scheme: string | undefined): void {\n    if (!scheme) {\n      this._scheme = undefined;\n    } else {\n      this.set(scheme, \"SCHEME\");\n    }\n  }\n\n  /**\n   * Get the scheme that has been set in this URL.\n   */\n  public getScheme(): string | undefined {\n    return this._scheme;\n  }\n\n  /**\n   * Set the host for this URL. If the provided host contains other parts of a URL (such as a\n   * port, path, or query), those parts will be added to this URL as well.\n   */\n  public setHost(host: string | undefined): void {\n    if (!host) {\n      this._host = undefined;\n    } else {\n      this.set(host, \"SCHEME_OR_HOST\");\n    }\n  }\n\n  /**\n   * Get the host that has been set in this URL.\n   */\n  public getHost(): string | undefined {\n    return this._host;\n  }\n\n  /**\n   * Set the port for this URL. If the provided port contains other parts of a URL (such as a\n   * path or query), those parts will be added to this URL as well.\n   */\n  public setPort(port: number | string | undefined): void {\n    if (port == undefined || port === \"\") {\n      this._port = undefined;\n    } else {\n      this.set(port.toString(), \"PORT\");\n    }\n  }\n\n  /**\n   * Get the port that has been set in this URL.\n   */\n  public getPort(): string | undefined {\n    return this._port;\n  }\n\n  /**\n   * Set the path for this URL. If the provided path contains a query, then it will be added to\n   * this URL as well.\n   */\n  public setPath(path: string | undefined): void {\n    if (!path) {\n      this._path = undefined;\n    } else {\n      if (path.indexOf(\"://\") !== -1) {\n        this.set(path, \"SCHEME\");\n      } else {\n        this.set(path, \"PATH\");\n      }\n    }\n  }\n\n  /**\n   * Append the provided path to this URL's existing path. If the provided path contains a query,\n   * then it will be added to this URL as well.\n   */\n  public appendPath(path: string | undefined): void {\n    if (path) {\n      let currentPath: string | undefined = this.getPath();\n      if (currentPath) {\n        if (!currentPath.endsWith(\"/\")) {\n          currentPath += \"/\";\n        }\n\n        if (path.startsWith(\"/\")) {\n          path = path.substring(1);\n        }\n\n        path = currentPath + path;\n      }\n      this.set(path, \"PATH\");\n    }\n  }\n\n  /**\n   * Get the path that has been set in this URL.\n   */\n  public getPath(): string | undefined {\n    return this._path;\n  }\n\n  /**\n   * Set the query in this URL.\n   */\n  public setQuery(query: string | undefined): void {\n    if (!query) {\n      this._query = undefined;\n    } else {\n      this._query = URLQuery.parse(query);\n    }\n  }\n\n  /**\n   * Set a query parameter with the provided name and value in this URL's query. If the provided\n   * query parameter value is undefined or empty, then the query parameter will be removed if it\n   * existed.\n   */\n  public setQueryParameter(queryParameterName: string, queryParameterValue: any): void {\n    if (queryParameterName) {\n      if (!this._query) {\n        this._query = new URLQuery();\n      }\n      this._query.set(queryParameterName, queryParameterValue);\n    }\n  }\n\n  /**\n   * Get the value of the query parameter with the provided query parameter name. If no query\n   * parameter exists with the provided name, then undefined will be returned.\n   */\n  public getQueryParameterValue(queryParameterName: string): string | string[] | undefined {\n    return this._query ? this._query.get(queryParameterName) : undefined;\n  }\n\n  /**\n   * Get the query in this URL.\n   */\n  public getQuery(): string | undefined {\n    return this._query ? this._query.toString() : undefined;\n  }\n\n  /**\n   * Set the parts of this URL by parsing the provided text using the provided startState.\n   */\n  private set(text: string, startState: URLTokenizerState): void {\n    const tokenizer = new URLTokenizer(text, startState);\n\n    while (tokenizer.next()) {\n      const token: URLToken | undefined = tokenizer.current();\n      if (token) {\n        switch (token.type) {\n        case \"SCHEME\":\n          this._scheme = token.text || undefined;\n          break;\n\n        case \"HOST\":\n          this._host = token.text || undefined;\n          break;\n\n        case \"PORT\":\n          this._port = token.text || undefined;\n          break;\n\n        case \"PATH\":\n          const tokenPath: string | undefined = token.text || undefined;\n          if (!this._path || this._path === \"/\" || tokenPath !== \"/\") {\n            this._path = tokenPath;\n          }\n          break;\n\n        case \"QUERY\":\n          this._query = URLQuery.parse(token.text);\n          break;\n\n        default:\n          throw new Error(`Unrecognized URLTokenType: ${token.type}`);\n        }\n      }\n    }\n  }\n\n  public toString(): string {\n    let result = \"\";\n\n    if (this._scheme) {\n      result += `${this._scheme}://`;\n    }\n\n    if (this._host) {\n      result += this._host;\n    }\n\n    if (this._port) {\n      result += `:${this._port}`;\n    }\n\n    if (this._path) {\n      if (!this._path.startsWith(\"/\")) {\n        result += \"/\";\n      }\n      result += this._path;\n    }\n\n    if (this._query && this._query.any()) {\n      result += `?${this._query.toString()}`;\n    }\n\n    return result;\n  }\n\n  /**\n   * If the provided searchValue is found in this URLBuilder, then replace it with the provided\n   * replaceValue.\n   */\n  public replaceAll(searchValue: string, replaceValue: string): void {\n    if (searchValue) {\n      this.setScheme(replaceAll(this.getScheme(), searchValue, replaceValue));\n      this.setHost(replaceAll(this.getHost(), searchValue, replaceValue));\n      this.setPort(replaceAll(this.getPort(), searchValue, replaceValue));\n      this.setPath(replaceAll(this.getPath(), searchValue, replaceValue));\n      this.setQuery(replaceAll(this.getQuery(), searchValue, replaceValue));\n    }\n  }\n\n  public static parse(text: string): URLBuilder {\n    const result = new URLBuilder();\n    result.set(text, \"SCHEME_OR_HOST\");\n    return result;\n  }\n}\n\ntype URLTokenizerState = \"SCHEME\" | \"SCHEME_OR_HOST\" | \"HOST\" | \"PORT\" | \"PATH\" | \"QUERY\" | \"DONE\";\n\ntype URLTokenType = \"SCHEME\" | \"HOST\" | \"PORT\" | \"PATH\" | \"QUERY\";\n\nexport class URLToken {\n  public constructor(public readonly text: string, public readonly type: URLTokenType) {\n  }\n\n  public static scheme(text: string): URLToken {\n    return new URLToken(text, \"SCHEME\");\n  }\n\n  public static host(text: string): URLToken {\n    return new URLToken(text, \"HOST\");\n  }\n\n  public static port(text: string): URLToken {\n    return new URLToken(text, \"PORT\");\n  }\n\n  public static path(text: string): URLToken {\n    return new URLToken(text, \"PATH\");\n  }\n\n  public static query(text: string): URLToken {\n    return new URLToken(text, \"QUERY\");\n  }\n}\n\n/**\n * Get whether or not the provided character (single character string) is an alphanumeric (letter or\n * digit) character.\n */\nexport function isAlphaNumericCharacter(character: string): boolean {\n  const characterCode: number = character.charCodeAt(0);\n  return (48 /* '0' */ <= characterCode && characterCode <= 57 /* '9' */) ||\n    (65 /* 'A' */ <= characterCode && characterCode <= 90 /* 'Z' */) ||\n    (97 /* 'a' */ <= characterCode && characterCode <= 122 /* 'z' */);\n}\n\n/**\n * A class that tokenizes URL strings.\n */\nexport class URLTokenizer {\n  readonly _textLength: number;\n  _currentState: URLTokenizerState;\n  _currentIndex: number;\n  _currentToken: URLToken | undefined;\n\n  public constructor(readonly _text: string, state?: URLTokenizerState) {\n    this._textLength = _text ? _text.length : 0;\n    this._currentState = state != undefined ? state : \"SCHEME_OR_HOST\";\n    this._currentIndex = 0;\n  }\n\n  /**\n   * Get the current URLToken this URLTokenizer is pointing at, or undefined if the URLTokenizer\n   * hasn't started or has finished tokenizing.\n   */\n  public current(): URLToken | undefined {\n    return this._currentToken;\n  }\n\n  /**\n   * Advance to the next URLToken and return whether or not a URLToken was found.\n   */\n  public next(): boolean {\n    if (!hasCurrentCharacter(this)) {\n      this._currentToken = undefined;\n    } else {\n      switch (this._currentState) {\n      case \"SCHEME\":\n        nextScheme(this);\n        break;\n\n      case \"SCHEME_OR_HOST\":\n        nextSchemeOrHost(this);\n        break;\n\n      case \"HOST\":\n        nextHost(this);\n        break;\n\n      case \"PORT\":\n        nextPort(this);\n        break;\n\n      case \"PATH\":\n        nextPath(this);\n        break;\n\n      case \"QUERY\":\n        nextQuery(this);\n        break;\n\n      default:\n        throw new Error(`Unrecognized URLTokenizerState: ${this._currentState}`);\n      }\n    }\n    return !!this._currentToken;\n  }\n}\n\n\n/**\n * Read the remaining characters from this Tokenizer's character stream.\n */\nfunction readRemaining(tokenizer: URLTokenizer): string {\n  let result = \"\";\n  if (tokenizer._currentIndex < tokenizer._textLength) {\n    result = tokenizer._text.substring(tokenizer._currentIndex);\n    tokenizer._currentIndex = tokenizer._textLength;\n  }\n  return result;\n}\n\n/**\n * Whether or not this URLTokenizer has a current character.\n */\nfunction hasCurrentCharacter(tokenizer: URLTokenizer): boolean {\n  return tokenizer._currentIndex < tokenizer._textLength;\n}\n\n/**\n * Get the character in the text string at the current index.\n */\nfunction getCurrentCharacter(tokenizer: URLTokenizer): string {\n  return tokenizer._text[tokenizer._currentIndex];\n}\n\n/**\n * Advance to the character in text that is \"step\" characters ahead. If no step value is provided,\n * then step will default to 1.\n */\nfunction nextCharacter(tokenizer: URLTokenizer, step?: number): void {\n  if (hasCurrentCharacter(tokenizer)) {\n    if (!step) {\n      step = 1;\n    }\n    tokenizer._currentIndex += step;\n  }\n}\n\n/**\n * Starting with the current character, peek \"charactersToPeek\" number of characters ahead in this\n * Tokenizer's stream of characters.\n */\nfunction peekCharacters(tokenizer: URLTokenizer, charactersToPeek: number): string {\n  let endIndex: number = tokenizer._currentIndex + charactersToPeek;\n  if (tokenizer._textLength < endIndex) {\n    endIndex = tokenizer._textLength;\n  }\n  return tokenizer._text.substring(tokenizer._currentIndex, endIndex);\n}\n\n/**\n * Read characters from this Tokenizer until the end of the stream or until the provided condition\n * is false when provided the current character.\n */\nfunction readWhile(tokenizer: URLTokenizer, condition: (character: string) => boolean): string {\n  let result = \"\";\n\n  while (hasCurrentCharacter(tokenizer)) {\n    const currentCharacter: string = getCurrentCharacter(tokenizer);\n    if (!condition(currentCharacter)) {\n      break;\n    } else {\n      result += currentCharacter;\n      nextCharacter(tokenizer);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Read characters from this Tokenizer until a non-alphanumeric character or the end of the\n * character stream is reached.\n */\nfunction readWhileLetterOrDigit(tokenizer: URLTokenizer): string {\n  return readWhile(tokenizer, (character: string) => isAlphaNumericCharacter(character));\n}\n\n/**\n * Read characters from this Tokenizer until one of the provided terminating characters is read or\n * the end of the character stream is reached.\n */\nfunction readUntilCharacter(tokenizer: URLTokenizer, ...terminatingCharacters: string[]): string {\n  return readWhile(tokenizer, (character: string) => terminatingCharacters.indexOf(character) === -1);\n}\n\nfunction nextScheme(tokenizer: URLTokenizer): void {\n  const scheme: string = readWhileLetterOrDigit(tokenizer);\n  tokenizer._currentToken = URLToken.scheme(scheme);\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else {\n    tokenizer._currentState = \"HOST\";\n  }\n}\n\nfunction nextSchemeOrHost(tokenizer: URLTokenizer): void {\n  const schemeOrHost: string = readUntilCharacter(tokenizer, \":\", \"/\", \"?\");\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentToken = URLToken.host(schemeOrHost);\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \":\") {\n    if (peekCharacters(tokenizer, 3) === \"://\") {\n      tokenizer._currentToken = URLToken.scheme(schemeOrHost);\n      tokenizer._currentState = \"HOST\";\n    } else {\n      tokenizer._currentToken = URLToken.host(schemeOrHost);\n      tokenizer._currentState = \"PORT\";\n    }\n  } else {\n    tokenizer._currentToken = URLToken.host(schemeOrHost);\n    if (getCurrentCharacter(tokenizer) === \"/\") {\n      tokenizer._currentState = \"PATH\";\n    } else {\n      tokenizer._currentState = \"QUERY\";\n    }\n  }\n}\n\nfunction nextHost(tokenizer: URLTokenizer): void {\n  if (peekCharacters(tokenizer, 3) === \"://\") {\n    nextCharacter(tokenizer, 3);\n  }\n\n  const host: string = readUntilCharacter(tokenizer, \":\", \"/\", \"?\");\n  tokenizer._currentToken = URLToken.host(host);\n\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \":\") {\n    tokenizer._currentState = \"PORT\";\n  } else if (getCurrentCharacter(tokenizer) === \"/\") {\n    tokenizer._currentState = \"PATH\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\n\nfunction nextPort(tokenizer: URLTokenizer): void {\n  if (getCurrentCharacter(tokenizer) === \":\") {\n    nextCharacter(tokenizer);\n  }\n\n  const port: string = readUntilCharacter(tokenizer, \"/\", \"?\");\n  tokenizer._currentToken = URLToken.port(port);\n\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \"/\") {\n    tokenizer._currentState = \"PATH\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\n\nfunction nextPath(tokenizer: URLTokenizer): void {\n  const path: string = readUntilCharacter(tokenizer, \"?\");\n  tokenizer._currentToken = URLToken.path(path);\n\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\n\nfunction nextQuery(tokenizer: URLTokenizer): void {\n  if (getCurrentCharacter(tokenizer) === \"?\") {\n    nextCharacter(tokenizer);\n  }\n\n  const query: string = readRemaining(tokenizer);\n  tokenizer._currentToken = URLToken.query(query);\n  tokenizer._currentState = \"DONE\";\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { URLBuilder } from \"../url\";\nimport { WebResource } from \"../webResource\";\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"./requestPolicy\";\n\nexport function redirectPolicy(maximumRetries = 20): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new RedirectPolicy(nextPolicy, options, maximumRetries);\n    }\n  };\n}\n\nexport class RedirectPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, readonly maxRetries = 20) {\n    super(nextPolicy, options);\n  }\n\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this._nextPolicy.sendRequest(request).then(response => handleRedirect(this, response, 0));\n  }\n}\n\nfunction handleRedirect(policy: RedirectPolicy, response: HttpOperationResponse, currentRetries: number): Promise<HttpOperationResponse> {\n  const { request, status } = response;\n  const locationHeader = response.headers.get(\"location\");\n  if (locationHeader &&\n    (status === 300 || status === 307 || (status === 303 && request.method === \"POST\")) &&\n    (!policy.maxRetries || currentRetries < policy.maxRetries)) {\n\n    const builder = URLBuilder.parse(request.url);\n    builder.setPath(locationHeader);\n    request.url = builder.toString();\n\n    // POST request with Status code 303 should be converted into a\n    // redirected GET request if the redirect url is present in the location header\n    if (status === 303) {\n      request.method = \"GET\";\n    }\n\n    return policy._nextPolicy.sendRequest(request)\n      .then(res => handleRedirect(policy, res, currentRetries + 1));\n  }\n\n  return Promise.resolve(response);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport * as utils from \"../util/utils\";\nimport { WebResource } from \"../webResource\";\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"./requestPolicy\";\n\nexport function rpRegistrationPolicy(retryTimeout = 30): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new RPRegistrationPolicy(nextPolicy, options, retryTimeout);\n    }\n  };\n}\n\nexport class RPRegistrationPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, readonly _retryTimeout = 30) {\n    super(nextPolicy, options);\n  }\n\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this._nextPolicy.sendRequest(request.clone())\n      .then(response => registerIfNeeded(this, request, response));\n  }\n}\n\n\nfunction registerIfNeeded(policy: RPRegistrationPolicy, request: WebResource, response: HttpOperationResponse): Promise<HttpOperationResponse> {\n  if (response.status === 409) {\n    const rpName = checkRPNotRegisteredError(response.bodyAsText as string);\n    if (rpName) {\n      const urlPrefix = extractSubscriptionUrl(request.url);\n      return registerRP(policy, urlPrefix, rpName, request)\n        // Autoregistration of ${provider} failed for some reason. We will not return this error\n        // instead will return the initial response with 409 status code back to the user.\n        // do nothing here as we are returning the original response at the end of this method.\n        .catch(() => false)\n        .then(registrationStatus => {\n          if (registrationStatus) {\n            // Retry the original request. We have to change the x-ms-client-request-id\n            // otherwise Azure endpoint will return the initial 409 (cached) response.\n            request.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n            return policy._nextPolicy.sendRequest(request.clone());\n          }\n          return response;\n        });\n    }\n  }\n\n  return Promise.resolve(response);\n}\n\n/**\n * Reuses the headers of the original request and url (if specified).\n * @param {WebResource} originalRequest The original request\n * @param {boolean} reuseUrlToo Should the url from the original request be reused as well. Default false.\n * @returns {object} A new request object with desired headers.\n */\nfunction getRequestEssentials(originalRequest: WebResource, reuseUrlToo = false): WebResource {\n  const reqOptions: WebResource = originalRequest.clone();\n  if (reuseUrlToo) {\n    reqOptions.url = originalRequest.url;\n  }\n\n  // We have to change the x-ms-client-request-id otherwise Azure endpoint\n  // will return the initial 409 (cached) response.\n  reqOptions.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n\n  // Set content-type to application/json\n  reqOptions.headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n\n  return reqOptions;\n}\n\n/**\n * Validates the error code and message associated with 409 response status code. If it matches to that of\n * RP not registered then it returns the name of the RP else returns undefined.\n * @param {string} body The response body received after making the original request.\n * @returns {string} The name of the RP if condition is satisfied else undefined.\n */\nfunction checkRPNotRegisteredError(body: string): string {\n  let result, responseBody;\n  if (body) {\n    try {\n      responseBody = JSON.parse(body);\n    } catch (err) {\n      // do nothing;\n    }\n    if (responseBody && responseBody.error && responseBody.error.message &&\n      responseBody.error.code && responseBody.error.code === \"MissingSubscriptionRegistration\") {\n      const matchRes = responseBody.error.message.match(/.*'(.*)'/i);\n      if (matchRes) {\n        result = matchRes.pop();\n      }\n    }\n  }\n  return result;\n}\n\n/**\n * Extracts the first part of the URL, just after subscription:\n * https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param {string} url The original request url\n * @returns {string} The url prefix as explained above.\n */\nfunction extractSubscriptionUrl(url: string): string {\n  let result;\n  const matchRes = url.match(/.*\\/subscriptions\\/[a-f0-9-]+\\//ig);\n  if (matchRes && matchRes[0]) {\n    result = matchRes[0];\n  } else {\n    throw new Error(`Unable to extract subscriptionId from the given url - ${url}.`);\n  }\n  return result;\n}\n\n/**\n * Registers the given provider.\n * @param {RPRegistrationPolicy} policy The RPRegistrationPolicy this function is being called against.\n * @param {string} urlPrefix https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param {string} provider The provider name to be registered.\n * @param {WebResource} originalRequest The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n * @param {registrationCallback} callback The callback that handles the RP registration\n */\nfunction registerRP(policy: RPRegistrationPolicy, urlPrefix: string, provider: string, originalRequest: WebResource): Promise<boolean> {\n  const postUrl = `${urlPrefix}providers/${provider}/register?api-version=2016-02-01`;\n  const getUrl = `${urlPrefix}providers/${provider}?api-version=2016-02-01`;\n  const reqOptions = getRequestEssentials(originalRequest);\n  reqOptions.method = \"POST\";\n  reqOptions.url = postUrl;\n\n  return policy._nextPolicy.sendRequest(reqOptions)\n    .then(response => {\n      if (response.status !== 200) {\n        throw new Error(`Autoregistration of ${provider} failed. Please try registering manually.`);\n      }\n      return getRegistrationStatus(policy, getUrl, originalRequest);\n    });\n}\n\n/**\n * Polls the registration status of the provider that was registered. Polling happens at an interval of 30 seconds.\n * Polling will happen till the registrationState property of the response body is \"Registered\".\n * @param {RPRegistrationPolicy} policy The RPRegistrationPolicy this function is being called against.\n * @param {string} url The request url for polling\n * @param {WebResource} originalRequest The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n * @returns {Promise<boolean>} True if RP Registration is successful.\n */\nfunction getRegistrationStatus(policy: RPRegistrationPolicy, url: string, originalRequest: WebResource): Promise<boolean> {\n  const reqOptions: any = getRequestEssentials(originalRequest);\n  reqOptions.url = url;\n  reqOptions.method = \"GET\";\n\n  return policy._nextPolicy.sendRequest(reqOptions).then(res => {\n    const obj = (res.parsedBody as any);\n    if (res.parsedBody && obj.registrationState && obj.registrationState === \"Registered\") {\n      return true;\n    } else {\n      return utils.delay(policy._retryTimeout * 1000).then(() => getRegistrationStatus(policy, url, originalRequest));\n    }\n  });\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { ServiceClientCredentials } from \"../credentials/serviceClientCredentials\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResource } from \"../webResource\";\nimport { BaseRequestPolicy, RequestPolicyFactory, RequestPolicy, RequestPolicyOptions } from \"./requestPolicy\";\n\nexport function signingPolicy(authenticationProvider: ServiceClientCredentials): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new SigningPolicy(nextPolicy, options, authenticationProvider);\n    }\n  };\n}\n\nexport class SigningPolicy extends BaseRequestPolicy {\n\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, public authenticationProvider: ServiceClientCredentials) {\n    super(nextPolicy, options);\n  }\n\n  signRequest(request: WebResource): Promise<WebResource> {\n    return this.authenticationProvider.signRequest(request);\n  }\n\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this.signRequest(request).then(nextRequest => this._nextPolicy.sendRequest(nextRequest));\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { TokenCredential, AccessToken, GetTokenOptions } from \"../credentials/tokenCredential\";\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyOptions, RequestPolicyFactory } from \"../policies/requestPolicy\";\nimport { Constants } from \"../util/constants\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { HttpHeaders, } from \"../httpHeaders\";\nimport { WebResource } from \"../webResource\";\n\nexport const TokenRefreshBufferMs = 2 * 60 * 1000; // 2 Minutes\n\n/**\n * Creates a new BearerTokenAuthenticationPolicy factory.\n *\n * @param credential The TokenCredential implementation that can supply the bearer token.\n * @param scopes The scopes for which the bearer token applies.\n */\nexport function bearerTokenAuthenticationPolicy(credential: TokenCredential, scopes: string | string[]): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new BearerTokenAuthenticationPolicy(nextPolicy, options, credential, scopes);\n    }\n  };\n}\n\n/**\n *\n * Provides a RequestPolicy that can request a token from a TokenCredential\n * implementation and then apply it to the Authorization header of a request\n * as a Bearer token.\n *\n */\nexport class BearerTokenAuthenticationPolicy extends BaseRequestPolicy {\n  private cachedToken: AccessToken | undefined = undefined;\n\n  /**\n   * Creates a new BearerTokenAuthenticationPolicy object.\n   *\n   * @param nextPolicy The next RequestPolicy in the request pipeline.\n   * @param options Options for this RequestPolicy.\n   * @param credential The TokenCredential implementation that can supply the bearer token.\n   * @param scopes The scopes for which the bearer token applies.\n   */\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    private credential: TokenCredential,\n    private scopes: string | string[],\n  ) {\n    super(nextPolicy, options);\n  }\n\n  /**\n   * Applies the Bearer token to the request through the Authorization header.\n   * @param webResource\n   */\n  public async sendRequest(\n    webResource: WebResource\n  ): Promise<HttpOperationResponse> {\n    if (!webResource.headers) webResource.headers = new HttpHeaders();\n    const token = await this.getToken({\n      abortSignal: webResource.abortSignal\n    });\n    webResource.headers.set(\n      Constants.HeaderConstants.AUTHORIZATION,\n      `Bearer ${token}`\n    );\n    return this._nextPolicy.sendRequest(webResource);\n  }\n\n  private async getToken(options: GetTokenOptions): Promise<string | undefined> {\n    if (\n      this.cachedToken &&\n      Date.now() + TokenRefreshBufferMs < this.cachedToken.expiresOnTimestamp\n    ) {\n      return this.cachedToken.token;\n    }\n\n    this.cachedToken = (await this.credential.getToken(this.scopes, options)) || undefined;\n    return this.cachedToken ? this.cachedToken.token : undefined;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport * as utils from \"../util/utils\";\nimport { WebResource } from \"../webResource\";\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"./requestPolicy\";\n\nexport interface RetryData {\n  retryCount: number;\n  retryInterval: number;\n  error?: RetryError;\n}\n\nexport interface RetryError extends Error {\n  message: string;\n  code?: string;\n  innerError?: RetryError;\n}\n\nexport function systemErrorRetryPolicy(retryCount?: number, retryInterval?: number, minRetryInterval?: number, maxRetryInterval?: number): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new SystemErrorRetryPolicy(nextPolicy, options, retryCount, retryInterval, minRetryInterval, maxRetryInterval);\n    }\n  };\n}\n\n/**\n * @class\n * Instantiates a new \"ExponentialRetryPolicyFilter\" instance.\n *\n * @constructor\n * @param {number} retryCount        The client retry count.\n * @param {number} retryInterval     The client retry interval, in milliseconds.\n * @param {number} minRetryInterval  The minimum retry interval, in milliseconds.\n * @param {number} maxRetryInterval  The maximum retry interval, in milliseconds.\n */\nexport class SystemErrorRetryPolicy extends BaseRequestPolicy {\n  retryCount: number;\n  retryInterval: number;\n  minRetryInterval: number;\n  maxRetryInterval: number;\n  DEFAULT_CLIENT_RETRY_INTERVAL = 1000 * 30;\n  DEFAULT_CLIENT_RETRY_COUNT = 3;\n  DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 90;\n  DEFAULT_CLIENT_MIN_RETRY_INTERVAL = 1000 * 3;\n\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, retryCount?: number, retryInterval?: number, minRetryInterval?: number, maxRetryInterval?: number) {\n    super(nextPolicy, options);\n    this.retryCount = typeof retryCount === \"number\" ? retryCount : this.DEFAULT_CLIENT_RETRY_COUNT;\n    this.retryInterval = typeof retryInterval === \"number\" ? retryInterval : this.DEFAULT_CLIENT_RETRY_INTERVAL;\n    this.minRetryInterval = typeof minRetryInterval === \"number\" ? minRetryInterval : this.DEFAULT_CLIENT_MIN_RETRY_INTERVAL;\n    this.maxRetryInterval = typeof maxRetryInterval === \"number\" ? maxRetryInterval : this.DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n  }\n\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this._nextPolicy.sendRequest(request.clone()).then(response => retry(this, request, response));\n  }\n}\n\n/**\n * Determines if the operation should be retried and how long to wait until the next retry.\n *\n * @param {number} statusCode The HTTP status code.\n * @param {RetryData} retryData  The retry data.\n * @return {boolean} True if the operation qualifies for a retry; false otherwise.\n */\nfunction shouldRetry(policy: SystemErrorRetryPolicy, retryData: RetryData): boolean {\n  let currentCount;\n  if (!retryData) {\n    throw new Error(\"retryData for the SystemErrorRetryPolicyFilter cannot be null.\");\n  } else {\n    currentCount = (retryData && retryData.retryCount);\n  }\n  return (currentCount < policy.retryCount);\n}\n\n/**\n * Updates the retry data for the next attempt.\n *\n * @param {RetryData} retryData  The retry data.\n * @param {object} err        The operation\"s error, if any.\n */\nfunction updateRetryData(policy: SystemErrorRetryPolicy, retryData?: RetryData, err?: RetryError): RetryData {\n  if (!retryData) {\n    retryData = {\n      retryCount: 0,\n      retryInterval: 0\n    };\n  }\n\n  if (err) {\n    if (retryData.error) {\n      err.innerError = retryData.error;\n    }\n\n    retryData.error = err;\n  }\n\n  // Adjust retry count\n  retryData.retryCount++;\n\n  // Adjust retry interval\n  let incrementDelta = Math.pow(2, retryData.retryCount) - 1;\n  const boundedRandDelta = policy.retryInterval * 0.8 +\n    Math.floor(Math.random() * (policy.retryInterval * 1.2 - policy.retryInterval * 0.8));\n  incrementDelta *= boundedRandDelta;\n\n  retryData.retryInterval = Math.min(policy.minRetryInterval + incrementDelta, policy.maxRetryInterval);\n\n  return retryData;\n}\n\nfunction retry(policy: SystemErrorRetryPolicy, request: WebResource, operationResponse: HttpOperationResponse, retryData?: RetryData, err?: RetryError): Promise<HttpOperationResponse> {\n  retryData = updateRetryData(policy, retryData, err);\n  if (err && err.code && shouldRetry(policy, retryData) &&\n    (err.code === \"ETIMEDOUT\" || err.code === \"ESOCKETTIMEDOUT\" || err.code === \"ECONNREFUSED\" ||\n      err.code === \"ECONNRESET\" || err.code === \"ENOENT\")) {\n    // If previous operation ended with an error and the policy allows a retry, do that\n    return utils.delay(retryData.retryInterval)\n      .then(() => policy._nextPolicy.sendRequest(request.clone()))\n      .then(res => retry(policy, request, res, retryData, err))\n      .catch(err => retry(policy, request, operationResponse, retryData, err));\n  } else {\n    if (err != undefined) {\n      // If the operation failed in the end, return all errors instead of just the last one\n      err = retryData.error;\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationResponse);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * The format that will be used to join an array of values together for a query parameter value.\n */\nexport enum QueryCollectionFormat {\n  Csv = \",\",\n  Ssv = \" \",\n  Tsv = \"\\t\",\n  Pipes = \"|\",\n  Multi = \"Multi\",\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { ProxySettings } from \"../serviceClient\";\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"./requestPolicy\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResource } from \"../webResource\";\n\nconst proxyNotSupportedInBrowser = new Error(\"ProxyPolicy is not supported in browser environment\");\n\nexport function getDefaultProxySettings(_proxyUrl?: string): ProxySettings | undefined {\n  return undefined;\n}\n\nexport function proxyPolicy(_proxySettings?: ProxySettings): RequestPolicyFactory {\n  return {\n    create: (_nextPolicy: RequestPolicy, _options: RequestPolicyOptions) => {\n      throw proxyNotSupportedInBrowser;\n    }\n  };\n}\n\nexport class ProxyPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n    super(nextPolicy, options);\n    throw proxyNotSupportedInBrowser;\n  }\n\n  public sendRequest(_request: WebResource): Promise<HttpOperationResponse> {\n    throw proxyNotSupportedInBrowser;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyOptions, RequestPolicyFactory } from \"./requestPolicy\";\nimport { WebResource } from \"../webResource\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { Constants } from \"../util/constants\";\nimport { delay } from \"../util/utils\";\n\ntype ResponseHandler = (httpRequest: WebResource, response: HttpOperationResponse) => Promise<HttpOperationResponse>;\nconst StatusCodes = Constants.HttpConstants.StatusCodes;\n\nexport function throttlingRetryPolicy(): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new ThrottlingRetryPolicy(nextPolicy, options);\n    }\n  };\n}\n\n/**\n * To learn more, please refer to\n * https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-request-limits,\n * https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits and\n * https://docs.microsoft.com/en-us/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors\n */\nexport class ThrottlingRetryPolicy extends BaseRequestPolicy {\n  private _handleResponse: ResponseHandler;\n\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, _handleResponse?: ResponseHandler) {\n    super(nextPolicy, options);\n    this._handleResponse = _handleResponse || this._defaultResponseHandler;\n  }\n\n  public async sendRequest(httpRequest: WebResource): Promise<HttpOperationResponse> {\n    return this._nextPolicy.sendRequest(httpRequest.clone()).then(response => {\n      if (response.status !== StatusCodes.TooManyRequests) {\n        return response;\n      } else {\n        return this._handleResponse(httpRequest, response);\n      }\n    });\n  }\n\n  private async _defaultResponseHandler(httpRequest: WebResource, httpResponse: HttpOperationResponse): Promise<HttpOperationResponse> {\n    const retryAfterHeader: string | undefined = httpResponse.headers.get(Constants.HeaderConstants.RETRY_AFTER);\n\n    if (retryAfterHeader) {\n      const delayInMs: number | undefined = ThrottlingRetryPolicy.parseRetryAfterHeader(retryAfterHeader);\n      if (delayInMs) {\n        return delay(delayInMs).then((_: any) => this._nextPolicy.sendRequest(httpRequest));\n      }\n    }\n\n    return httpResponse;\n  }\n\n  public static parseRetryAfterHeader(headerValue: string): number | undefined {\n    const retryAfterInSeconds = Number(headerValue);\n    if (Number.isNaN(retryAfterInSeconds)) {\n      return ThrottlingRetryPolicy.parseDateRetryAfterHeader(headerValue);\n    } else {\n      return retryAfterInSeconds * 1000;\n    }\n  }\n\n  public static parseDateRetryAfterHeader(headerValue: string): number | undefined {\n    try {\n      const now: number = Date.now();\n      const date: number = Date.parse(headerValue);\n      const diff = date - now;\n\n      return Number.isNaN(diff) ? undefined : diff;\n    } catch (error) {\n      return undefined;\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { ServiceClientCredentials } from \"./credentials/serviceClientCredentials\";\nimport { TokenCredential, isTokenCredential } from \"./credentials/tokenCredential\";\nimport { DefaultHttpClient } from \"./defaultHttpClient\";\nimport { HttpClient } from \"./httpClient\";\nimport { HttpOperationResponse, RestResponse } from \"./httpOperationResponse\";\nimport { HttpPipelineLogger } from \"./httpPipelineLogger\";\nimport { OperationArguments } from \"./operationArguments\";\nimport { getPathStringFromParameter, getPathStringFromParameterPath, OperationParameter, ParameterPath } from \"./operationParameter\";\nimport { isStreamOperation, OperationSpec } from \"./operationSpec\";\nimport { deserializationPolicy, DeserializationContentTypes } from \"./policies/deserializationPolicy\";\nimport { exponentialRetryPolicy } from \"./policies/exponentialRetryPolicy\";\nimport { generateClientRequestIdPolicy } from \"./policies/generateClientRequestIdPolicy\";\nimport { userAgentPolicy, getDefaultUserAgentHeaderName, getDefaultUserAgentValue } from \"./policies/userAgentPolicy\";\nimport { redirectPolicy } from \"./policies/redirectPolicy\";\nimport { RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"./policies/requestPolicy\";\nimport { rpRegistrationPolicy } from \"./policies/rpRegistrationPolicy\";\nimport { signingPolicy } from \"./policies/signingPolicy\";\nimport { bearerTokenAuthenticationPolicy } from \"./policies/bearerTokenAuthenticationPolicy\";\nimport { systemErrorRetryPolicy } from \"./policies/systemErrorRetryPolicy\";\nimport { QueryCollectionFormat } from \"./queryCollectionFormat\";\nimport { CompositeMapper, DictionaryMapper, Mapper, MapperType, Serializer } from \"./serializer\";\nimport { URLBuilder } from \"./url\";\nimport * as utils from \"./util/utils\";\nimport { stringifyXML } from \"./util/xml\";\nimport { RequestOptionsBase, RequestPrepareOptions, WebResource } from \"./webResource\";\nimport { OperationResponse } from \"./operationResponse\";\nimport { ServiceCallback } from \"./util/utils\";\nimport { proxyPolicy, getDefaultProxySettings } from \"./policies/proxyPolicy\";\nimport { throttlingRetryPolicy } from \"./policies/throttlingRetryPolicy\";\n\n\n/**\n * HTTP proxy settings (Node.js only)\n */\nexport interface ProxySettings {\n  host: string;\n  port: number;\n  username?: string;\n  password?: string;\n}\n\n/**\n * Options to be provided while creating the client.\n */\nexport interface ServiceClientOptions {\n  /**\n   * An array of factories which get called to create the RequestPolicy pipeline used to send a HTTP\n   * request on the wire, or a function that takes in the defaultRequestPolicyFactories and returns\n   * the requestPolicyFactories that will be used.\n   */\n  requestPolicyFactories?: RequestPolicyFactory[] | ((defaultRequestPolicyFactories: RequestPolicyFactory[]) => (void | RequestPolicyFactory[]));\n  /**\n   * The HttpClient that will be used to send HTTP requests.\n   */\n  httpClient?: HttpClient;\n  /**\n   * The HttpPipelineLogger that can be used to debug RequestPolicies within the HTTP pipeline.\n   */\n  httpPipelineLogger?: HttpPipelineLogger;\n  /**\n   * If set to true, turn off the default retry policy.\n   */\n  noRetryPolicy?: boolean;\n  /**\n   * Gets or sets the retry timeout in seconds for AutomaticRPRegistration. Default value is 30.\n   */\n  rpRegistrationRetryTimeout?: number;\n  /**\n   * Whether or not to generate a client request ID header for each HTTP request.\n   */\n  generateClientRequestIdHeader?: boolean;\n  /**\n   * Whether to include credentials in CORS requests in the browser.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials for more information.\n   */\n  withCredentials?: boolean;\n  /**\n   * If specified, a GenerateRequestIdPolicy will be added to the HTTP pipeline that will add a\n   * header to all outgoing requests with this header name and a random UUID as the request ID.\n   */\n  clientRequestIdHeaderName?: string;\n  /**\n   * The content-types that will be associated with JSON or XML serialization.\n   */\n  deserializationContentTypes?: DeserializationContentTypes;\n  /**\n   * The header name to use for the telemetry header while sending the request. If this is not\n   * specified, then \"User-Agent\" will be used when running on Node.js and \"x-ms-command-name\" will\n   * be used when running in a browser.\n   */\n  userAgentHeaderName?: string | ((defaultUserAgentHeaderName: string) => string);\n  /**\n   * The string to be set to the telemetry header while sending the request, or a function that\n   * takes in the default user-agent string and returns the user-agent string that will be used.\n   */\n  userAgent?: string | ((defaultUserAgent: string) => string);\n  /**\n   * Proxy settings which will be used for every HTTP request (Node.js only).\n   */\n  proxySettings?: ProxySettings;\n}\n\n/**\n * @class\n * Initializes a new instance of the ServiceClient.\n */\nexport class ServiceClient {\n  /**\n   * If specified, this is the base URI that requests will be made against for this ServiceClient.\n   * If it is not specified, then all OperationSpecs must contain a baseUrl property.\n   */\n  protected baseUri?: string;\n\n  /**\n   * The default request content type for the service.\n   * Used if no requestContentType is present on an OperationSpec.\n   */\n  protected requestContentType?: string;\n\n\n  /**\n   * The HTTP client that will be used to send requests.\n   */\n  private readonly _httpClient: HttpClient;\n  private readonly _requestPolicyOptions: RequestPolicyOptions;\n\n  private readonly _requestPolicyFactories: RequestPolicyFactory[];\n  private readonly _withCredentials: boolean;\n\n  /**\n   * The ServiceClient constructor\n   * @constructor\n   * @param {ServiceClientCredentials} [credentials] The credentials object used for authentication.\n   * @param {ServiceClientOptions} [options] The service client options that govern the behavior of the client.\n   */\n  constructor(credentials?: ServiceClientCredentials | TokenCredential, options?: ServiceClientOptions) {\n    if (!options) {\n      options = {};\n    }\n\n    if (credentials && !isTokenCredential(credentials) && !credentials.signRequest) {\n      throw new Error(\"credentials argument needs to implement signRequest method\");\n    }\n\n    this._withCredentials = options.withCredentials || false;\n    this._httpClient = options.httpClient || new DefaultHttpClient();\n    this._requestPolicyOptions = new RequestPolicyOptions(options.httpPipelineLogger);\n\n    let requestPolicyFactories: RequestPolicyFactory[];\n    if (Array.isArray(options.requestPolicyFactories)) {\n      requestPolicyFactories = options.requestPolicyFactories;\n    } else {\n      requestPolicyFactories = createDefaultRequestPolicyFactories(credentials, options);\n      if (options.requestPolicyFactories) {\n        const newRequestPolicyFactories: void | RequestPolicyFactory[] = options.requestPolicyFactories(requestPolicyFactories);\n        if (newRequestPolicyFactories) {\n          requestPolicyFactories = newRequestPolicyFactories;\n        }\n      }\n    }\n    this._requestPolicyFactories = requestPolicyFactories;\n  }\n\n  /**\n   * Send the provided httpRequest.\n   */\n  sendRequest(options: RequestPrepareOptions | WebResource): Promise<HttpOperationResponse> {\n    if (options === null || options === undefined || typeof options !== \"object\") {\n      throw new Error(\"options cannot be null or undefined and it must be of type object.\");\n    }\n\n    let httpRequest: WebResource;\n    try {\n      if (options instanceof WebResource) {\n        options.validateRequestProperties();\n        httpRequest = options;\n      } else {\n        httpRequest = new WebResource();\n        httpRequest = httpRequest.prepare(options);\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    let httpPipeline: RequestPolicy = this._httpClient;\n    if (this._requestPolicyFactories && this._requestPolicyFactories.length > 0) {\n      for (let i = this._requestPolicyFactories.length - 1; i >= 0; --i) {\n        httpPipeline = this._requestPolicyFactories[i].create(httpPipeline, this._requestPolicyOptions);\n      }\n    }\n    return httpPipeline.sendRequest(httpRequest);\n  }\n\n  /**\n   * Send an HTTP request that is populated using the provided OperationSpec.\n   * @param {OperationArguments} operationArguments The arguments that the HTTP request's templated values will be populated from.\n   * @param {OperationSpec} operationSpec The OperationSpec to use to populate the httpRequest.\n   * @param {ServiceCallback} callback The callback to call when the response is received.\n   */\n  sendOperationRequest(operationArguments: OperationArguments, operationSpec: OperationSpec, callback?: ServiceCallback<any>): Promise<RestResponse> {\n    if (typeof operationArguments.options === \"function\") {\n      callback = operationArguments.options;\n      operationArguments.options = undefined;\n    }\n\n    const httpRequest = new WebResource();\n\n    let result: Promise<RestResponse>;\n    try {\n      const baseUri: string | undefined = operationSpec.baseUrl || this.baseUri;\n      if (!baseUri) {\n        throw new Error(\"If operationSpec.baseUrl is not specified, then the ServiceClient must have a baseUri string property that contains the base URL to use.\");\n      }\n\n      httpRequest.method = operationSpec.httpMethod;\n      httpRequest.operationSpec = operationSpec;\n\n      const requestUrl: URLBuilder = URLBuilder.parse(baseUri);\n      if (operationSpec.path) {\n        requestUrl.appendPath(operationSpec.path);\n      }\n      if (operationSpec.urlParameters && operationSpec.urlParameters.length > 0) {\n        for (const urlParameter of operationSpec.urlParameters) {\n          let urlParameterValue: string = getOperationArgumentValueFromParameter(this, operationArguments, urlParameter, operationSpec.serializer);\n          urlParameterValue = operationSpec.serializer.serialize(urlParameter.mapper, urlParameterValue, getPathStringFromParameter(urlParameter));\n          if (!urlParameter.skipEncoding) {\n            urlParameterValue = encodeURIComponent(urlParameterValue);\n          }\n          requestUrl.replaceAll(`{${urlParameter.mapper.serializedName || getPathStringFromParameter(urlParameter)}}`, urlParameterValue);\n        }\n      }\n      if (operationSpec.queryParameters && operationSpec.queryParameters.length > 0) {\n        for (const queryParameter of operationSpec.queryParameters) {\n          let queryParameterValue: any = getOperationArgumentValueFromParameter(this, operationArguments, queryParameter, operationSpec.serializer);\n          if (queryParameterValue != undefined) {\n            queryParameterValue = operationSpec.serializer.serialize(queryParameter.mapper, queryParameterValue, getPathStringFromParameter(queryParameter));\n            if (queryParameter.collectionFormat != undefined) {\n              if (queryParameter.collectionFormat === QueryCollectionFormat.Multi) {\n                if (queryParameterValue.length === 0) {\n                  queryParameterValue = \"\";\n                } else {\n                  for (const index in queryParameterValue) {\n                    const item = queryParameterValue[index];\n                    queryParameterValue[index] = item == undefined ? \"\" : item.toString();\n                  }\n                }\n              } else {\n                queryParameterValue = queryParameterValue.join(queryParameter.collectionFormat);\n              }\n            }\n            if (!queryParameter.skipEncoding) {\n              if (Array.isArray(queryParameterValue)) {\n                for (const index in queryParameterValue) {\n                  queryParameterValue[index] = encodeURIComponent(queryParameterValue[index]);\n                }\n              }\n              else {\n                queryParameterValue = encodeURIComponent(queryParameterValue);\n              }\n            }\n            requestUrl.setQueryParameter(queryParameter.mapper.serializedName || getPathStringFromParameter(queryParameter), queryParameterValue);\n          }\n        }\n      }\n      httpRequest.url = requestUrl.toString();\n\n      const contentType = operationSpec.contentType || this.requestContentType;\n      if (contentType) {\n        httpRequest.headers.set(\"Content-Type\", contentType);\n      }\n\n      if (operationSpec.headerParameters) {\n        for (const headerParameter of operationSpec.headerParameters) {\n          let headerValue: any = getOperationArgumentValueFromParameter(this, operationArguments, headerParameter, operationSpec.serializer);\n          if (headerValue != undefined) {\n            headerValue = operationSpec.serializer.serialize(headerParameter.mapper, headerValue, getPathStringFromParameter(headerParameter));\n            const headerCollectionPrefix = (headerParameter.mapper as DictionaryMapper).headerCollectionPrefix;\n            if (headerCollectionPrefix) {\n              for (const key of Object.keys(headerValue)) {\n                httpRequest.headers.set(headerCollectionPrefix + key, headerValue[key]);\n              }\n            } else {\n              httpRequest.headers.set(headerParameter.mapper.serializedName || getPathStringFromParameter(headerParameter), headerValue);\n            }\n          }\n        }\n      }\n\n      const options: RequestOptionsBase | undefined = operationArguments.options;\n      if (options) {\n        if (options.customHeaders) {\n          for (const customHeaderName in options.customHeaders) {\n            httpRequest.headers.set(customHeaderName, options.customHeaders[customHeaderName]);\n          }\n        }\n\n        if (options.abortSignal) {\n          httpRequest.abortSignal = options.abortSignal;\n        }\n\n        if (options.timeout) {\n          httpRequest.timeout = options.timeout;\n        }\n\n        if (options.onUploadProgress) {\n          httpRequest.onUploadProgress = options.onUploadProgress;\n        }\n\n        if (options.onDownloadProgress) {\n          httpRequest.onDownloadProgress = options.onDownloadProgress;\n        }\n      }\n\n      httpRequest.withCredentials = this._withCredentials;\n\n      serializeRequestBody(this, httpRequest, operationArguments, operationSpec);\n\n      if (httpRequest.streamResponseBody == undefined) {\n        httpRequest.streamResponseBody = isStreamOperation(operationSpec);\n      }\n\n      result = this.sendRequest(httpRequest)\n        .then(res => flattenResponse(res, operationSpec.responses[res.status]));\n    } catch (error) {\n      result = Promise.reject(error);\n    }\n\n    const cb = callback;\n    if (cb) {\n      result\n        // tslint:disable-next-line:no-null-keyword\n        .then(res => cb(null, res._response.parsedBody, res._response.request, res._response))\n        .catch(err => cb(err));\n    }\n\n    return result;\n  }\n}\n\nexport function serializeRequestBody(serviceClient: ServiceClient, httpRequest: WebResource, operationArguments: OperationArguments, operationSpec: OperationSpec): void {\n  if (operationSpec.requestBody && operationSpec.requestBody.mapper) {\n    httpRequest.body = getOperationArgumentValueFromParameter(serviceClient, operationArguments, operationSpec.requestBody, operationSpec.serializer);\n\n    const bodyMapper = operationSpec.requestBody.mapper;\n    const { required, xmlName, xmlElementName, serializedName } = bodyMapper;\n    const typeName = bodyMapper.type.name;\n    try {\n      if (httpRequest.body != undefined || required) {\n        const requestBodyParameterPathString: string = getPathStringFromParameter(operationSpec.requestBody);\n        httpRequest.body = operationSpec.serializer.serialize(bodyMapper, httpRequest.body, requestBodyParameterPathString);\n        const isStream = typeName === MapperType.Stream;\n        if (operationSpec.isXML) {\n          if (typeName === MapperType.Sequence) {\n            httpRequest.body = stringifyXML(utils.prepareXMLRootList(httpRequest.body, xmlElementName || xmlName || serializedName!), { rootName: xmlName || serializedName });\n          }\n          else if (!isStream) {\n            httpRequest.body = stringifyXML(httpRequest.body, { rootName: xmlName || serializedName });\n          }\n        } else if (!isStream) {\n          httpRequest.body = JSON.stringify(httpRequest.body);\n        }\n      }\n    } catch (error) {\n      throw new Error(`Error \"${error.message}\" occurred in serializing the payload - ${JSON.stringify(serializedName, undefined, \"  \")}.`);\n    }\n  } else if (operationSpec.formDataParameters && operationSpec.formDataParameters.length > 0) {\n    httpRequest.formData = {};\n    for (const formDataParameter of operationSpec.formDataParameters) {\n      const formDataParameterValue: any = getOperationArgumentValueFromParameter(serviceClient, operationArguments, formDataParameter, operationSpec.serializer);\n      if (formDataParameterValue != undefined) {\n        const formDataParameterPropertyName: string = formDataParameter.mapper.serializedName || getPathStringFromParameter(formDataParameter);\n        httpRequest.formData[formDataParameterPropertyName] = operationSpec.serializer.serialize(formDataParameter.mapper, formDataParameterValue, getPathStringFromParameter(formDataParameter));\n      }\n    }\n  }\n}\n\nfunction isRequestPolicyFactory(instance: any): instance is RequestPolicyFactory {\n  return typeof instance.create === \"function\";\n}\n\nfunction getValueOrFunctionResult(value: undefined | string | ((defaultValue: string) => string), defaultValueCreator: (() => string)): string {\n  let result: string;\n  if (typeof value === \"string\") {\n    result = value;\n  } else {\n    result = defaultValueCreator();\n    if (typeof value === \"function\") {\n      result = value(result);\n    }\n  }\n  return result;\n}\n\nfunction createDefaultRequestPolicyFactories(credentials: ServiceClientCredentials | TokenCredential | RequestPolicyFactory | undefined, options: ServiceClientOptions): RequestPolicyFactory[] {\n  const factories: RequestPolicyFactory[] = [];\n\n  if (options.generateClientRequestIdHeader) {\n    factories.push(generateClientRequestIdPolicy(options.clientRequestIdHeaderName));\n  }\n\n  if (credentials) {\n    if (isRequestPolicyFactory(credentials)) {\n      factories.push(credentials);\n    } else if (isTokenCredential(credentials)) {\n      factories.push(bearerTokenAuthenticationPolicy(credentials, \"/.default\"));\n    } else {\n      factories.push(signingPolicy(credentials));\n    }\n  }\n\n  const userAgentHeaderName: string = getValueOrFunctionResult(options.userAgentHeaderName, getDefaultUserAgentHeaderName);\n  const userAgentHeaderValue: string = getValueOrFunctionResult(options.userAgent, getDefaultUserAgentValue);\n  if (userAgentHeaderName && userAgentHeaderValue) {\n    factories.push(userAgentPolicy({ key: userAgentHeaderName, value: userAgentHeaderValue }));\n  }\n  factories.push(redirectPolicy());\n  factories.push(rpRegistrationPolicy(options.rpRegistrationRetryTimeout));\n\n  if (!options.noRetryPolicy) {\n    factories.push(exponentialRetryPolicy());\n    factories.push(systemErrorRetryPolicy());\n    factories.push(throttlingRetryPolicy());\n  }\n\n  factories.push(deserializationPolicy(options.deserializationContentTypes));\n\n  const proxySettings = options.proxySettings || getDefaultProxySettings();\n  if (proxySettings) {\n    factories.push(proxyPolicy(proxySettings));\n  }\n\n  return factories;\n}\n\nexport type PropertyParent = { [propertyName: string]: any };\n\n/**\n * Get the property parent for the property at the provided path when starting with the provided\n * parent object.\n */\nexport function getPropertyParent(parent: PropertyParent, propertyPath: string[]): PropertyParent {\n  if (parent && propertyPath) {\n    const propertyPathLength: number = propertyPath.length;\n    for (let i = 0; i < propertyPathLength - 1; ++i) {\n      const propertyName: string = propertyPath[i];\n      if (!parent[propertyName]) {\n        parent[propertyName] = {};\n      }\n      parent = parent[propertyName];\n    }\n  }\n  return parent;\n}\n\nfunction getOperationArgumentValueFromParameter(serviceClient: ServiceClient, operationArguments: OperationArguments, parameter: OperationParameter, serializer: Serializer): any {\n  return getOperationArgumentValueFromParameterPath(serviceClient, operationArguments, parameter.parameterPath, parameter.mapper, serializer);\n}\n\nexport function getOperationArgumentValueFromParameterPath(serviceClient: ServiceClient, operationArguments: OperationArguments, parameterPath: ParameterPath, parameterMapper: Mapper, serializer: Serializer): any {\n  let value: any;\n  if (typeof parameterPath === \"string\") {\n    parameterPath = [parameterPath];\n  }\n  if (Array.isArray(parameterPath)) {\n    if (parameterPath.length > 0) {\n      if (parameterMapper.isConstant) {\n        value = parameterMapper.defaultValue;\n      } else {\n        let propertySearchResult: PropertySearchResult = getPropertyFromParameterPath(operationArguments, parameterPath);\n        if (!propertySearchResult.propertyFound) {\n          propertySearchResult = getPropertyFromParameterPath(serviceClient, parameterPath);\n        }\n\n        let useDefaultValue = false;\n        if (!propertySearchResult.propertyFound) {\n          useDefaultValue = parameterMapper.required || (parameterPath[0] === \"options\" && parameterPath.length === 2);\n        }\n        value = useDefaultValue ? parameterMapper.defaultValue : propertySearchResult.propertyValue;\n      }\n\n      // Serialize just for validation purposes.\n      const parameterPathString: string = getPathStringFromParameterPath(parameterPath, parameterMapper);\n      serializer.serialize(parameterMapper, value, parameterPathString);\n    }\n  } else {\n    if (parameterMapper.required) {\n      value = {};\n    }\n\n    for (const propertyName in parameterPath) {\n      const propertyMapper: Mapper = (parameterMapper as CompositeMapper).type.modelProperties![propertyName];\n      const propertyPath: ParameterPath = parameterPath[propertyName];\n      const propertyValue: any = getOperationArgumentValueFromParameterPath(serviceClient, operationArguments, propertyPath, propertyMapper, serializer);\n      // Serialize just for validation purposes.\n      const propertyPathString: string = getPathStringFromParameterPath(propertyPath, propertyMapper);\n      serializer.serialize(propertyMapper, propertyValue, propertyPathString);\n      if (propertyValue !== undefined) {\n        if (!value) {\n          value = {};\n        }\n        value[propertyName] = propertyValue;\n      }\n    }\n  }\n  return value;\n}\n\ninterface PropertySearchResult {\n  propertyValue?: any;\n  propertyFound: boolean;\n}\n\nfunction getPropertyFromParameterPath(parent: { [parameterName: string]: any }, parameterPath: string[]): PropertySearchResult {\n  const result: PropertySearchResult = { propertyFound: false };\n  let i = 0;\n  for (; i < parameterPath.length; ++i) {\n    const parameterPathPart: string = parameterPath[i];\n    // Make sure to check inherited properties too, so don't use hasOwnProperty().\n    if (parent != undefined && parameterPathPart in parent) {\n      parent = parent[parameterPathPart];\n    } else {\n      break;\n    }\n  }\n  if (i === parameterPath.length) {\n    result.propertyValue = parent;\n    result.propertyFound = true;\n  }\n  return result;\n}\n\nexport function flattenResponse(_response: HttpOperationResponse, responseSpec: OperationResponse | undefined): RestResponse {\n  const parsedHeaders = _response.parsedHeaders;\n  const bodyMapper = responseSpec && responseSpec.bodyMapper;\n\n  const addOperationResponse = (obj: {}) =>\n    Object.defineProperty(obj, \"_response\", {\n      value: _response\n    });\n\n  if (bodyMapper) {\n    const typeName = bodyMapper.type.name;\n    if (typeName === \"Stream\") {\n      return addOperationResponse({\n        ...parsedHeaders,\n        blobBody: _response.blobBody,\n        readableStreamBody: _response.readableStreamBody\n      });\n    }\n\n    const modelProperties = typeName === \"Composite\" && (bodyMapper as CompositeMapper).type.modelProperties || {};\n    const isPageableResponse = Object.keys(modelProperties).some(k => modelProperties[k].serializedName === \"\");\n    if (typeName === \"Sequence\" || isPageableResponse) {\n      const arrayResponse = [...(_response.parsedBody || [])] as RestResponse & any[];\n\n      for (const key of Object.keys(modelProperties)) {\n        if (modelProperties[key].serializedName) {\n          arrayResponse[key] = _response.parsedBody[key];\n        }\n      }\n\n      if (parsedHeaders) {\n        for (const key of Object.keys(parsedHeaders)) {\n          arrayResponse[key] = parsedHeaders[key];\n        }\n      }\n      addOperationResponse(arrayResponse);\n      return arrayResponse;\n    }\n\n    if (typeName === \"Composite\" || typeName === \"Dictionary\") {\n      return addOperationResponse({\n        ...parsedHeaders,\n        ..._response.parsedBody\n      });\n    }\n  }\n\n  if (bodyMapper || _response.request.method === \"HEAD\") {\n    // primitive body types and HEAD booleans\n    return addOperationResponse({\n      ...parsedHeaders,\n      body: _response.parsedBody\n    });\n  }\n\n  return addOperationResponse({\n    ...parsedHeaders,\n    ..._response.parsedBody\n  });\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { AbortSignalLike, isNode } from \"@azure/core-http\";\n\n/**\n * An aborter instance implements AbortSignal interface, can abort HTTP requests.\n *\n * - Call Aborter.none to create a new Aborter instance without timeout.\n * - Call Aborter.timeout() to create a new Aborter instance with timeout.\n *\n * For an existing instance aborter:\n * - Call aborter.withTimeout() to create and return a child Aborter instance with timeout.\n * - Call aborter.withValue(key, value) to create and return a child Aborter instance with key/value pair.\n * - Call aborter.abort() to abort current instance and all children instances.\n * - Call aborter.getValue(key) to search and get value with corresponding key from current aborter to all parents.\n *\n * @example\n * // Abort without timeout\n * await blockBlobClient.upload(buf, buf.length);\n *\n * @example\n * // Abort container create in 1000ms\n * await blockBlobClient.upload(Aborter.timeout(1000), buf, buf.length);\n *\n * @example\n * // Share aborter cross multiple operations in 30s\n * // Upload the same data to 2 different data centers at the same time, abort another when any of them is finished\n * const aborter = Aborter.timeout(30 * 1000);\n * blockBlobClient1.upload(aborter, buf, buf.length).then(aborter.abort);\n * blockBlobClient2.upload(aborter, buf, buf.length).then(aborter.abort);\n *\n * @example\n * // Cascaded aborting\n * // All operations can't take more than 30 seconds\n * const aborter = Aborter.timeout(30 * 1000);\n *\n * // Following 2 operations can't take more than 25 seconds\n * await blockBlobClient.upload(aborter.withTimeout(25 * 1000), buf, buf.length);\n * await blockBlobClient.upload(aborter.withTimeout(25 * 1000), buf, buf.length);\n *\n * @export\n * @class Aborter\n * @implements {AbortSignalLike}\n */\n\nexport class Aborter implements AbortSignalLike {\n  /**\n   * Status of whether aborted or not.\n   *\n   * @readonly\n   * @type {boolean}\n   * @memberof Aborter\n   */\n  public get aborted(): boolean {\n    return this._aborted;\n  }\n\n  /**\n   * Creates a new Aborter instance without timeout.\n   *\n   * @readonly\n   * @static\n   * @type {Aborter}\n   * @memberof Aborter\n   */\n  public static get none(): Aborter {\n    return new Aborter(undefined, 0);\n  }\n\n  /**\n   * Creates a new Aborter instance with timeout in milliseconds.\n   * Set parameter timeout to 0 will not create a timer.\n   *\n   * @static\n   * @param {number} {timeout} in milliseconds\n   * @returns {Aborter}\n   * @memberof Aborter\n   */\n  public static timeout(timeout: number): Aborter {\n    return new Aborter(undefined, timeout);\n  }\n\n  /**\n   * onabort event listener.\n   *\n   * @memberof Aborter\n   */\n  public onabort?: (ev?: Event) => any;\n\n  // tslint:disable-next-line:variable-name\n  private _aborted: boolean = false;\n  private timer?: any;\n  private readonly parent?: Aborter;\n  private readonly children: Aborter[] = []; // When child object calls dispose(), remove child from here\n  private readonly abortEventListeners: Array<(this: AbortSignalLike, ev?: any) => any> = [];\n  // Pipeline proxies need to use \"abortSignal as Aborter\" in order to access non AbortSignalLike methods\n  // immutable primitive types\n  private readonly key?: string;\n  private readonly value?: string | number | boolean | null;\n  // private disposed: boolean = false;\n\n  /**\n   * Private constructor for internal usage, creates an instance of Aborter.\n   *\n   * @param {Aborter} [parent] Optional. Parent aborter.\n   * @param {number} [timeout=0] Optional. Timeout before abort in millisecond, 0 means no timeout.\n   * @param {string} [key] Optional. Immutable key in string.\n   * @param {(string | number | boolean | null)} [value] Optional. Immutable value.\n   * @memberof Aborter\n   */\n  private constructor(\n    parent?: Aborter,\n    timeout: number = 0,\n    key?: string,\n    value?: string | number | boolean | null\n  ) {\n    this.parent = parent;\n    this.key = key;\n    this.value = value;\n\n    if (timeout > 0) {\n      this.timer = setTimeout(() => {\n        this.abort.call(this);\n      }, timeout);\n\n      // When called, the active Timeout object will not require the Node.js event loop\n      // to remain active. If there is no other activity keeping the event loop running,\n      // the process may exit before the Timeout object's callback is invoked.\n      if (this.timer && isNode) {\n        this.timer!.unref();\n      }\n    }\n  }\n\n  /**\n   * Create and return a new Aborter instance, which will be appended as a child node of current Aborter.\n   * Current Aborter instance becomes father node of the new instance. When current or father Aborter node\n   * triggers timeout event, all children nodes abort event will be triggered too.\n   *\n   * When timeout parameter (in millisecond) is larger than 0, the abort event will be triggered when timeout.\n   * Otherwise, call abort() method to manually abort.\n   *\n   * @param {number} {timeout} Timeout in millisecond.\n   * @returns {Aborter} The new Aborter instance created.\n   * @memberof Aborter\n   */\n  public withTimeout(timeout: number): Aborter {\n    const childCancelContext = new Aborter(this, timeout);\n    this.children.push(childCancelContext);\n    return childCancelContext;\n  }\n\n  /**\n   * Create and return a new Aborter instance, which will be appended as a child node of current Aborter.\n   * Current Aborter instance becomes father node of the new instance. When current or father Aborter node\n   * triggers timeout event, all children nodes abort event will be triggered too.\n   *\n   * Immutable key value pair will be set into the new created Aborter instance.\n   * Call getValue() to find out latest value with corresponding key in the chain of\n   * [current node] -> [parent node] and [grand parent node]....\n   *\n   * @param {string} key\n   * @param {(string | number | boolean | null)} [value]\n   * @returns {Aborter}\n   * @memberof Aborter\n   */\n  public withValue(key: string, value?: string | number | boolean | null): Aborter {\n    const childCancelContext = new Aborter(this, 0, key, value);\n    this.children.push(childCancelContext);\n    return childCancelContext;\n  }\n\n  /**\n   * Find out latest value with corresponding key in the chain of\n   * [current node] -> [parent node] -> [grand parent node] -> ... -> [root node].\n   *\n   * If key is not found, undefined will be returned.\n   *\n   * @param {string} key\n   * @returns {(string | number | boolean | null | undefined)}\n   * @memberof Aborter\n   */\n  public getValue(key: string): string | number | boolean | null | undefined {\n    for (let parent: Aborter | undefined = this; parent; parent = parent.parent) {\n      if (parent.key === key) {\n        return parent.value;\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Trigger abort event immediately, the onabort and all abort event listeners will be triggered.\n   * Will try to trigger abort event for all children Aborter nodes.\n   *\n   * - If there is a timeout, the timer will be cancelled.\n   * - If aborted is true, nothing will happen.\n   *\n   * @returns\n   * @memberof Aborter\n   */\n  public abort() {\n    if (this.aborted) {\n      return;\n    }\n    this.cancelTimer();\n\n    if (this.onabort) {\n      this.onabort.call(this);\n    }\n\n    this.abortEventListeners.forEach((listener) => {\n      listener.call(this);\n    });\n\n    this.children.forEach((child) => child.cancelByParent());\n\n    this._aborted = true;\n  }\n\n  // public dispose() {\n  //   if (this.disposed || this.aborted) {\n  //     return;\n  //   }\n\n  //   this.cancelTimer();\n\n  //   // (parent)A <- B <- C(child), if B disposes, when A abort, C will not abort\n  //   if (this.parent) {\n  //     const index = this.parent.children.indexOf(this);\n  //     if (index > -1) {\n  //       this.parent.children.splice(index, 1);\n  //     }\n  //   }\n\n  //   this.disposed = true;\n  // }\n\n  /**\n   * Added new \"abort\" event listener, only support \"abort\" event.\n   *\n   * @param {\"abort\"} _type Only support \"abort\" event\n   * @param {(this: AbortSignalLike, ev: any) => any} listener\n   * @memberof Aborter\n   */\n  public addEventListener(\n    // tslint:disable-next-line:variable-name\n    _type: \"abort\",\n    listener: (this: AbortSignalLike, ev: any) => any\n  ): void {\n    this.abortEventListeners.push(listener);\n  }\n\n  /**\n   * Remove \"abort\" event listener, only support \"abort\" event.\n   *\n   * @param {\"abort\"} _type Only support \"abort\" event\n   * @param {(this: AbortSignalLike, ev: any) => any} listener\n   * @memberof Aborter\n   */\n  public removeEventListener(\n    // tslint:disable-next-line:variable-name\n    _type: \"abort\",\n    listener: (this: AbortSignalLike, ev: any) => any\n  ): void {\n    const index = this.abortEventListeners.indexOf(listener);\n    if (index > -1) {\n      this.abortEventListeners.splice(index, 1);\n    }\n  }\n\n  private cancelByParent() {\n    // if (!this.disposed) {\n    this.abort();\n    // }\n  }\n\n  private cancelTimer() {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\n\n\nexport const StorageError: coreHttp.CompositeMapper = {\n  serializedName: \"StorageError\",\n  type: {\n    name: \"Composite\",\n    className: \"StorageError\",\n    modelProperties: {\n      message: {\n        xmlName: \"Message\",\n        serializedName: \"Message\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AccessPolicy: coreHttp.CompositeMapper = {\n  serializedName: \"AccessPolicy\",\n  type: {\n    name: \"Composite\",\n    className: \"AccessPolicy\",\n    modelProperties: {\n      start: {\n        xmlName: \"Start\",\n        required: true,\n        serializedName: \"Start\",\n        type: {\n          name: \"String\"\n        }\n      },\n      expiry: {\n        xmlName: \"Expiry\",\n        required: true,\n        serializedName: \"Expiry\",\n        type: {\n          name: \"String\"\n        }\n      },\n      permission: {\n        xmlName: \"Permission\",\n        required: true,\n        serializedName: \"Permission\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobProperties: coreHttp.CompositeMapper = {\n  xmlName: \"Properties\",\n  serializedName: \"BlobProperties\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobProperties\",\n    modelProperties: {\n      creationTime: {\n        xmlName: \"Creation-Time\",\n        serializedName: \"Creation-Time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      lastModified: {\n        xmlName: \"Last-Modified\",\n        required: true,\n        serializedName: \"Last-Modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      etag: {\n        xmlName: \"Etag\",\n        required: true,\n        serializedName: \"Etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentLength: {\n        xmlName: \"Content-Length\",\n        serializedName: \"Content-Length\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      contentType: {\n        xmlName: \"Content-Type\",\n        serializedName: \"Content-Type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentEncoding: {\n        xmlName: \"Content-Encoding\",\n        serializedName: \"Content-Encoding\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentLanguage: {\n        xmlName: \"Content-Language\",\n        serializedName: \"Content-Language\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentMD5: {\n        xmlName: \"Content-MD5\",\n        serializedName: \"Content-MD5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      contentDisposition: {\n        xmlName: \"Content-Disposition\",\n        serializedName: \"Content-Disposition\",\n        type: {\n          name: \"String\"\n        }\n      },\n      cacheControl: {\n        xmlName: \"Cache-Control\",\n        serializedName: \"Cache-Control\",\n        type: {\n          name: \"String\"\n        }\n      },\n      blobSequenceNumber: {\n        xmlName: \"x-ms-blob-sequence-number\",\n        serializedName: \"x-ms-blob-sequence-number\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      blobType: {\n        xmlName: \"BlobType\",\n        serializedName: \"BlobType\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"BlockBlob\",\n            \"PageBlob\",\n            \"AppendBlob\"\n          ]\n        }\n      },\n      leaseStatus: {\n        xmlName: \"LeaseStatus\",\n        serializedName: \"LeaseStatus\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"locked\",\n            \"unlocked\"\n          ]\n        }\n      },\n      leaseState: {\n        xmlName: \"LeaseState\",\n        serializedName: \"LeaseState\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"available\",\n            \"leased\",\n            \"expired\",\n            \"breaking\",\n            \"broken\"\n          ]\n        }\n      },\n      leaseDuration: {\n        xmlName: \"LeaseDuration\",\n        serializedName: \"LeaseDuration\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"infinite\",\n            \"fixed\"\n          ]\n        }\n      },\n      copyId: {\n        xmlName: \"CopyId\",\n        serializedName: \"CopyId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyStatus: {\n        xmlName: \"CopyStatus\",\n        serializedName: \"CopyStatus\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"pending\",\n            \"success\",\n            \"aborted\",\n            \"failed\"\n          ]\n        }\n      },\n      copySource: {\n        xmlName: \"CopySource\",\n        serializedName: \"CopySource\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyProgress: {\n        xmlName: \"CopyProgress\",\n        serializedName: \"CopyProgress\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyCompletionTime: {\n        xmlName: \"CopyCompletionTime\",\n        serializedName: \"CopyCompletionTime\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      copyStatusDescription: {\n        xmlName: \"CopyStatusDescription\",\n        serializedName: \"CopyStatusDescription\",\n        type: {\n          name: \"String\"\n        }\n      },\n      serverEncrypted: {\n        xmlName: \"ServerEncrypted\",\n        serializedName: \"ServerEncrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      incrementalCopy: {\n        xmlName: \"IncrementalCopy\",\n        serializedName: \"IncrementalCopy\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      destinationSnapshot: {\n        xmlName: \"DestinationSnapshot\",\n        serializedName: \"DestinationSnapshot\",\n        type: {\n          name: \"String\"\n        }\n      },\n      deletedTime: {\n        xmlName: \"DeletedTime\",\n        serializedName: \"DeletedTime\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      remainingRetentionDays: {\n        xmlName: \"RemainingRetentionDays\",\n        serializedName: \"RemainingRetentionDays\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      accessTier: {\n        xmlName: \"AccessTier\",\n        serializedName: \"AccessTier\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accessTierInferred: {\n        xmlName: \"AccessTierInferred\",\n        serializedName: \"AccessTierInferred\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      archiveStatus: {\n        xmlName: \"ArchiveStatus\",\n        serializedName: \"ArchiveStatus\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accessTierChangeTime: {\n        xmlName: \"AccessTierChangeTime\",\n        serializedName: \"AccessTierChangeTime\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobItem: coreHttp.CompositeMapper = {\n  xmlName: \"Blob\",\n  serializedName: \"BlobItem\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobItem\",\n    modelProperties: {\n      name: {\n        xmlName: \"Name\",\n        required: true,\n        serializedName: \"Name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      deleted: {\n        xmlName: \"Deleted\",\n        required: true,\n        serializedName: \"Deleted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      snapshot: {\n        xmlName: \"Snapshot\",\n        required: true,\n        serializedName: \"Snapshot\",\n        type: {\n          name: \"String\"\n        }\n      },\n      properties: {\n        xmlName: \"Properties\",\n        required: true,\n        serializedName: \"Properties\",\n        type: {\n          name: \"Composite\",\n          className: \"BlobProperties\"\n        }\n      },\n      metadata: {\n        xmlName: \"Metadata\",\n        serializedName: \"Metadata\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const BlobFlatListSegment: coreHttp.CompositeMapper = {\n  xmlName: \"Blobs\",\n  serializedName: \"BlobFlatListSegment\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobFlatListSegment\",\n    modelProperties: {\n      blobItems: {\n        xmlName: \"BlobItems\",\n        xmlElementName: \"Blob\",\n        required: true,\n        serializedName: \"BlobItems\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"BlobItem\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ListBlobsFlatSegmentResponse: coreHttp.CompositeMapper = {\n  xmlName: \"EnumerationResults\",\n  serializedName: \"ListBlobsFlatSegmentResponse\",\n  type: {\n    name: \"Composite\",\n    className: \"ListBlobsFlatSegmentResponse\",\n    modelProperties: {\n      serviceEndpoint: {\n        xmlIsAttribute: true,\n        xmlName: \"ServiceEndpoint\",\n        required: true,\n        serializedName: \"ServiceEndpoint\",\n        type: {\n          name: \"String\"\n        }\n      },\n      containerName: {\n        xmlIsAttribute: true,\n        xmlName: \"ContainerName\",\n        required: true,\n        serializedName: \"ContainerName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      prefix: {\n        xmlName: \"Prefix\",\n        required: true,\n        serializedName: \"Prefix\",\n        type: {\n          name: \"String\"\n        }\n      },\n      marker: {\n        xmlName: \"Marker\",\n        required: true,\n        serializedName: \"Marker\",\n        type: {\n          name: \"String\"\n        }\n      },\n      maxResults: {\n        xmlName: \"MaxResults\",\n        required: true,\n        serializedName: \"MaxResults\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      delimiter: {\n        xmlName: \"Delimiter\",\n        required: true,\n        serializedName: \"Delimiter\",\n        type: {\n          name: \"String\"\n        }\n      },\n      segment: {\n        xmlName: \"Blobs\",\n        required: true,\n        serializedName: \"Segment\",\n        type: {\n          name: \"Composite\",\n          className: \"BlobFlatListSegment\"\n        }\n      },\n      nextMarker: {\n        xmlName: \"NextMarker\",\n        required: true,\n        serializedName: \"NextMarker\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobPrefix: coreHttp.CompositeMapper = {\n  serializedName: \"BlobPrefix\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobPrefix\",\n    modelProperties: {\n      name: {\n        xmlName: \"Name\",\n        required: true,\n        serializedName: \"Name\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobHierarchyListSegment: coreHttp.CompositeMapper = {\n  xmlName: \"Blobs\",\n  serializedName: \"BlobHierarchyListSegment\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobHierarchyListSegment\",\n    modelProperties: {\n      blobPrefixes: {\n        xmlName: \"BlobPrefixes\",\n        xmlElementName: \"BlobPrefix\",\n        serializedName: \"BlobPrefixes\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"BlobPrefix\"\n            }\n          }\n        }\n      },\n      blobItems: {\n        xmlName: \"BlobItems\",\n        xmlElementName: \"Blob\",\n        required: true,\n        serializedName: \"BlobItems\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"BlobItem\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ListBlobsHierarchySegmentResponse: coreHttp.CompositeMapper = {\n  xmlName: \"EnumerationResults\",\n  serializedName: \"ListBlobsHierarchySegmentResponse\",\n  type: {\n    name: \"Composite\",\n    className: \"ListBlobsHierarchySegmentResponse\",\n    modelProperties: {\n      serviceEndpoint: {\n        xmlIsAttribute: true,\n        xmlName: \"ServiceEndpoint\",\n        required: true,\n        serializedName: \"ServiceEndpoint\",\n        type: {\n          name: \"String\"\n        }\n      },\n      containerName: {\n        xmlIsAttribute: true,\n        xmlName: \"ContainerName\",\n        required: true,\n        serializedName: \"ContainerName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      prefix: {\n        xmlName: \"Prefix\",\n        required: true,\n        serializedName: \"Prefix\",\n        type: {\n          name: \"String\"\n        }\n      },\n      marker: {\n        xmlName: \"Marker\",\n        required: true,\n        serializedName: \"Marker\",\n        type: {\n          name: \"String\"\n        }\n      },\n      maxResults: {\n        xmlName: \"MaxResults\",\n        required: true,\n        serializedName: \"MaxResults\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      delimiter: {\n        xmlName: \"Delimiter\",\n        required: true,\n        serializedName: \"Delimiter\",\n        type: {\n          name: \"String\"\n        }\n      },\n      segment: {\n        xmlName: \"Blobs\",\n        required: true,\n        serializedName: \"Segment\",\n        type: {\n          name: \"Composite\",\n          className: \"BlobHierarchyListSegment\"\n        }\n      },\n      nextMarker: {\n        xmlName: \"NextMarker\",\n        required: true,\n        serializedName: \"NextMarker\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Block: coreHttp.CompositeMapper = {\n  serializedName: \"Block\",\n  type: {\n    name: \"Composite\",\n    className: \"Block\",\n    modelProperties: {\n      name: {\n        xmlName: \"Name\",\n        required: true,\n        serializedName: \"Name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      size: {\n        xmlName: \"Size\",\n        required: true,\n        serializedName: \"Size\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlockList: coreHttp.CompositeMapper = {\n  serializedName: \"BlockList\",\n  type: {\n    name: \"Composite\",\n    className: \"BlockList\",\n    modelProperties: {\n      committedBlocks: {\n        xmlIsWrapped: true,\n        xmlName: \"CommittedBlocks\",\n        xmlElementName: \"Block\",\n        serializedName: \"CommittedBlocks\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Block\"\n            }\n          }\n        }\n      },\n      uncommittedBlocks: {\n        xmlIsWrapped: true,\n        xmlName: \"UncommittedBlocks\",\n        xmlElementName: \"Block\",\n        serializedName: \"UncommittedBlocks\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Block\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const BlockLookupList: coreHttp.CompositeMapper = {\n  xmlName: \"BlockList\",\n  serializedName: \"BlockLookupList\",\n  type: {\n    name: \"Composite\",\n    className: \"BlockLookupList\",\n    modelProperties: {\n      committed: {\n        xmlName: \"Committed\",\n        xmlElementName: \"Committed\",\n        serializedName: \"Committed\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      uncommitted: {\n        xmlName: \"Uncommitted\",\n        xmlElementName: \"Uncommitted\",\n        serializedName: \"Uncommitted\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      latest: {\n        xmlName: \"Latest\",\n        xmlElementName: \"Latest\",\n        serializedName: \"Latest\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerProperties: coreHttp.CompositeMapper = {\n  serializedName: \"ContainerProperties\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerProperties\",\n    modelProperties: {\n      lastModified: {\n        xmlName: \"Last-Modified\",\n        required: true,\n        serializedName: \"Last-Modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      etag: {\n        xmlName: \"Etag\",\n        required: true,\n        serializedName: \"Etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      leaseStatus: {\n        xmlName: \"LeaseStatus\",\n        serializedName: \"LeaseStatus\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"locked\",\n            \"unlocked\"\n          ]\n        }\n      },\n      leaseState: {\n        xmlName: \"LeaseState\",\n        serializedName: \"LeaseState\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"available\",\n            \"leased\",\n            \"expired\",\n            \"breaking\",\n            \"broken\"\n          ]\n        }\n      },\n      leaseDuration: {\n        xmlName: \"LeaseDuration\",\n        serializedName: \"LeaseDuration\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"infinite\",\n            \"fixed\"\n          ]\n        }\n      },\n      publicAccess: {\n        xmlName: \"PublicAccess\",\n        serializedName: \"PublicAccess\",\n        type: {\n          name: \"String\"\n        }\n      },\n      hasImmutabilityPolicy: {\n        xmlName: \"HasImmutabilityPolicy\",\n        serializedName: \"HasImmutabilityPolicy\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      hasLegalHold: {\n        xmlName: \"HasLegalHold\",\n        serializedName: \"HasLegalHold\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerItem: coreHttp.CompositeMapper = {\n  xmlName: \"Container\",\n  serializedName: \"ContainerItem\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerItem\",\n    modelProperties: {\n      name: {\n        xmlName: \"Name\",\n        required: true,\n        serializedName: \"Name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      properties: {\n        xmlName: \"Properties\",\n        required: true,\n        serializedName: \"Properties\",\n        type: {\n          name: \"Composite\",\n          className: \"ContainerProperties\"\n        }\n      },\n      metadata: {\n        xmlName: \"Metadata\",\n        serializedName: \"Metadata\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ListContainersSegmentResponse: coreHttp.CompositeMapper = {\n  xmlName: \"EnumerationResults\",\n  serializedName: \"ListContainersSegmentResponse\",\n  type: {\n    name: \"Composite\",\n    className: \"ListContainersSegmentResponse\",\n    modelProperties: {\n      serviceEndpoint: {\n        xmlIsAttribute: true,\n        xmlName: \"ServiceEndpoint\",\n        required: true,\n        serializedName: \"ServiceEndpoint\",\n        type: {\n          name: \"String\"\n        }\n      },\n      prefix: {\n        xmlName: \"Prefix\",\n        required: true,\n        serializedName: \"Prefix\",\n        type: {\n          name: \"String\"\n        }\n      },\n      marker: {\n        xmlName: \"Marker\",\n        serializedName: \"Marker\",\n        type: {\n          name: \"String\"\n        }\n      },\n      maxResults: {\n        xmlName: \"MaxResults\",\n        required: true,\n        serializedName: \"MaxResults\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      containerItems: {\n        xmlIsWrapped: true,\n        xmlName: \"Containers\",\n        xmlElementName: \"Container\",\n        required: true,\n        serializedName: \"ContainerItems\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ContainerItem\"\n            }\n          }\n        }\n      },\n      nextMarker: {\n        xmlName: \"NextMarker\",\n        required: true,\n        serializedName: \"NextMarker\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CorsRule: coreHttp.CompositeMapper = {\n  serializedName: \"CorsRule\",\n  type: {\n    name: \"Composite\",\n    className: \"CorsRule\",\n    modelProperties: {\n      allowedOrigins: {\n        xmlName: \"AllowedOrigins\",\n        required: true,\n        serializedName: \"AllowedOrigins\",\n        type: {\n          name: \"String\"\n        }\n      },\n      allowedMethods: {\n        xmlName: \"AllowedMethods\",\n        required: true,\n        serializedName: \"AllowedMethods\",\n        type: {\n          name: \"String\"\n        }\n      },\n      allowedHeaders: {\n        xmlName: \"AllowedHeaders\",\n        required: true,\n        serializedName: \"AllowedHeaders\",\n        type: {\n          name: \"String\"\n        }\n      },\n      exposedHeaders: {\n        xmlName: \"ExposedHeaders\",\n        required: true,\n        serializedName: \"ExposedHeaders\",\n        type: {\n          name: \"String\"\n        }\n      },\n      maxAgeInSeconds: {\n        xmlName: \"MaxAgeInSeconds\",\n        required: true,\n        serializedName: \"MaxAgeInSeconds\",\n        constraints: {\n          InclusiveMinimum: 0\n        },\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const GeoReplication: coreHttp.CompositeMapper = {\n  serializedName: \"GeoReplication\",\n  type: {\n    name: \"Composite\",\n    className: \"GeoReplication\",\n    modelProperties: {\n      status: {\n        xmlName: \"Status\",\n        required: true,\n        serializedName: \"Status\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastSyncTime: {\n        xmlName: \"LastSyncTime\",\n        required: true,\n        serializedName: \"LastSyncTime\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      }\n    }\n  }\n};\n\nexport const RetentionPolicy: coreHttp.CompositeMapper = {\n  serializedName: \"RetentionPolicy\",\n  type: {\n    name: \"Composite\",\n    className: \"RetentionPolicy\",\n    modelProperties: {\n      enabled: {\n        xmlName: \"Enabled\",\n        required: true,\n        serializedName: \"Enabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      days: {\n        xmlName: \"Days\",\n        serializedName: \"Days\",\n        constraints: {\n          InclusiveMinimum: 1\n        },\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const Logging: coreHttp.CompositeMapper = {\n  serializedName: \"Logging\",\n  type: {\n    name: \"Composite\",\n    className: \"Logging\",\n    modelProperties: {\n      version: {\n        xmlName: \"Version\",\n        required: true,\n        serializedName: \"Version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      deleteProperty: {\n        xmlName: \"Delete\",\n        required: true,\n        serializedName: \"Delete\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      read: {\n        xmlName: \"Read\",\n        required: true,\n        serializedName: \"Read\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      write: {\n        xmlName: \"Write\",\n        required: true,\n        serializedName: \"Write\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      retentionPolicy: {\n        xmlName: \"RetentionPolicy\",\n        required: true,\n        serializedName: \"RetentionPolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"RetentionPolicy\"\n        }\n      }\n    }\n  }\n};\n\nexport const Metrics: coreHttp.CompositeMapper = {\n  serializedName: \"Metrics\",\n  type: {\n    name: \"Composite\",\n    className: \"Metrics\",\n    modelProperties: {\n      version: {\n        xmlName: \"Version\",\n        serializedName: \"Version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      enabled: {\n        xmlName: \"Enabled\",\n        required: true,\n        serializedName: \"Enabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      includeAPIs: {\n        xmlName: \"IncludeAPIs\",\n        serializedName: \"IncludeAPIs\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      retentionPolicy: {\n        xmlName: \"RetentionPolicy\",\n        serializedName: \"RetentionPolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"RetentionPolicy\"\n        }\n      }\n    }\n  }\n};\n\nexport const PageRange: coreHttp.CompositeMapper = {\n  serializedName: \"PageRange\",\n  type: {\n    name: \"Composite\",\n    className: \"PageRange\",\n    modelProperties: {\n      start: {\n        xmlName: \"Start\",\n        required: true,\n        serializedName: \"Start\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      end: {\n        xmlName: \"End\",\n        required: true,\n        serializedName: \"End\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const ClearRange: coreHttp.CompositeMapper = {\n  serializedName: \"ClearRange\",\n  type: {\n    name: \"Composite\",\n    className: \"ClearRange\",\n    modelProperties: {\n      start: {\n        xmlName: \"Start\",\n        required: true,\n        serializedName: \"Start\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      end: {\n        xmlName: \"End\",\n        required: true,\n        serializedName: \"End\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const PageList: coreHttp.CompositeMapper = {\n  serializedName: \"PageList\",\n  type: {\n    name: \"Composite\",\n    className: \"PageList\",\n    modelProperties: {\n      pageRange: {\n        xmlName: \"PageRange\",\n        xmlElementName: \"PageRange\",\n        serializedName: \"PageRange\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"PageRange\"\n            }\n          }\n        }\n      },\n      clearRange: {\n        xmlName: \"ClearRange\",\n        xmlElementName: \"ClearRange\",\n        serializedName: \"ClearRange\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ClearRange\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SignedIdentifier: coreHttp.CompositeMapper = {\n  serializedName: \"SignedIdentifier\",\n  type: {\n    name: \"Composite\",\n    className: \"SignedIdentifier\",\n    modelProperties: {\n      id: {\n        xmlName: \"Id\",\n        required: true,\n        serializedName: \"Id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accessPolicy: {\n        xmlName: \"AccessPolicy\",\n        required: true,\n        serializedName: \"AccessPolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"AccessPolicy\"\n        }\n      }\n    }\n  }\n};\n\nexport const StaticWebsite: coreHttp.CompositeMapper = {\n  serializedName: \"StaticWebsite\",\n  type: {\n    name: \"Composite\",\n    className: \"StaticWebsite\",\n    modelProperties: {\n      enabled: {\n        xmlName: \"Enabled\",\n        required: true,\n        serializedName: \"Enabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      indexDocument: {\n        xmlName: \"IndexDocument\",\n        serializedName: \"IndexDocument\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorDocument404Path: {\n        xmlName: \"ErrorDocument404Path\",\n        serializedName: \"ErrorDocument404Path\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const StorageServiceProperties: coreHttp.CompositeMapper = {\n  serializedName: \"StorageServiceProperties\",\n  type: {\n    name: \"Composite\",\n    className: \"StorageServiceProperties\",\n    modelProperties: {\n      logging: {\n        xmlName: \"Logging\",\n        serializedName: \"Logging\",\n        type: {\n          name: \"Composite\",\n          className: \"Logging\"\n        }\n      },\n      hourMetrics: {\n        xmlName: \"HourMetrics\",\n        serializedName: \"HourMetrics\",\n        type: {\n          name: \"Composite\",\n          className: \"Metrics\"\n        }\n      },\n      minuteMetrics: {\n        xmlName: \"MinuteMetrics\",\n        serializedName: \"MinuteMetrics\",\n        type: {\n          name: \"Composite\",\n          className: \"Metrics\"\n        }\n      },\n      cors: {\n        xmlIsWrapped: true,\n        xmlName: \"Cors\",\n        xmlElementName: \"CorsRule\",\n        serializedName: \"Cors\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"CorsRule\"\n            }\n          }\n        }\n      },\n      defaultServiceVersion: {\n        xmlName: \"DefaultServiceVersion\",\n        serializedName: \"DefaultServiceVersion\",\n        type: {\n          name: \"String\"\n        }\n      },\n      deleteRetentionPolicy: {\n        xmlName: \"DeleteRetentionPolicy\",\n        serializedName: \"DeleteRetentionPolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"RetentionPolicy\"\n        }\n      },\n      staticWebsite: {\n        xmlName: \"StaticWebsite\",\n        serializedName: \"StaticWebsite\",\n        type: {\n          name: \"Composite\",\n          className: \"StaticWebsite\"\n        }\n      }\n    }\n  }\n};\n\nexport const StorageServiceStats: coreHttp.CompositeMapper = {\n  serializedName: \"StorageServiceStats\",\n  type: {\n    name: \"Composite\",\n    className: \"StorageServiceStats\",\n    modelProperties: {\n      geoReplication: {\n        xmlName: \"GeoReplication\",\n        serializedName: \"GeoReplication\",\n        type: {\n          name: \"Composite\",\n          className: \"GeoReplication\"\n        }\n      }\n    }\n  }\n};\n\nexport const LeaseAccessConditions: coreHttp.CompositeMapper = {\n  xmlName: \"lease-access-conditions\",\n  type: {\n    name: \"Composite\",\n    className: \"LeaseAccessConditions\",\n    modelProperties: {\n      leaseId: {\n        xmlName: \"leaseId\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ModifiedAccessConditions: coreHttp.CompositeMapper = {\n  xmlName: \"modified-access-conditions\",\n  type: {\n    name: \"Composite\",\n    className: \"ModifiedAccessConditions\",\n    modelProperties: {\n      ifModifiedSince: {\n        xmlName: \"ifModifiedSince\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      ifUnmodifiedSince: {\n        xmlName: \"ifUnmodifiedSince\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      ifMatch: {\n        xmlName: \"ifMatch\",\n        type: {\n          name: \"String\"\n        }\n      },\n      ifNoneMatch: {\n        xmlName: \"ifNoneMatch\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobHTTPHeaders: coreHttp.CompositeMapper = {\n  xmlName: \"blob-HTTP-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobHTTPHeaders\",\n    modelProperties: {\n      blobCacheControl: {\n        xmlName: \"blobCacheControl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      blobContentType: {\n        xmlName: \"blobContentType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      blobContentMD5: {\n        xmlName: \"blobContentMD5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      blobContentEncoding: {\n        xmlName: \"blobContentEncoding\",\n        type: {\n          name: \"String\"\n        }\n      },\n      blobContentLanguage: {\n        xmlName: \"blobContentLanguage\",\n        type: {\n          name: \"String\"\n        }\n      },\n      blobContentDisposition: {\n        xmlName: \"blobContentDisposition\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SourceModifiedAccessConditions: coreHttp.CompositeMapper = {\n  xmlName: \"source-modified-access-conditions\",\n  type: {\n    name: \"Composite\",\n    className: \"SourceModifiedAccessConditions\",\n    modelProperties: {\n      sourceIfModifiedSince: {\n        xmlName: \"sourceIfModifiedSince\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      sourceIfUnmodifiedSince: {\n        xmlName: \"sourceIfUnmodifiedSince\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      sourceIfMatch: {\n        xmlName: \"sourceIfMatch\",\n        type: {\n          name: \"String\"\n        }\n      },\n      sourceIfNoneMatch: {\n        xmlName: \"sourceIfNoneMatch\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SequenceNumberAccessConditions: coreHttp.CompositeMapper = {\n  xmlName: \"sequence-number-access-conditions\",\n  type: {\n    name: \"Composite\",\n    className: \"SequenceNumberAccessConditions\",\n    modelProperties: {\n      ifSequenceNumberLessThanOrEqualTo: {\n        xmlName: \"ifSequenceNumberLessThanOrEqualTo\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      ifSequenceNumberLessThan: {\n        xmlName: \"ifSequenceNumberLessThan\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      ifSequenceNumberEqualTo: {\n        xmlName: \"ifSequenceNumberEqualTo\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const AppendPositionAccessConditions: coreHttp.CompositeMapper = {\n  xmlName: \"append-position-access-conditions\",\n  type: {\n    name: \"Composite\",\n    className: \"AppendPositionAccessConditions\",\n    modelProperties: {\n      maxSize: {\n        xmlName: \"maxSize\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      appendPosition: {\n        xmlName: \"appendPosition\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceSetPropertiesHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"service-setproperties-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceSetPropertiesHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceGetPropertiesHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"service-getproperties-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceGetPropertiesHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceGetStatisticsHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"service-getstatistics-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceGetStatisticsHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceListContainersSegmentHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"service-listcontainerssegment-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceListContainersSegmentHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceGetAccountInfoHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"service-getaccountinfo-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceGetAccountInfoHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      skuName: {\n        serializedName: \"x-ms-sku-name\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"Standard_LRS\",\n            \"Standard_GRS\",\n            \"Standard_RAGRS\",\n            \"Standard_ZRS\",\n            \"Premium_LRS\"\n          ]\n        }\n      },\n      accountKind: {\n        serializedName: \"x-ms-account-kind\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"Storage\",\n            \"BlobStorage\",\n            \"StorageV2\"\n          ]\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerCreateHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"container-create-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerCreateHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerGetPropertiesHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"container-getproperties-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerGetPropertiesHeaders\",\n    modelProperties: {\n      metadata: {\n        serializedName: \"x-ms-meta\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        },\n        headerCollectionPrefix: \"x-ms-meta-\"\n      },\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      leaseDuration: {\n        serializedName: \"x-ms-lease-duration\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"infinite\",\n            \"fixed\"\n          ]\n        }\n      },\n      leaseState: {\n        serializedName: \"x-ms-lease-state\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"available\",\n            \"leased\",\n            \"expired\",\n            \"breaking\",\n            \"broken\"\n          ]\n        }\n      },\n      leaseStatus: {\n        serializedName: \"x-ms-lease-status\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"locked\",\n            \"unlocked\"\n          ]\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      blobPublicAccess: {\n        serializedName: \"x-ms-blob-public-access\",\n        type: {\n          name: \"String\"\n        }\n      },\n      hasImmutabilityPolicy: {\n        serializedName: \"x-ms-has-immutability-policy\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      hasLegalHold: {\n        serializedName: \"x-ms-has-legal-hold\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerDeleteHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"container-delete-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerDeleteHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerSetMetadataHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"container-setmetadata-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerSetMetadataHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerGetAccessPolicyHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"container-getaccesspolicy-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerGetAccessPolicyHeaders\",\n    modelProperties: {\n      blobPublicAccess: {\n        serializedName: \"x-ms-blob-public-access\",\n        type: {\n          name: \"String\"\n        }\n      },\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerSetAccessPolicyHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"container-setaccesspolicy-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerSetAccessPolicyHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerAcquireLeaseHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"container-acquirelease-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerAcquireLeaseHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      leaseId: {\n        serializedName: \"x-ms-lease-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerReleaseLeaseHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"container-releaselease-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerReleaseLeaseHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerRenewLeaseHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"container-renewlease-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerRenewLeaseHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      leaseId: {\n        serializedName: \"x-ms-lease-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerBreakLeaseHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"container-breaklease-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerBreakLeaseHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      leaseTime: {\n        serializedName: \"x-ms-lease-time\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerChangeLeaseHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"container-changelease-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerChangeLeaseHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      leaseId: {\n        serializedName: \"x-ms-lease-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerListBlobFlatSegmentHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"container-listblobflatsegment-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerListBlobFlatSegmentHeaders\",\n    modelProperties: {\n      contentType: {\n        serializedName: \"content-type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerListBlobHierarchySegmentHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"container-listblobhierarchysegment-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerListBlobHierarchySegmentHeaders\",\n    modelProperties: {\n      contentType: {\n        serializedName: \"content-type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ContainerGetAccountInfoHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"container-getaccountinfo-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"ContainerGetAccountInfoHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      skuName: {\n        serializedName: \"x-ms-sku-name\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"Standard_LRS\",\n            \"Standard_GRS\",\n            \"Standard_RAGRS\",\n            \"Standard_ZRS\",\n            \"Premium_LRS\"\n          ]\n        }\n      },\n      accountKind: {\n        serializedName: \"x-ms-account-kind\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"Storage\",\n            \"BlobStorage\",\n            \"StorageV2\"\n          ]\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobDownloadHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"blob-download-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobDownloadHeaders\",\n    modelProperties: {\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      metadata: {\n        serializedName: \"x-ms-meta\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        },\n        headerCollectionPrefix: \"x-ms-meta-\"\n      },\n      contentLength: {\n        serializedName: \"content-length\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      contentType: {\n        serializedName: \"content-type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentRange: {\n        serializedName: \"content-range\",\n        type: {\n          name: \"String\"\n        }\n      },\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      contentEncoding: {\n        serializedName: \"content-encoding\",\n        type: {\n          name: \"String\"\n        }\n      },\n      cacheControl: {\n        serializedName: \"cache-control\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentDisposition: {\n        serializedName: \"content-disposition\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentLanguage: {\n        serializedName: \"content-language\",\n        type: {\n          name: \"String\"\n        }\n      },\n      blobSequenceNumber: {\n        serializedName: \"x-ms-blob-sequence-number\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      blobType: {\n        serializedName: \"x-ms-blob-type\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"BlockBlob\",\n            \"PageBlob\",\n            \"AppendBlob\"\n          ]\n        }\n      },\n      copyCompletionTime: {\n        serializedName: \"x-ms-copy-completion-time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      copyStatusDescription: {\n        serializedName: \"x-ms-copy-status-description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyId: {\n        serializedName: \"x-ms-copy-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyProgress: {\n        serializedName: \"x-ms-copy-progress\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copySource: {\n        serializedName: \"x-ms-copy-source\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyStatus: {\n        serializedName: \"x-ms-copy-status\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"pending\",\n            \"success\",\n            \"aborted\",\n            \"failed\"\n          ]\n        }\n      },\n      leaseDuration: {\n        serializedName: \"x-ms-lease-duration\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"infinite\",\n            \"fixed\"\n          ]\n        }\n      },\n      leaseState: {\n        serializedName: \"x-ms-lease-state\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"available\",\n            \"leased\",\n            \"expired\",\n            \"breaking\",\n            \"broken\"\n          ]\n        }\n      },\n      leaseStatus: {\n        serializedName: \"x-ms-lease-status\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"locked\",\n            \"unlocked\"\n          ]\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      acceptRanges: {\n        serializedName: \"accept-ranges\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      blobCommittedBlockCount: {\n        serializedName: \"x-ms-blob-committed-block-count\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      blobContentMD5: {\n        serializedName: \"x-ms-blob-content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobGetPropertiesHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"blob-getproperties-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobGetPropertiesHeaders\",\n    modelProperties: {\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      creationTime: {\n        serializedName: \"x-ms-creation-time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      metadata: {\n        serializedName: \"x-ms-meta\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        },\n        headerCollectionPrefix: \"x-ms-meta-\"\n      },\n      blobType: {\n        serializedName: \"x-ms-blob-type\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"BlockBlob\",\n            \"PageBlob\",\n            \"AppendBlob\"\n          ]\n        }\n      },\n      copyCompletionTime: {\n        serializedName: \"x-ms-copy-completion-time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      copyStatusDescription: {\n        serializedName: \"x-ms-copy-status-description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyId: {\n        serializedName: \"x-ms-copy-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyProgress: {\n        serializedName: \"x-ms-copy-progress\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copySource: {\n        serializedName: \"x-ms-copy-source\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyStatus: {\n        serializedName: \"x-ms-copy-status\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"pending\",\n            \"success\",\n            \"aborted\",\n            \"failed\"\n          ]\n        }\n      },\n      isIncrementalCopy: {\n        serializedName: \"x-ms-incremental-copy\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      destinationSnapshot: {\n        serializedName: \"x-ms-copy-destination-snapshot\",\n        type: {\n          name: \"String\"\n        }\n      },\n      leaseDuration: {\n        serializedName: \"x-ms-lease-duration\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"infinite\",\n            \"fixed\"\n          ]\n        }\n      },\n      leaseState: {\n        serializedName: \"x-ms-lease-state\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"available\",\n            \"leased\",\n            \"expired\",\n            \"breaking\",\n            \"broken\"\n          ]\n        }\n      },\n      leaseStatus: {\n        serializedName: \"x-ms-lease-status\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"locked\",\n            \"unlocked\"\n          ]\n        }\n      },\n      contentLength: {\n        serializedName: \"content-length\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      contentType: {\n        serializedName: \"content-type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      contentEncoding: {\n        serializedName: \"content-encoding\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentDisposition: {\n        serializedName: \"content-disposition\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentLanguage: {\n        serializedName: \"content-language\",\n        type: {\n          name: \"String\"\n        }\n      },\n      cacheControl: {\n        serializedName: \"cache-control\",\n        type: {\n          name: \"String\"\n        }\n      },\n      blobSequenceNumber: {\n        serializedName: \"x-ms-blob-sequence-number\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      acceptRanges: {\n        serializedName: \"accept-ranges\",\n        type: {\n          name: \"String\"\n        }\n      },\n      blobCommittedBlockCount: {\n        serializedName: \"x-ms-blob-committed-block-count\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      accessTier: {\n        serializedName: \"x-ms-access-tier\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accessTierInferred: {\n        serializedName: \"x-ms-access-tier-inferred\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      archiveStatus: {\n        serializedName: \"x-ms-archive-status\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accessTierChangeTime: {\n        serializedName: \"x-ms-access-tier-change-time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobDeleteHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"blob-delete-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobDeleteHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PageBlobCreateHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"pageblob-create-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"PageBlobCreateHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-request-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AppendBlobCreateHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"appendblob-create-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"AppendBlobCreateHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-request-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlockBlobUploadHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"blockblob-upload-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlockBlobUploadHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-request-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobUndeleteHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"blob-undelete-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobUndeleteHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobSetHTTPHeadersHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"blob-sethttpheaders-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobSetHTTPHeadersHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      blobSequenceNumber: {\n        serializedName: \"x-ms-blob-sequence-number\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobSetMetadataHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"blob-setmetadata-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobSetMetadataHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-request-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobAcquireLeaseHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"blob-acquirelease-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobAcquireLeaseHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      leaseId: {\n        serializedName: \"x-ms-lease-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobReleaseLeaseHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"blob-releaselease-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobReleaseLeaseHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobRenewLeaseHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"blob-renewlease-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobRenewLeaseHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      leaseId: {\n        serializedName: \"x-ms-lease-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobChangeLeaseHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"blob-changelease-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobChangeLeaseHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      leaseId: {\n        serializedName: \"x-ms-lease-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobBreakLeaseHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"blob-breaklease-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobBreakLeaseHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      leaseTime: {\n        serializedName: \"x-ms-lease-time\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobCreateSnapshotHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"blob-createsnapshot-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobCreateSnapshotHeaders\",\n    modelProperties: {\n      snapshot: {\n        serializedName: \"x-ms-snapshot\",\n        type: {\n          name: \"String\"\n        }\n      },\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobStartCopyFromURLHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"blob-startcopyfromurl-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobStartCopyFromURLHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      copyId: {\n        serializedName: \"x-ms-copy-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyStatus: {\n        serializedName: \"x-ms-copy-status\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"pending\",\n            \"success\",\n            \"aborted\",\n            \"failed\"\n          ]\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobAbortCopyFromURLHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"blob-abortcopyfromurl-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobAbortCopyFromURLHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobSetTierHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"blob-settier-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobSetTierHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobGetAccountInfoHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"blob-getaccountinfo-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobGetAccountInfoHeaders\",\n    modelProperties: {\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      skuName: {\n        serializedName: \"x-ms-sku-name\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"Standard_LRS\",\n            \"Standard_GRS\",\n            \"Standard_RAGRS\",\n            \"Standard_ZRS\",\n            \"Premium_LRS\"\n          ]\n        }\n      },\n      accountKind: {\n        serializedName: \"x-ms-account-kind\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"Storage\",\n            \"BlobStorage\",\n            \"StorageV2\"\n          ]\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlockBlobStageBlockHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"blockblob-stageblock-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlockBlobStageBlockHeaders\",\n    modelProperties: {\n      contentMD5: {\n        serializedName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-request-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlockBlobStageBlockFromURLHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"blockblob-stageblockfromurl-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlockBlobStageBlockFromURLHeaders\",\n    modelProperties: {\n      contentMD5: {\n        serializedName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-request-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlockBlobCommitBlockListHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"blockblob-commitblocklist-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlockBlobCommitBlockListHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-request-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlockBlobGetBlockListHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"blockblob-getblocklist-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"BlockBlobGetBlockListHeaders\",\n    modelProperties: {\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentType: {\n        serializedName: \"content-type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      blobContentLength: {\n        serializedName: \"x-ms-blob-content-length\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PageBlobUploadPagesHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"pageblob-uploadpages-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"PageBlobUploadPagesHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      blobSequenceNumber: {\n        serializedName: \"x-ms-blob-sequence-number\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-request-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PageBlobClearPagesHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"pageblob-clearpages-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"PageBlobClearPagesHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      blobSequenceNumber: {\n        serializedName: \"x-ms-blob-sequence-number\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PageBlobGetPageRangesHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"pageblob-getpageranges-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"PageBlobGetPageRangesHeaders\",\n    modelProperties: {\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      blobContentLength: {\n        serializedName: \"x-ms-blob-content-length\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PageBlobGetPageRangesDiffHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"pageblob-getpagerangesdiff-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"PageBlobGetPageRangesDiffHeaders\",\n    modelProperties: {\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      blobContentLength: {\n        serializedName: \"x-ms-blob-content-length\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PageBlobResizeHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"pageblob-resize-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"PageBlobResizeHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      blobSequenceNumber: {\n        serializedName: \"x-ms-blob-sequence-number\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PageBlobUpdateSequenceNumberHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"pageblob-updatesequencenumber-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"PageBlobUpdateSequenceNumberHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      blobSequenceNumber: {\n        serializedName: \"x-ms-blob-sequence-number\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PageBlobCopyIncrementalHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"pageblob-copyincremental-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"PageBlobCopyIncrementalHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      copyId: {\n        serializedName: \"x-ms-copy-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyStatus: {\n        serializedName: \"x-ms-copy-status\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"pending\",\n            \"success\",\n            \"aborted\",\n            \"failed\"\n          ]\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AppendBlobAppendBlockHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"appendblob-appendblock-headers\",\n  type: {\n    name: \"Composite\",\n    className: \"AppendBlobAppendBlockHeaders\",\n    modelProperties: {\n      eTag: {\n        serializedName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      blobAppendOffset: {\n        serializedName: \"x-ms-blob-append-offset\",\n        type: {\n          name: \"String\"\n        }\n      },\n      blobCommittedBlockCount: {\n        serializedName: \"x-ms-blob-committed-block-count\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\n\nexport const access: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"access\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-blob-public-access\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const action0: coreHttp.OperationParameter = {\n  parameterPath: \"action\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"x-ms-lease-action\",\n    defaultValue: 'acquire',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const action1: coreHttp.OperationParameter = {\n  parameterPath: \"action\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"x-ms-lease-action\",\n    defaultValue: 'release',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const action2: coreHttp.OperationParameter = {\n  parameterPath: \"action\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"x-ms-lease-action\",\n    defaultValue: 'renew',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const action3: coreHttp.OperationParameter = {\n  parameterPath: \"action\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"x-ms-lease-action\",\n    defaultValue: 'break',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const action4: coreHttp.OperationParameter = {\n  parameterPath: \"action\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"x-ms-lease-action\",\n    defaultValue: 'change',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const appendPosition: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"appendPositionAccessConditions\",\n    \"appendPosition\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-blob-condition-appendpos\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const blobCacheControl: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"blobHTTPHeaders\",\n    \"blobCacheControl\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-blob-cache-control\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const blobContentDisposition: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"blobHTTPHeaders\",\n    \"blobContentDisposition\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-blob-content-disposition\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const blobContentEncoding: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"blobHTTPHeaders\",\n    \"blobContentEncoding\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-blob-content-encoding\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const blobContentLanguage: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"blobHTTPHeaders\",\n    \"blobContentLanguage\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-blob-content-language\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const blobContentLength: coreHttp.OperationParameter = {\n  parameterPath: \"blobContentLength\",\n  mapper: {\n    required: true,\n    serializedName: \"x-ms-blob-content-length\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const blobContentMD5: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"blobHTTPHeaders\",\n    \"blobContentMD5\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-blob-content-md5\",\n    type: {\n      name: \"ByteArray\"\n    }\n  }\n};\nexport const blobContentType: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"blobHTTPHeaders\",\n    \"blobContentType\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-blob-content-type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const blobSequenceNumber: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"blobSequenceNumber\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-blob-sequence-number\",\n    defaultValue: 0,\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const blobType0: coreHttp.OperationParameter = {\n  parameterPath: \"blobType\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"x-ms-blob-type\",\n    defaultValue: 'PageBlob',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const blobType1: coreHttp.OperationParameter = {\n  parameterPath: \"blobType\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"x-ms-blob-type\",\n    defaultValue: 'AppendBlob',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const blobType2: coreHttp.OperationParameter = {\n  parameterPath: \"blobType\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"x-ms-blob-type\",\n    defaultValue: 'BlockBlob',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const blockId: coreHttp.OperationQueryParameter = {\n  parameterPath: \"blockId\",\n  mapper: {\n    required: true,\n    serializedName: \"blockid\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const breakPeriod: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"breakPeriod\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-lease-break-period\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const comp0: coreHttp.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'properties',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp1: coreHttp.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'stats',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp10: coreHttp.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'page',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp11: coreHttp.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'pagelist',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp12: coreHttp.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'incrementalcopy',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp13: coreHttp.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'appendblock',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp14: coreHttp.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'block',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp15: coreHttp.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'blocklist',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp2: coreHttp.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'list',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp3: coreHttp.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'metadata',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp4: coreHttp.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'acl',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp5: coreHttp.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'lease',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp6: coreHttp.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'undelete',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp7: coreHttp.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'snapshot',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp8: coreHttp.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'copy',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const comp9: coreHttp.OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"comp\",\n    defaultValue: 'tier',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const contentLength: coreHttp.OperationParameter = {\n  parameterPath: \"contentLength\",\n  mapper: {\n    required: true,\n    serializedName: \"Content-Length\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const copyActionAbortConstant: coreHttp.OperationParameter = {\n  parameterPath: \"copyActionAbortConstant\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"x-ms-copy-action\",\n    defaultValue: 'abort',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const copyId: coreHttp.OperationQueryParameter = {\n  parameterPath: \"copyId\",\n  mapper: {\n    required: true,\n    serializedName: \"copyid\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const copySource: coreHttp.OperationParameter = {\n  parameterPath: \"copySource\",\n  mapper: {\n    required: true,\n    serializedName: \"x-ms-copy-source\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const deleteSnapshots: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"deleteSnapshots\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-delete-snapshots\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\n        \"include\",\n        \"only\"\n      ]\n    }\n  }\n};\nexport const delimiter: coreHttp.OperationQueryParameter = {\n  parameterPath: \"delimiter\",\n  mapper: {\n    required: true,\n    serializedName: \"delimiter\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const duration: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"duration\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-lease-duration\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const ifMatch: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"modifiedAccessConditions\",\n    \"ifMatch\"\n  ],\n  mapper: {\n    serializedName: \"If-Match\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const ifModifiedSince: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"modifiedAccessConditions\",\n    \"ifModifiedSince\"\n  ],\n  mapper: {\n    serializedName: \"If-Modified-Since\",\n    type: {\n      name: \"DateTimeRfc1123\"\n    }\n  }\n};\nexport const ifNoneMatch: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"modifiedAccessConditions\",\n    \"ifNoneMatch\"\n  ],\n  mapper: {\n    serializedName: \"If-None-Match\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const ifSequenceNumberEqualTo: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"sequenceNumberAccessConditions\",\n    \"ifSequenceNumberEqualTo\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-if-sequence-number-eq\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const ifSequenceNumberLessThan: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"sequenceNumberAccessConditions\",\n    \"ifSequenceNumberLessThan\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-if-sequence-number-lt\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const ifSequenceNumberLessThanOrEqualTo: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"sequenceNumberAccessConditions\",\n    \"ifSequenceNumberLessThanOrEqualTo\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-if-sequence-number-le\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const ifUnmodifiedSince: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"modifiedAccessConditions\",\n    \"ifUnmodifiedSince\"\n  ],\n  mapper: {\n    serializedName: \"If-Unmodified-Since\",\n    type: {\n      name: \"DateTimeRfc1123\"\n    }\n  }\n};\nexport const include0: coreHttp.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"include\"\n  ],\n  mapper: {\n    serializedName: \"include\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\n        \"metadata\"\n      ]\n    }\n  }\n};\nexport const include1: coreHttp.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"include\"\n  ],\n  mapper: {\n    serializedName: \"include\",\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"snapshots\",\n            \"metadata\",\n            \"uncommittedblobs\",\n            \"copy\",\n            \"deleted\"\n          ]\n        }\n      }\n    }\n  },\n  collectionFormat: coreHttp.QueryCollectionFormat.Csv\n};\nexport const leaseId0: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"leaseAccessConditions\",\n    \"leaseId\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-lease-id\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const leaseId1: coreHttp.OperationParameter = {\n  parameterPath: \"leaseId\",\n  mapper: {\n    required: true,\n    serializedName: \"x-ms-lease-id\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const listType: coreHttp.OperationQueryParameter = {\n  parameterPath: \"listType\",\n  mapper: {\n    required: true,\n    serializedName: \"blocklisttype\",\n    defaultValue: 'committed',\n    type: {\n      name: \"Enum\",\n      allowedValues: [\n        \"committed\",\n        \"uncommitted\",\n        \"all\"\n      ]\n    }\n  }\n};\nexport const marker: coreHttp.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"marker\"\n  ],\n  mapper: {\n    serializedName: \"marker\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const maxresults: coreHttp.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"maxresults\"\n  ],\n  mapper: {\n    serializedName: \"maxresults\",\n    constraints: {\n      InclusiveMinimum: 1\n    },\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const maxSize: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"appendPositionAccessConditions\",\n    \"maxSize\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-blob-condition-maxsize\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const metadata: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"metadata\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-meta\",\n    type: {\n      name: \"Dictionary\",\n      value: {\n        type: {\n          name: \"String\"\n        }\n      }\n    },\n    headerCollectionPrefix: \"x-ms-meta-\"\n  }\n};\nexport const nextPageLink: coreHttp.OperationURLParameter = {\n  parameterPath: \"nextPageLink\",\n  mapper: {\n    required: true,\n    serializedName: \"nextLink\",\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\nexport const pageWrite0: coreHttp.OperationParameter = {\n  parameterPath: \"pageWrite\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"x-ms-page-write\",\n    defaultValue: 'update',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const pageWrite1: coreHttp.OperationParameter = {\n  parameterPath: \"pageWrite\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"x-ms-page-write\",\n    defaultValue: 'clear',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const prefix: coreHttp.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"prefix\"\n  ],\n  mapper: {\n    serializedName: \"prefix\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const prevsnapshot: coreHttp.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"prevsnapshot\"\n  ],\n  mapper: {\n    serializedName: \"prevsnapshot\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const proposedLeaseId0: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"proposedLeaseId\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-proposed-lease-id\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const proposedLeaseId1: coreHttp.OperationParameter = {\n  parameterPath: \"proposedLeaseId\",\n  mapper: {\n    required: true,\n    serializedName: \"x-ms-proposed-lease-id\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const range: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"range\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-range\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const rangeGetContentMD5: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"rangeGetContentMD5\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-range-get-content-md5\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\nexport const requestId: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"requestId\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-client-request-id\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const restype0: coreHttp.OperationQueryParameter = {\n  parameterPath: \"restype\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"restype\",\n    defaultValue: 'service',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const restype1: coreHttp.OperationQueryParameter = {\n  parameterPath: \"restype\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"restype\",\n    defaultValue: 'account',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const restype2: coreHttp.OperationQueryParameter = {\n  parameterPath: \"restype\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"restype\",\n    defaultValue: 'container',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const sequenceNumberAction: coreHttp.OperationParameter = {\n  parameterPath: \"sequenceNumberAction\",\n  mapper: {\n    required: true,\n    serializedName: \"x-ms-sequence-number-action\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\n        \"max\",\n        \"update\",\n        \"increment\"\n      ]\n    }\n  }\n};\nexport const snapshot: coreHttp.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"snapshot\"\n  ],\n  mapper: {\n    serializedName: \"snapshot\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const sourceContentMD5: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"sourceContentMD5\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-source-content-md5\",\n    type: {\n      name: \"ByteArray\"\n    }\n  }\n};\nexport const sourceIfMatch: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"sourceModifiedAccessConditions\",\n    \"sourceIfMatch\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-source-if-match\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const sourceIfModifiedSince: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"sourceModifiedAccessConditions\",\n    \"sourceIfModifiedSince\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-source-if-modified-since\",\n    type: {\n      name: \"DateTimeRfc1123\"\n    }\n  }\n};\nexport const sourceIfNoneMatch: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"sourceModifiedAccessConditions\",\n    \"sourceIfNoneMatch\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-source-if-none-match\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const sourceIfUnmodifiedSince: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"sourceModifiedAccessConditions\",\n    \"sourceIfUnmodifiedSince\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-source-if-unmodified-since\",\n    type: {\n      name: \"DateTimeRfc1123\"\n    }\n  }\n};\nexport const sourceRange: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"sourceRange\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-source-range\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const sourceUrl: coreHttp.OperationParameter = {\n  parameterPath: \"sourceUrl\",\n  mapper: {\n    required: true,\n    serializedName: \"x-ms-copy-source\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const tier: coreHttp.OperationParameter = {\n  parameterPath: \"tier\",\n  mapper: {\n    required: true,\n    serializedName: \"x-ms-access-tier\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const timeout: coreHttp.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"timeout\"\n  ],\n  mapper: {\n    serializedName: \"timeout\",\n    constraints: {\n      InclusiveMinimum: 0\n    },\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const transactionalContentMD5: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"transactionalContentMD5\"\n  ],\n  mapper: {\n    serializedName: \"Content-MD5\",\n    type: {\n      name: \"ByteArray\"\n    }\n  }\n};\nexport const url: coreHttp.OperationURLParameter = {\n  parameterPath: \"url\",\n  mapper: {\n    required: true,\n    serializedName: \"url\",\n    defaultValue: '',\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\nexport const version: coreHttp.OperationParameter = {\n  parameterPath: \"version\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"x-ms-version\",\n    defaultValue: '2018-03-28',\n    type: {\n      name: \"String\"\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/serviceMappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\n\n/** Class representing a Service. */\nexport class Service {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Create a Service.\n   * @param {StorageClientContext} client Reference to the service client.\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Sets properties for a storage account's Blob service endpoint, including properties for Storage\n   * Analytics and CORS (Cross-Origin Resource Sharing) rules\n   * @param storageServiceProperties The StorageService properties.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ServiceSetPropertiesResponse>\n   */\n  setProperties(storageServiceProperties: Models.StorageServiceProperties, options?: Models.ServiceSetPropertiesOptionalParams): Promise<Models.ServiceSetPropertiesResponse>;\n  /**\n   * @param storageServiceProperties The StorageService properties.\n   * @param callback The callback\n   */\n  setProperties(storageServiceProperties: Models.StorageServiceProperties, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param storageServiceProperties The StorageService properties.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setProperties(storageServiceProperties: Models.StorageServiceProperties, options: Models.ServiceSetPropertiesOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  setProperties(storageServiceProperties: Models.StorageServiceProperties, options?: Models.ServiceSetPropertiesOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.ServiceSetPropertiesResponse> {\n    return this.client.sendOperationRequest(\n      {\n        storageServiceProperties,\n        options\n      },\n      setPropertiesOperationSpec,\n      callback) as Promise<Models.ServiceSetPropertiesResponse>;\n  }\n\n  /**\n   * gets the properties of a storage account's Blob service, including properties for Storage\n   * Analytics and CORS (Cross-Origin Resource Sharing) rules.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ServiceGetPropertiesResponse>\n   */\n  getProperties(options?: Models.ServiceGetPropertiesOptionalParams): Promise<Models.ServiceGetPropertiesResponse>;\n  /**\n   * @param callback The callback\n   */\n  getProperties(callback: coreHttp.ServiceCallback<Models.StorageServiceProperties>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getProperties(options: Models.ServiceGetPropertiesOptionalParams, callback: coreHttp.ServiceCallback<Models.StorageServiceProperties>): void;\n  getProperties(options?: Models.ServiceGetPropertiesOptionalParams | coreHttp.ServiceCallback<Models.StorageServiceProperties>, callback?: coreHttp.ServiceCallback<Models.StorageServiceProperties>): Promise<Models.ServiceGetPropertiesResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      getPropertiesOperationSpec,\n      callback) as Promise<Models.ServiceGetPropertiesResponse>;\n  }\n\n  /**\n   * Retrieves statistics related to replication for the Blob service. It is only available on the\n   * secondary location endpoint when read-access geo-redundant replication is enabled for the\n   * storage account.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ServiceGetStatisticsResponse>\n   */\n  getStatistics(options?: Models.ServiceGetStatisticsOptionalParams): Promise<Models.ServiceGetStatisticsResponse>;\n  /**\n   * @param callback The callback\n   */\n  getStatistics(callback: coreHttp.ServiceCallback<Models.StorageServiceStats>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getStatistics(options: Models.ServiceGetStatisticsOptionalParams, callback: coreHttp.ServiceCallback<Models.StorageServiceStats>): void;\n  getStatistics(options?: Models.ServiceGetStatisticsOptionalParams | coreHttp.ServiceCallback<Models.StorageServiceStats>, callback?: coreHttp.ServiceCallback<Models.StorageServiceStats>): Promise<Models.ServiceGetStatisticsResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      getStatisticsOperationSpec,\n      callback) as Promise<Models.ServiceGetStatisticsResponse>;\n  }\n\n  /**\n   * The List Containers Segment operation returns a list of the containers under the specified\n   * account\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ServiceListContainersSegmentResponse>\n   */\n  listContainersSegment(options?: Models.ServiceListContainersSegmentOptionalParams): Promise<Models.ServiceListContainersSegmentResponse>;\n  /**\n   * @param callback The callback\n   */\n  listContainersSegment(callback: coreHttp.ServiceCallback<Models.ListContainersSegmentResponse>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  listContainersSegment(options: Models.ServiceListContainersSegmentOptionalParams, callback: coreHttp.ServiceCallback<Models.ListContainersSegmentResponse>): void;\n  listContainersSegment(options?: Models.ServiceListContainersSegmentOptionalParams | coreHttp.ServiceCallback<Models.ListContainersSegmentResponse>, callback?: coreHttp.ServiceCallback<Models.ListContainersSegmentResponse>): Promise<Models.ServiceListContainersSegmentResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      listContainersSegmentOperationSpec,\n      callback) as Promise<Models.ServiceListContainersSegmentResponse>;\n  }\n\n  /**\n   * Returns the sku name and account kind\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ServiceGetAccountInfoResponse>\n   */\n  getAccountInfo(options?: coreHttp.RequestOptionsBase): Promise<Models.ServiceGetAccountInfoResponse>;\n  /**\n   * @param callback The callback\n   */\n  getAccountInfo(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getAccountInfo(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;\n  getAccountInfo(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.ServiceGetAccountInfoResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      getAccountInfoOperationSpec,\n      callback) as Promise<Models.ServiceGetAccountInfoResponse>;\n  }\n\n  /**\n   * The List Containers Segment operation returns a list of the containers under the specified\n   * account\n   * @param nextPageLink The NextLink from the previous successful call to List operation.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ServiceListContainersSegmentResponse>\n   */\n  listContainersSegmentNext(nextPageLink: string, options?: Models.ServiceListContainersSegmentNextOptionalParams): Promise<Models.ServiceListContainersSegmentResponse>;\n  /**\n   * @param nextPageLink The NextLink from the previous successful call to List operation.\n   * @param callback The callback\n   */\n  listContainersSegmentNext(nextPageLink: string, callback: coreHttp.ServiceCallback<Models.ListContainersSegmentResponse>): void;\n  /**\n   * @param nextPageLink The NextLink from the previous successful call to List operation.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  listContainersSegmentNext(nextPageLink: string, options: Models.ServiceListContainersSegmentNextOptionalParams, callback: coreHttp.ServiceCallback<Models.ListContainersSegmentResponse>): void;\n  listContainersSegmentNext(nextPageLink: string, options?: Models.ServiceListContainersSegmentNextOptionalParams | coreHttp.ServiceCallback<Models.ListContainersSegmentResponse>, callback?: coreHttp.ServiceCallback<Models.ListContainersSegmentResponse>): Promise<Models.ServiceListContainersSegmentResponse> {\n    return this.client.sendOperationRequest(\n      {\n        nextPageLink,\n        options\n      },\n      listContainersSegmentNextOperationSpec,\n      callback) as Promise<Models.ServiceListContainersSegmentResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new coreHttp.Serializer(Mappers, true);\nconst setPropertiesOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.restype0,\n    Parameters.comp0\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId\n  ],\n  requestBody: {\n    parameterPath: \"storageServiceProperties\",\n    mapper: {\n      ...Mappers.StorageServiceProperties,\n      required: true\n    }\n  },\n  contentType: \"application/xml; charset=utf-8\",\n  responses: {\n    202: {\n      headersMapper: Mappers.ServiceSetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst getPropertiesOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.restype0,\n    Parameters.comp0\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.StorageServiceProperties,\n      headersMapper: Mappers.ServiceGetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst getStatisticsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.restype0,\n    Parameters.comp1\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.StorageServiceStats,\n      headersMapper: Mappers.ServiceGetStatisticsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst listContainersSegmentOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.prefix,\n    Parameters.marker,\n    Parameters.maxresults,\n    Parameters.include0,\n    Parameters.timeout,\n    Parameters.comp2\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListContainersSegmentResponse,\n      headersMapper: Mappers.ServiceListContainersSegmentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst getAccountInfoOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.restype1,\n    Parameters.comp0\n  ],\n  headerParameters: [\n    Parameters.version\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.ServiceGetAccountInfoHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst listContainersSegmentNextOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  baseUrl: \"{url}\",\n  path: \"{nextLink}\",\n  urlParameters: [\n    Parameters.nextPageLink\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListContainersSegmentResponse,\n      headersMapper: Mappers.ServiceListContainersSegmentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/containerMappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\n\n/** Class representing a Container. */\nexport class Container {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Create a Container.\n   * @param {StorageClientContext} client Reference to the service client.\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * creates a new container under the specified account. If the container with the same name already\n   * exists, the operation fails\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ContainerCreateResponse>\n   */\n  create(options?: Models.ContainerCreateOptionalParams): Promise<Models.ContainerCreateResponse>;\n  /**\n   * @param callback The callback\n   */\n  create(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  create(options: Models.ContainerCreateOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  create(options?: Models.ContainerCreateOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.ContainerCreateResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      createOperationSpec,\n      callback) as Promise<Models.ContainerCreateResponse>;\n  }\n\n  /**\n   * returns all user-defined metadata and system properties for the specified container. The data\n   * returned does not include the container's list of blobs\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ContainerGetPropertiesResponse>\n   */\n  getProperties(options?: Models.ContainerGetPropertiesOptionalParams): Promise<Models.ContainerGetPropertiesResponse>;\n  /**\n   * @param callback The callback\n   */\n  getProperties(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getProperties(options: Models.ContainerGetPropertiesOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  getProperties(options?: Models.ContainerGetPropertiesOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.ContainerGetPropertiesResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      getPropertiesOperationSpec,\n      callback) as Promise<Models.ContainerGetPropertiesResponse>;\n  }\n\n  /**\n   * operation marks the specified container for deletion. The container and any blobs contained\n   * within it are later deleted during garbage collection\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ContainerDeleteResponse>\n   */\n  deleteMethod(options?: Models.ContainerDeleteMethodOptionalParams): Promise<Models.ContainerDeleteResponse>;\n  /**\n   * @param callback The callback\n   */\n  deleteMethod(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteMethod(options: Models.ContainerDeleteMethodOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  deleteMethod(options?: Models.ContainerDeleteMethodOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.ContainerDeleteResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      deleteMethodOperationSpec,\n      callback) as Promise<Models.ContainerDeleteResponse>;\n  }\n\n  /**\n   * operation sets one or more user-defined name-value pairs for the specified container.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ContainerSetMetadataResponse>\n   */\n  setMetadata(options?: Models.ContainerSetMetadataOptionalParams): Promise<Models.ContainerSetMetadataResponse>;\n  /**\n   * @param callback The callback\n   */\n  setMetadata(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setMetadata(options: Models.ContainerSetMetadataOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  setMetadata(options?: Models.ContainerSetMetadataOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.ContainerSetMetadataResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      setMetadataOperationSpec,\n      callback) as Promise<Models.ContainerSetMetadataResponse>;\n  }\n\n  /**\n   * gets the permissions for the specified container. The permissions indicate whether container\n   * data may be accessed publicly.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ContainerGetAccessPolicyResponse>\n   */\n  getAccessPolicy(options?: Models.ContainerGetAccessPolicyOptionalParams): Promise<Models.ContainerGetAccessPolicyResponse>;\n  /**\n   * @param callback The callback\n   */\n  getAccessPolicy(callback: coreHttp.ServiceCallback<Models.SignedIdentifier[]>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getAccessPolicy(options: Models.ContainerGetAccessPolicyOptionalParams, callback: coreHttp.ServiceCallback<Models.SignedIdentifier[]>): void;\n  getAccessPolicy(options?: Models.ContainerGetAccessPolicyOptionalParams | coreHttp.ServiceCallback<Models.SignedIdentifier[]>, callback?: coreHttp.ServiceCallback<Models.SignedIdentifier[]>): Promise<Models.ContainerGetAccessPolicyResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      getAccessPolicyOperationSpec,\n      callback) as Promise<Models.ContainerGetAccessPolicyResponse>;\n  }\n\n  /**\n   * sets the permissions for the specified container. The permissions indicate whether blobs in a\n   * container may be accessed publicly.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ContainerSetAccessPolicyResponse>\n   */\n  setAccessPolicy(options?: Models.ContainerSetAccessPolicyOptionalParams): Promise<Models.ContainerSetAccessPolicyResponse>;\n  /**\n   * @param callback The callback\n   */\n  setAccessPolicy(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setAccessPolicy(options: Models.ContainerSetAccessPolicyOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  setAccessPolicy(options?: Models.ContainerSetAccessPolicyOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.ContainerSetAccessPolicyResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      setAccessPolicyOperationSpec,\n      callback) as Promise<Models.ContainerSetAccessPolicyResponse>;\n  }\n\n  /**\n   * [Update] establishes and manages a lock on a container for delete operations. The lock duration\n   * can be 15 to 60 seconds, or can be infinite\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ContainerAcquireLeaseResponse>\n   */\n  acquireLease(options?: Models.ContainerAcquireLeaseOptionalParams): Promise<Models.ContainerAcquireLeaseResponse>;\n  /**\n   * @param callback The callback\n   */\n  acquireLease(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  acquireLease(options: Models.ContainerAcquireLeaseOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  acquireLease(options?: Models.ContainerAcquireLeaseOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.ContainerAcquireLeaseResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      acquireLeaseOperationSpec,\n      callback) as Promise<Models.ContainerAcquireLeaseResponse>;\n  }\n\n  /**\n   * [Update] establishes and manages a lock on a container for delete operations. The lock duration\n   * can be 15 to 60 seconds, or can be infinite\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ContainerReleaseLeaseResponse>\n   */\n  releaseLease(leaseId: string, options?: Models.ContainerReleaseLeaseOptionalParams): Promise<Models.ContainerReleaseLeaseResponse>;\n  /**\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param callback The callback\n   */\n  releaseLease(leaseId: string, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  releaseLease(leaseId: string, options: Models.ContainerReleaseLeaseOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  releaseLease(leaseId: string, options?: Models.ContainerReleaseLeaseOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.ContainerReleaseLeaseResponse> {\n    return this.client.sendOperationRequest(\n      {\n        leaseId,\n        options\n      },\n      releaseLeaseOperationSpec,\n      callback) as Promise<Models.ContainerReleaseLeaseResponse>;\n  }\n\n  /**\n   * [Update] establishes and manages a lock on a container for delete operations. The lock duration\n   * can be 15 to 60 seconds, or can be infinite\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ContainerRenewLeaseResponse>\n   */\n  renewLease(leaseId: string, options?: Models.ContainerRenewLeaseOptionalParams): Promise<Models.ContainerRenewLeaseResponse>;\n  /**\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param callback The callback\n   */\n  renewLease(leaseId: string, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  renewLease(leaseId: string, options: Models.ContainerRenewLeaseOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  renewLease(leaseId: string, options?: Models.ContainerRenewLeaseOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.ContainerRenewLeaseResponse> {\n    return this.client.sendOperationRequest(\n      {\n        leaseId,\n        options\n      },\n      renewLeaseOperationSpec,\n      callback) as Promise<Models.ContainerRenewLeaseResponse>;\n  }\n\n  /**\n   * [Update] establishes and manages a lock on a container for delete operations. The lock duration\n   * can be 15 to 60 seconds, or can be infinite\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ContainerBreakLeaseResponse>\n   */\n  breakLease(options?: Models.ContainerBreakLeaseOptionalParams): Promise<Models.ContainerBreakLeaseResponse>;\n  /**\n   * @param callback The callback\n   */\n  breakLease(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  breakLease(options: Models.ContainerBreakLeaseOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  breakLease(options?: Models.ContainerBreakLeaseOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.ContainerBreakLeaseResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      breakLeaseOperationSpec,\n      callback) as Promise<Models.ContainerBreakLeaseResponse>;\n  }\n\n  /**\n   * [Update] establishes and manages a lock on a container for delete operations. The lock duration\n   * can be 15 to 60 seconds, or can be infinite\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400\n   * (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor\n   * (String) for a list of valid GUID string formats.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ContainerChangeLeaseResponse>\n   */\n  changeLease(leaseId: string, proposedLeaseId: string, options?: Models.ContainerChangeLeaseOptionalParams): Promise<Models.ContainerChangeLeaseResponse>;\n  /**\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400\n   * (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor\n   * (String) for a list of valid GUID string formats.\n   * @param callback The callback\n   */\n  changeLease(leaseId: string, proposedLeaseId: string, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400\n   * (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor\n   * (String) for a list of valid GUID string formats.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  changeLease(leaseId: string, proposedLeaseId: string, options: Models.ContainerChangeLeaseOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  changeLease(leaseId: string, proposedLeaseId: string, options?: Models.ContainerChangeLeaseOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.ContainerChangeLeaseResponse> {\n    return this.client.sendOperationRequest(\n      {\n        leaseId,\n        proposedLeaseId,\n        options\n      },\n      changeLeaseOperationSpec,\n      callback) as Promise<Models.ContainerChangeLeaseResponse>;\n  }\n\n  /**\n   * [Update] The List Blobs operation returns a list of the blobs under the specified container\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ContainerListBlobFlatSegmentResponse>\n   */\n  listBlobFlatSegment(options?: Models.ContainerListBlobFlatSegmentOptionalParams): Promise<Models.ContainerListBlobFlatSegmentResponse>;\n  /**\n   * @param callback The callback\n   */\n  listBlobFlatSegment(callback: coreHttp.ServiceCallback<Models.ListBlobsFlatSegmentResponse>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  listBlobFlatSegment(options: Models.ContainerListBlobFlatSegmentOptionalParams, callback: coreHttp.ServiceCallback<Models.ListBlobsFlatSegmentResponse>): void;\n  listBlobFlatSegment(options?: Models.ContainerListBlobFlatSegmentOptionalParams | coreHttp.ServiceCallback<Models.ListBlobsFlatSegmentResponse>, callback?: coreHttp.ServiceCallback<Models.ListBlobsFlatSegmentResponse>): Promise<Models.ContainerListBlobFlatSegmentResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      listBlobFlatSegmentOperationSpec,\n      callback) as Promise<Models.ContainerListBlobFlatSegmentResponse>;\n  }\n\n  /**\n   * [Update] The List Blobs operation returns a list of the blobs under the specified container\n   * @param delimiter When the request includes this parameter, the operation returns a BlobPrefix\n   * element in the response body that acts as a placeholder for all blobs whose names begin with the\n   * same substring up to the appearance of the delimiter character. The delimiter may be a single\n   * character or a string.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ContainerListBlobHierarchySegmentResponse>\n   */\n  listBlobHierarchySegment(delimiter: string, options?: Models.ContainerListBlobHierarchySegmentOptionalParams): Promise<Models.ContainerListBlobHierarchySegmentResponse>;\n  /**\n   * @param delimiter When the request includes this parameter, the operation returns a BlobPrefix\n   * element in the response body that acts as a placeholder for all blobs whose names begin with the\n   * same substring up to the appearance of the delimiter character. The delimiter may be a single\n   * character or a string.\n   * @param callback The callback\n   */\n  listBlobHierarchySegment(delimiter: string, callback: coreHttp.ServiceCallback<Models.ListBlobsHierarchySegmentResponse>): void;\n  /**\n   * @param delimiter When the request includes this parameter, the operation returns a BlobPrefix\n   * element in the response body that acts as a placeholder for all blobs whose names begin with the\n   * same substring up to the appearance of the delimiter character. The delimiter may be a single\n   * character or a string.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  listBlobHierarchySegment(delimiter: string, options: Models.ContainerListBlobHierarchySegmentOptionalParams, callback: coreHttp.ServiceCallback<Models.ListBlobsHierarchySegmentResponse>): void;\n  listBlobHierarchySegment(delimiter: string, options?: Models.ContainerListBlobHierarchySegmentOptionalParams | coreHttp.ServiceCallback<Models.ListBlobsHierarchySegmentResponse>, callback?: coreHttp.ServiceCallback<Models.ListBlobsHierarchySegmentResponse>): Promise<Models.ContainerListBlobHierarchySegmentResponse> {\n    return this.client.sendOperationRequest(\n      {\n        delimiter,\n        options\n      },\n      listBlobHierarchySegmentOperationSpec,\n      callback) as Promise<Models.ContainerListBlobHierarchySegmentResponse>;\n  }\n\n  /**\n   * Returns the sku name and account kind\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ContainerGetAccountInfoResponse>\n   */\n  getAccountInfo(options?: coreHttp.RequestOptionsBase): Promise<Models.ContainerGetAccountInfoResponse>;\n  /**\n   * @param callback The callback\n   */\n  getAccountInfo(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getAccountInfo(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;\n  getAccountInfo(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.ContainerGetAccountInfoResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      getAccountInfoOperationSpec,\n      callback) as Promise<Models.ContainerGetAccountInfoResponse>;\n  }\n\n  /**\n   * [Update] The List Blobs operation returns a list of the blobs under the specified container\n   * @param nextPageLink The NextLink from the previous successful call to List operation.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ContainerListBlobFlatSegmentResponse>\n   */\n  listBlobFlatSegmentNext(nextPageLink: string, options?: Models.ContainerListBlobFlatSegmentNextOptionalParams): Promise<Models.ContainerListBlobFlatSegmentResponse>;\n  /**\n   * @param nextPageLink The NextLink from the previous successful call to List operation.\n   * @param callback The callback\n   */\n  listBlobFlatSegmentNext(nextPageLink: string, callback: coreHttp.ServiceCallback<Models.ListBlobsFlatSegmentResponse>): void;\n  /**\n   * @param nextPageLink The NextLink from the previous successful call to List operation.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  listBlobFlatSegmentNext(nextPageLink: string, options: Models.ContainerListBlobFlatSegmentNextOptionalParams, callback: coreHttp.ServiceCallback<Models.ListBlobsFlatSegmentResponse>): void;\n  listBlobFlatSegmentNext(nextPageLink: string, options?: Models.ContainerListBlobFlatSegmentNextOptionalParams | coreHttp.ServiceCallback<Models.ListBlobsFlatSegmentResponse>, callback?: coreHttp.ServiceCallback<Models.ListBlobsFlatSegmentResponse>): Promise<Models.ContainerListBlobFlatSegmentResponse> {\n    return this.client.sendOperationRequest(\n      {\n        nextPageLink,\n        options\n      },\n      listBlobFlatSegmentNextOperationSpec,\n      callback) as Promise<Models.ContainerListBlobFlatSegmentResponse>;\n  }\n\n  /**\n   * [Update] The List Blobs operation returns a list of the blobs under the specified container\n   * @param nextPageLink The NextLink from the previous successful call to List operation.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ContainerListBlobHierarchySegmentResponse>\n   */\n  listBlobHierarchySegmentNext(nextPageLink: string, options?: Models.ContainerListBlobHierarchySegmentNextOptionalParams): Promise<Models.ContainerListBlobHierarchySegmentResponse>;\n  /**\n   * @param nextPageLink The NextLink from the previous successful call to List operation.\n   * @param callback The callback\n   */\n  listBlobHierarchySegmentNext(nextPageLink: string, callback: coreHttp.ServiceCallback<Models.ListBlobsHierarchySegmentResponse>): void;\n  /**\n   * @param nextPageLink The NextLink from the previous successful call to List operation.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  listBlobHierarchySegmentNext(nextPageLink: string, options: Models.ContainerListBlobHierarchySegmentNextOptionalParams, callback: coreHttp.ServiceCallback<Models.ListBlobsHierarchySegmentResponse>): void;\n  listBlobHierarchySegmentNext(nextPageLink: string, options?: Models.ContainerListBlobHierarchySegmentNextOptionalParams | coreHttp.ServiceCallback<Models.ListBlobsHierarchySegmentResponse>, callback?: coreHttp.ServiceCallback<Models.ListBlobsHierarchySegmentResponse>): Promise<Models.ContainerListBlobHierarchySegmentResponse> {\n    return this.client.sendOperationRequest(\n      {\n        nextPageLink,\n        options\n      },\n      listBlobHierarchySegmentNextOperationSpec,\n      callback) as Promise<Models.ContainerListBlobHierarchySegmentResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new coreHttp.Serializer(Mappers, true);\nconst createOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.restype2\n  ],\n  headerParameters: [\n    Parameters.metadata,\n    Parameters.access,\n    Parameters.version,\n    Parameters.requestId\n  ],\n  responses: {\n    201: {\n      headersMapper: Mappers.ContainerCreateHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst getPropertiesOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{containerName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.restype2\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId0\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerGetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst deleteMethodOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"{containerName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.restype2\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId0,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince\n  ],\n  responses: {\n    202: {\n      headersMapper: Mappers.ContainerDeleteHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst setMetadataOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.restype2,\n    Parameters.comp3\n  ],\n  headerParameters: [\n    Parameters.metadata,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId0,\n    Parameters.ifModifiedSince\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerSetMetadataHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst getAccessPolicyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{containerName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.restype2,\n    Parameters.comp4\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId0\n  ],\n  responses: {\n    200: {\n      bodyMapper: {\n        xmlElementName: \"SignedIdentifier\",\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SignedIdentifier\"\n            }\n          }\n        }\n      },\n      headersMapper: Mappers.ContainerGetAccessPolicyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst setAccessPolicyOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.restype2,\n    Parameters.comp4\n  ],\n  headerParameters: [\n    Parameters.access,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId0,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince\n  ],\n  requestBody: {\n    parameterPath: [\n      \"options\",\n      \"containerAcl\"\n    ],\n    mapper: {\n      xmlName: \"SignedIdentifiers\",\n      xmlElementName: \"SignedIdentifier\",\n      serializedName: \"containerAcl\",\n      type: {\n        name: \"Sequence\",\n        element: {\n          type: {\n            name: \"Composite\",\n            className: \"SignedIdentifier\"\n          }\n        }\n      }\n    }\n  },\n  contentType: \"application/xml; charset=utf-8\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerSetAccessPolicyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst acquireLeaseOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp5,\n    Parameters.restype2\n  ],\n  headerParameters: [\n    Parameters.duration,\n    Parameters.proposedLeaseId0,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.action0,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince\n  ],\n  responses: {\n    201: {\n      headersMapper: Mappers.ContainerAcquireLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst releaseLeaseOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp5,\n    Parameters.restype2\n  ],\n  headerParameters: [\n    Parameters.leaseId1,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.action1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerReleaseLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst renewLeaseOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp5,\n    Parameters.restype2\n  ],\n  headerParameters: [\n    Parameters.leaseId1,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.action2,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerRenewLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst breakLeaseOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp5,\n    Parameters.restype2\n  ],\n  headerParameters: [\n    Parameters.breakPeriod,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.action3,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince\n  ],\n  responses: {\n    202: {\n      headersMapper: Mappers.ContainerBreakLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst changeLeaseOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp5,\n    Parameters.restype2\n  ],\n  headerParameters: [\n    Parameters.leaseId1,\n    Parameters.proposedLeaseId1,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.action4,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerChangeLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst listBlobFlatSegmentOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{containerName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.prefix,\n    Parameters.marker,\n    Parameters.maxresults,\n    Parameters.include1,\n    Parameters.timeout,\n    Parameters.restype2,\n    Parameters.comp2\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListBlobsFlatSegmentResponse,\n      headersMapper: Mappers.ContainerListBlobFlatSegmentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst listBlobHierarchySegmentOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{containerName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.prefix,\n    Parameters.delimiter,\n    Parameters.marker,\n    Parameters.maxresults,\n    Parameters.include1,\n    Parameters.timeout,\n    Parameters.restype2,\n    Parameters.comp2\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListBlobsHierarchySegmentResponse,\n      headersMapper: Mappers.ContainerListBlobHierarchySegmentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst getAccountInfoOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{containerName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.restype1,\n    Parameters.comp0\n  ],\n  headerParameters: [\n    Parameters.version\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerGetAccountInfoHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst listBlobFlatSegmentNextOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  baseUrl: \"{url}\",\n  path: \"{nextLink}\",\n  urlParameters: [\n    Parameters.nextPageLink\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListBlobsFlatSegmentResponse,\n      headersMapper: Mappers.ContainerListBlobFlatSegmentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst listBlobHierarchySegmentNextOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  baseUrl: \"{url}\",\n  path: \"{nextLink}\",\n  urlParameters: [\n    Parameters.nextPageLink\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListBlobsHierarchySegmentResponse,\n      headersMapper: Mappers.ContainerListBlobHierarchySegmentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/blobMappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\n\n/** Class representing a Blob. */\nexport class Blob {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Create a Blob.\n   * @param {StorageClientContext} client Reference to the service client.\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * The Download operation reads or downloads a blob from the system, including its metadata and\n   * properties. You can also call Download to read a snapshot.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlobDownloadResponse>\n   */\n  download(options?: Models.BlobDownloadOptionalParams): Promise<Models.BlobDownloadResponse>;\n  /**\n   * @param callback The callback\n   */\n  download(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  download(options: Models.BlobDownloadOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  download(options?: Models.BlobDownloadOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.BlobDownloadResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      downloadOperationSpec,\n      callback) as Promise<Models.BlobDownloadResponse>;\n  }\n\n  /**\n   * The Get Properties operation returns all user-defined metadata, standard HTTP properties, and\n   * system properties for the blob. It does not return the content of the blob.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlobGetPropertiesResponse>\n   */\n  getProperties(options?: Models.BlobGetPropertiesOptionalParams): Promise<Models.BlobGetPropertiesResponse>;\n  /**\n   * @param callback The callback\n   */\n  getProperties(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getProperties(options: Models.BlobGetPropertiesOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  getProperties(options?: Models.BlobGetPropertiesOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.BlobGetPropertiesResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      getPropertiesOperationSpec,\n      callback) as Promise<Models.BlobGetPropertiesResponse>;\n  }\n\n  /**\n   * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is\n   * permanently removed from the storage account. If the storage account's soft delete feature is\n   * enabled, then, when a blob is deleted, it is marked for deletion and becomes inaccessible\n   * immediately. However, the blob service retains the blob or snapshot for the number of days\n   * specified by the DeleteRetentionPolicy section of [Storage service properties]\n   * (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data\n   * is permanently removed from the storage account. Note that you continue to be charged for the\n   * soft-deleted blob's storage until it is permanently removed. Use the List Blobs API and specify\n   * the \"include=deleted\" query parameter to discover which blobs and snapshots have been soft\n   * deleted. You can then use the Undelete Blob API to restore a soft-deleted blob. All other\n   * operations on a soft-deleted blob or snapshot causes the service to return an HTTP status code\n   * of 404 (ResourceNotFound).\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlobDeleteResponse>\n   */\n  deleteMethod(options?: Models.BlobDeleteMethodOptionalParams): Promise<Models.BlobDeleteResponse>;\n  /**\n   * @param callback The callback\n   */\n  deleteMethod(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteMethod(options: Models.BlobDeleteMethodOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  deleteMethod(options?: Models.BlobDeleteMethodOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.BlobDeleteResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      deleteMethodOperationSpec,\n      callback) as Promise<Models.BlobDeleteResponse>;\n  }\n\n  /**\n   * Undelete a blob that was previously soft deleted\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlobUndeleteResponse>\n   */\n  undelete(options?: Models.BlobUndeleteOptionalParams): Promise<Models.BlobUndeleteResponse>;\n  /**\n   * @param callback The callback\n   */\n  undelete(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  undelete(options: Models.BlobUndeleteOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  undelete(options?: Models.BlobUndeleteOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.BlobUndeleteResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      undeleteOperationSpec,\n      callback) as Promise<Models.BlobUndeleteResponse>;\n  }\n\n  /**\n   * The Set HTTP Headers operation sets system properties on the blob\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlobSetHTTPHeadersResponse>\n   */\n  setHTTPHeaders(options?: Models.BlobSetHTTPHeadersOptionalParams): Promise<Models.BlobSetHTTPHeadersResponse>;\n  /**\n   * @param callback The callback\n   */\n  setHTTPHeaders(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setHTTPHeaders(options: Models.BlobSetHTTPHeadersOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  setHTTPHeaders(options?: Models.BlobSetHTTPHeadersOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.BlobSetHTTPHeadersResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      setHTTPHeadersOperationSpec,\n      callback) as Promise<Models.BlobSetHTTPHeadersResponse>;\n  }\n\n  /**\n   * The Set Blob Metadata operation sets user-defined metadata for the specified blob as one or more\n   * name-value pairs\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlobSetMetadataResponse>\n   */\n  setMetadata(options?: Models.BlobSetMetadataOptionalParams): Promise<Models.BlobSetMetadataResponse>;\n  /**\n   * @param callback The callback\n   */\n  setMetadata(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setMetadata(options: Models.BlobSetMetadataOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  setMetadata(options?: Models.BlobSetMetadataOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.BlobSetMetadataResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      setMetadataOperationSpec,\n      callback) as Promise<Models.BlobSetMetadataResponse>;\n  }\n\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlobAcquireLeaseResponse>\n   */\n  acquireLease(options?: Models.BlobAcquireLeaseOptionalParams): Promise<Models.BlobAcquireLeaseResponse>;\n  /**\n   * @param callback The callback\n   */\n  acquireLease(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  acquireLease(options: Models.BlobAcquireLeaseOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  acquireLease(options?: Models.BlobAcquireLeaseOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.BlobAcquireLeaseResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      acquireLeaseOperationSpec,\n      callback) as Promise<Models.BlobAcquireLeaseResponse>;\n  }\n\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlobReleaseLeaseResponse>\n   */\n  releaseLease(leaseId: string, options?: Models.BlobReleaseLeaseOptionalParams): Promise<Models.BlobReleaseLeaseResponse>;\n  /**\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param callback The callback\n   */\n  releaseLease(leaseId: string, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  releaseLease(leaseId: string, options: Models.BlobReleaseLeaseOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  releaseLease(leaseId: string, options?: Models.BlobReleaseLeaseOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.BlobReleaseLeaseResponse> {\n    return this.client.sendOperationRequest(\n      {\n        leaseId,\n        options\n      },\n      releaseLeaseOperationSpec,\n      callback) as Promise<Models.BlobReleaseLeaseResponse>;\n  }\n\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlobRenewLeaseResponse>\n   */\n  renewLease(leaseId: string, options?: Models.BlobRenewLeaseOptionalParams): Promise<Models.BlobRenewLeaseResponse>;\n  /**\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param callback The callback\n   */\n  renewLease(leaseId: string, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  renewLease(leaseId: string, options: Models.BlobRenewLeaseOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  renewLease(leaseId: string, options?: Models.BlobRenewLeaseOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.BlobRenewLeaseResponse> {\n    return this.client.sendOperationRequest(\n      {\n        leaseId,\n        options\n      },\n      renewLeaseOperationSpec,\n      callback) as Promise<Models.BlobRenewLeaseResponse>;\n  }\n\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400\n   * (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor\n   * (String) for a list of valid GUID string formats.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlobChangeLeaseResponse>\n   */\n  changeLease(leaseId: string, proposedLeaseId: string, options?: Models.BlobChangeLeaseOptionalParams): Promise<Models.BlobChangeLeaseResponse>;\n  /**\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400\n   * (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor\n   * (String) for a list of valid GUID string formats.\n   * @param callback The callback\n   */\n  changeLease(leaseId: string, proposedLeaseId: string, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400\n   * (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor\n   * (String) for a list of valid GUID string formats.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  changeLease(leaseId: string, proposedLeaseId: string, options: Models.BlobChangeLeaseOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  changeLease(leaseId: string, proposedLeaseId: string, options?: Models.BlobChangeLeaseOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.BlobChangeLeaseResponse> {\n    return this.client.sendOperationRequest(\n      {\n        leaseId,\n        proposedLeaseId,\n        options\n      },\n      changeLeaseOperationSpec,\n      callback) as Promise<Models.BlobChangeLeaseResponse>;\n  }\n\n  /**\n   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n   * operations\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlobBreakLeaseResponse>\n   */\n  breakLease(options?: Models.BlobBreakLeaseOptionalParams): Promise<Models.BlobBreakLeaseResponse>;\n  /**\n   * @param callback The callback\n   */\n  breakLease(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  breakLease(options: Models.BlobBreakLeaseOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  breakLease(options?: Models.BlobBreakLeaseOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.BlobBreakLeaseResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      breakLeaseOperationSpec,\n      callback) as Promise<Models.BlobBreakLeaseResponse>;\n  }\n\n  /**\n   * The Create Snapshot operation creates a read-only snapshot of a blob\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlobCreateSnapshotResponse>\n   */\n  createSnapshot(options?: Models.BlobCreateSnapshotOptionalParams): Promise<Models.BlobCreateSnapshotResponse>;\n  /**\n   * @param callback The callback\n   */\n  createSnapshot(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  createSnapshot(options: Models.BlobCreateSnapshotOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  createSnapshot(options?: Models.BlobCreateSnapshotOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.BlobCreateSnapshotResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      createSnapshotOperationSpec,\n      callback) as Promise<Models.BlobCreateSnapshotResponse>;\n  }\n\n  /**\n   * The Start Copy From URL operation copies a blob or an internet resource to a new blob.\n   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up\n   * to 2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it\n   * would appear in a request URI. The source blob must either be public or must be authenticated\n   * via a shared access signature.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlobStartCopyFromURLResponse>\n   */\n  startCopyFromURL(copySource: string, options?: Models.BlobStartCopyFromURLOptionalParams): Promise<Models.BlobStartCopyFromURLResponse>;\n  /**\n   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up\n   * to 2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it\n   * would appear in a request URI. The source blob must either be public or must be authenticated\n   * via a shared access signature.\n   * @param callback The callback\n   */\n  startCopyFromURL(copySource: string, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up\n   * to 2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it\n   * would appear in a request URI. The source blob must either be public or must be authenticated\n   * via a shared access signature.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  startCopyFromURL(copySource: string, options: Models.BlobStartCopyFromURLOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  startCopyFromURL(copySource: string, options?: Models.BlobStartCopyFromURLOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.BlobStartCopyFromURLResponse> {\n    return this.client.sendOperationRequest(\n      {\n        copySource,\n        options\n      },\n      startCopyFromURLOperationSpec,\n      callback) as Promise<Models.BlobStartCopyFromURLResponse>;\n  }\n\n  /**\n   * The Abort Copy From URL operation aborts a pending Copy From URL operation, and leaves a\n   * destination blob with zero length and full metadata.\n   * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy Blob\n   * operation.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlobAbortCopyFromURLResponse>\n   */\n  abortCopyFromURL(copyId: string, options?: Models.BlobAbortCopyFromURLOptionalParams): Promise<Models.BlobAbortCopyFromURLResponse>;\n  /**\n   * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy Blob\n   * operation.\n   * @param callback The callback\n   */\n  abortCopyFromURL(copyId: string, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy Blob\n   * operation.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  abortCopyFromURL(copyId: string, options: Models.BlobAbortCopyFromURLOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  abortCopyFromURL(copyId: string, options?: Models.BlobAbortCopyFromURLOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.BlobAbortCopyFromURLResponse> {\n    return this.client.sendOperationRequest(\n      {\n        copyId,\n        options\n      },\n      abortCopyFromURLOperationSpec,\n      callback) as Promise<Models.BlobAbortCopyFromURLResponse>;\n  }\n\n  /**\n   * The Set Tier operation sets the tier on a blob. The operation is allowed on a page blob in a\n   * premium storage account and on a block blob in a blob storage account (locally redundant storage\n   * only). A premium page blob's tier determines the allowed size, IOPS, and bandwidth of the blob.\n   * A block blob's tier determines Hot/Cool/Archive storage type. This operation does not update the\n   * blob's ETag.\n   * @param tier Indicates the tier to be set on the blob. Possible values include: 'P4', 'P6',\n   * 'P10', 'P20', 'P30', 'P40', 'P50', 'Hot', 'Cool', 'Archive'\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlobSetTierResponse>\n   */\n  setTier(tier: Models.AccessTier, options?: Models.BlobSetTierOptionalParams): Promise<Models.BlobSetTierResponse>;\n  /**\n   * @param tier Indicates the tier to be set on the blob. Possible values include: 'P4', 'P6',\n   * 'P10', 'P20', 'P30', 'P40', 'P50', 'Hot', 'Cool', 'Archive'\n   * @param callback The callback\n   */\n  setTier(tier: Models.AccessTier, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param tier Indicates the tier to be set on the blob. Possible values include: 'P4', 'P6',\n   * 'P10', 'P20', 'P30', 'P40', 'P50', 'Hot', 'Cool', 'Archive'\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setTier(tier: Models.AccessTier, options: Models.BlobSetTierOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  setTier(tier: Models.AccessTier, options?: Models.BlobSetTierOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.BlobSetTierResponse> {\n    return this.client.sendOperationRequest(\n      {\n        tier,\n        options\n      },\n      setTierOperationSpec,\n      callback) as Promise<Models.BlobSetTierResponse>;\n  }\n\n  /**\n   * Returns the sku name and account kind\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlobGetAccountInfoResponse>\n   */\n  getAccountInfo(options?: coreHttp.RequestOptionsBase): Promise<Models.BlobGetAccountInfoResponse>;\n  /**\n   * @param callback The callback\n   */\n  getAccountInfo(callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getAccountInfo(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;\n  getAccountInfo(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.BlobGetAccountInfoResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      getAccountInfoOperationSpec,\n      callback) as Promise<Models.BlobGetAccountInfoResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new coreHttp.Serializer(Mappers, true);\nconst downloadOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.snapshot,\n    Parameters.timeout\n  ],\n  headerParameters: [\n    Parameters.range,\n    Parameters.rangeGetContentMD5,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId0,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  responses: {\n    200: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Stream\"\n        }\n      },\n      headersMapper: Mappers.BlobDownloadHeaders\n    },\n    206: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Stream\"\n        }\n      },\n      headersMapper: Mappers.BlobDownloadHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst getPropertiesOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"HEAD\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.snapshot,\n    Parameters.timeout\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId0,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobGetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst deleteMethodOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.snapshot,\n    Parameters.timeout\n  ],\n  headerParameters: [\n    Parameters.deleteSnapshots,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId0,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  responses: {\n    202: {\n      headersMapper: Mappers.BlobDeleteHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst undeleteOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp6\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobUndeleteHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst setHTTPHeadersOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp0\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.blobCacheControl,\n    Parameters.blobContentType,\n    Parameters.blobContentMD5,\n    Parameters.blobContentEncoding,\n    Parameters.blobContentLanguage,\n    Parameters.blobContentDisposition,\n    Parameters.leaseId0,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetHTTPHeadersHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst setMetadataOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp3\n  ],\n  headerParameters: [\n    Parameters.metadata,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId0,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetMetadataHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst acquireLeaseOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp5\n  ],\n  headerParameters: [\n    Parameters.duration,\n    Parameters.proposedLeaseId0,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.action0,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  responses: {\n    201: {\n      headersMapper: Mappers.BlobAcquireLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst releaseLeaseOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp5\n  ],\n  headerParameters: [\n    Parameters.leaseId1,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.action1,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobReleaseLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst renewLeaseOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp5\n  ],\n  headerParameters: [\n    Parameters.leaseId1,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.action2,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobRenewLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst changeLeaseOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp5\n  ],\n  headerParameters: [\n    Parameters.leaseId1,\n    Parameters.proposedLeaseId1,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.action4,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobChangeLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst breakLeaseOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp5\n  ],\n  headerParameters: [\n    Parameters.breakPeriod,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.action3,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  responses: {\n    202: {\n      headersMapper: Mappers.BlobBreakLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst createSnapshotOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp7\n  ],\n  headerParameters: [\n    Parameters.metadata,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.leaseId0\n  ],\n  responses: {\n    201: {\n      headersMapper: Mappers.BlobCreateSnapshotHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst startCopyFromURLOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout\n  ],\n  headerParameters: [\n    Parameters.metadata,\n    Parameters.copySource,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.sourceIfModifiedSince,\n    Parameters.sourceIfUnmodifiedSince,\n    Parameters.sourceIfMatch,\n    Parameters.sourceIfNoneMatch,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.leaseId0\n  ],\n  responses: {\n    202: {\n      headersMapper: Mappers.BlobStartCopyFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst abortCopyFromURLOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.copyId,\n    Parameters.timeout,\n    Parameters.comp8\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.copyActionAbortConstant,\n    Parameters.leaseId0\n  ],\n  responses: {\n    204: {\n      headersMapper: Mappers.BlobAbortCopyFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst setTierOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp9\n  ],\n  headerParameters: [\n    Parameters.tier,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId0\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobSetTierHeaders\n    },\n    202: {\n      headersMapper: Mappers.BlobSetTierHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst getAccountInfoOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{containerName}/{blobName}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.restype1,\n    Parameters.comp0\n  ],\n  headerParameters: [\n    Parameters.version\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.BlobGetAccountInfoHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/pageBlobMappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\n\n/** Class representing a PageBlob. */\nexport class PageBlob {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Create a PageBlob.\n   * @param {StorageClientContext} client Reference to the service client.\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * The Create operation creates a new page blob.\n   * @param contentLength The length of the request.\n   * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB.\n   * The page blob size must be aligned to a 512-byte boundary.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.PageBlobCreateResponse>\n   */\n  create(contentLength: number, blobContentLength: number, options?: Models.PageBlobCreateOptionalParams): Promise<Models.PageBlobCreateResponse>;\n  /**\n   * @param contentLength The length of the request.\n   * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB.\n   * The page blob size must be aligned to a 512-byte boundary.\n   * @param callback The callback\n   */\n  create(contentLength: number, blobContentLength: number, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param contentLength The length of the request.\n   * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB.\n   * The page blob size must be aligned to a 512-byte boundary.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  create(contentLength: number, blobContentLength: number, options: Models.PageBlobCreateOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  create(contentLength: number, blobContentLength: number, options?: Models.PageBlobCreateOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.PageBlobCreateResponse> {\n    return this.client.sendOperationRequest(\n      {\n        contentLength,\n        blobContentLength,\n        options\n      },\n      createOperationSpec,\n      callback) as Promise<Models.PageBlobCreateResponse>;\n  }\n\n  /**\n   * The Upload Pages operation writes a range of pages to a page blob\n   * @param body Initial data\n   * @param contentLength The length of the request.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.PageBlobUploadPagesResponse>\n   */\n  uploadPages(body: coreHttp.HttpRequestBody, contentLength: number, options?: Models.PageBlobUploadPagesOptionalParams): Promise<Models.PageBlobUploadPagesResponse>;\n  /**\n   * @param body Initial data\n   * @param contentLength The length of the request.\n   * @param callback The callback\n   */\n  uploadPages(body: coreHttp.HttpRequestBody, contentLength: number, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param body Initial data\n   * @param contentLength The length of the request.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  uploadPages(body: coreHttp.HttpRequestBody, contentLength: number, options: Models.PageBlobUploadPagesOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  uploadPages(body: coreHttp.HttpRequestBody, contentLength: number, options?: Models.PageBlobUploadPagesOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.PageBlobUploadPagesResponse> {\n    return this.client.sendOperationRequest(\n      {\n        body,\n        contentLength,\n        options\n      },\n      uploadPagesOperationSpec,\n      callback) as Promise<Models.PageBlobUploadPagesResponse>;\n  }\n\n  /**\n   * The Clear Pages operation clears a set of pages from a page blob\n   * @param contentLength The length of the request.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.PageBlobClearPagesResponse>\n   */\n  clearPages(contentLength: number, options?: Models.PageBlobClearPagesOptionalParams): Promise<Models.PageBlobClearPagesResponse>;\n  /**\n   * @param contentLength The length of the request.\n   * @param callback The callback\n   */\n  clearPages(contentLength: number, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param contentLength The length of the request.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  clearPages(contentLength: number, options: Models.PageBlobClearPagesOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  clearPages(contentLength: number, options?: Models.PageBlobClearPagesOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.PageBlobClearPagesResponse> {\n    return this.client.sendOperationRequest(\n      {\n        contentLength,\n        options\n      },\n      clearPagesOperationSpec,\n      callback) as Promise<Models.PageBlobClearPagesResponse>;\n  }\n\n  /**\n   * The Get Page Ranges operation returns the list of valid page ranges for a page blob or snapshot\n   * of a page blob\n   * @param [options] The optional parameters\n   * @returns Promise<Models.PageBlobGetPageRangesResponse>\n   */\n  getPageRanges(options?: Models.PageBlobGetPageRangesOptionalParams): Promise<Models.PageBlobGetPageRangesResponse>;\n  /**\n   * @param callback The callback\n   */\n  getPageRanges(callback: coreHttp.ServiceCallback<Models.PageList>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getPageRanges(options: Models.PageBlobGetPageRangesOptionalParams, callback: coreHttp.ServiceCallback<Models.PageList>): void;\n  getPageRanges(options?: Models.PageBlobGetPageRangesOptionalParams | coreHttp.ServiceCallback<Models.PageList>, callback?: coreHttp.ServiceCallback<Models.PageList>): Promise<Models.PageBlobGetPageRangesResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      getPageRangesOperationSpec,\n      callback) as Promise<Models.PageBlobGetPageRangesResponse>;\n  }\n\n  /**\n   * [Update] The Get Page Ranges Diff operation returns the list of valid page ranges for a page\n   * blob that were changed between target blob and previous snapshot.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.PageBlobGetPageRangesDiffResponse>\n   */\n  getPageRangesDiff(options?: Models.PageBlobGetPageRangesDiffOptionalParams): Promise<Models.PageBlobGetPageRangesDiffResponse>;\n  /**\n   * @param callback The callback\n   */\n  getPageRangesDiff(callback: coreHttp.ServiceCallback<Models.PageList>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getPageRangesDiff(options: Models.PageBlobGetPageRangesDiffOptionalParams, callback: coreHttp.ServiceCallback<Models.PageList>): void;\n  getPageRangesDiff(options?: Models.PageBlobGetPageRangesDiffOptionalParams | coreHttp.ServiceCallback<Models.PageList>, callback?: coreHttp.ServiceCallback<Models.PageList>): Promise<Models.PageBlobGetPageRangesDiffResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      getPageRangesDiffOperationSpec,\n      callback) as Promise<Models.PageBlobGetPageRangesDiffResponse>;\n  }\n\n  /**\n   * Resize the Blob\n   * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB.\n   * The page blob size must be aligned to a 512-byte boundary.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.PageBlobResizeResponse>\n   */\n  resize(blobContentLength: number, options?: Models.PageBlobResizeOptionalParams): Promise<Models.PageBlobResizeResponse>;\n  /**\n   * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB.\n   * The page blob size must be aligned to a 512-byte boundary.\n   * @param callback The callback\n   */\n  resize(blobContentLength: number, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB.\n   * The page blob size must be aligned to a 512-byte boundary.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  resize(blobContentLength: number, options: Models.PageBlobResizeOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  resize(blobContentLength: number, options?: Models.PageBlobResizeOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.PageBlobResizeResponse> {\n    return this.client.sendOperationRequest(\n      {\n        blobContentLength,\n        options\n      },\n      resizeOperationSpec,\n      callback) as Promise<Models.PageBlobResizeResponse>;\n  }\n\n  /**\n   * Update the sequence number of the blob\n   * @param sequenceNumberAction Required if the x-ms-blob-sequence-number header is set for the\n   * request. This property applies to page blobs only. This property indicates how the service\n   * should modify the blob's sequence number. Possible values include: 'max', 'update', 'increment'\n   * @param [options] The optional parameters\n   * @returns Promise<Models.PageBlobUpdateSequenceNumberResponse>\n   */\n  updateSequenceNumber(sequenceNumberAction: Models.SequenceNumberActionType, options?: Models.PageBlobUpdateSequenceNumberOptionalParams): Promise<Models.PageBlobUpdateSequenceNumberResponse>;\n  /**\n   * @param sequenceNumberAction Required if the x-ms-blob-sequence-number header is set for the\n   * request. This property applies to page blobs only. This property indicates how the service\n   * should modify the blob's sequence number. Possible values include: 'max', 'update', 'increment'\n   * @param callback The callback\n   */\n  updateSequenceNumber(sequenceNumberAction: Models.SequenceNumberActionType, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param sequenceNumberAction Required if the x-ms-blob-sequence-number header is set for the\n   * request. This property applies to page blobs only. This property indicates how the service\n   * should modify the blob's sequence number. Possible values include: 'max', 'update', 'increment'\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  updateSequenceNumber(sequenceNumberAction: Models.SequenceNumberActionType, options: Models.PageBlobUpdateSequenceNumberOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  updateSequenceNumber(sequenceNumberAction: Models.SequenceNumberActionType, options?: Models.PageBlobUpdateSequenceNumberOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.PageBlobUpdateSequenceNumberResponse> {\n    return this.client.sendOperationRequest(\n      {\n        sequenceNumberAction,\n        options\n      },\n      updateSequenceNumberOperationSpec,\n      callback) as Promise<Models.PageBlobUpdateSequenceNumberResponse>;\n  }\n\n  /**\n   * The Copy Incremental operation copies a snapshot of the source page blob to a destination page\n   * blob. The snapshot is copied such that only the differential changes between the previously\n   * copied snapshot are transferred to the destination. The copied snapshots are complete copies of\n   * the original snapshot and can be read or copied from as usual. This API is supported since REST\n   * version 2016-05-31.\n   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up\n   * to 2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it\n   * would appear in a request URI. The source blob must either be public or must be authenticated\n   * via a shared access signature.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.PageBlobCopyIncrementalResponse>\n   */\n  copyIncremental(copySource: string, options?: Models.PageBlobCopyIncrementalOptionalParams): Promise<Models.PageBlobCopyIncrementalResponse>;\n  /**\n   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up\n   * to 2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it\n   * would appear in a request URI. The source blob must either be public or must be authenticated\n   * via a shared access signature.\n   * @param callback The callback\n   */\n  copyIncremental(copySource: string, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up\n   * to 2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it\n   * would appear in a request URI. The source blob must either be public or must be authenticated\n   * via a shared access signature.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  copyIncremental(copySource: string, options: Models.PageBlobCopyIncrementalOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  copyIncremental(copySource: string, options?: Models.PageBlobCopyIncrementalOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.PageBlobCopyIncrementalResponse> {\n    return this.client.sendOperationRequest(\n      {\n        copySource,\n        options\n      },\n      copyIncrementalOperationSpec,\n      callback) as Promise<Models.PageBlobCopyIncrementalResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new coreHttp.Serializer(Mappers, true);\nconst createOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout\n  ],\n  headerParameters: [\n    Parameters.contentLength,\n    Parameters.metadata,\n    Parameters.blobContentLength,\n    Parameters.blobSequenceNumber,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.blobType0,\n    Parameters.blobContentType,\n    Parameters.blobContentEncoding,\n    Parameters.blobContentLanguage,\n    Parameters.blobContentMD5,\n    Parameters.blobCacheControl,\n    Parameters.blobContentDisposition,\n    Parameters.leaseId0,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  responses: {\n    201: {\n      headersMapper: Mappers.PageBlobCreateHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst uploadPagesOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp10\n  ],\n  headerParameters: [\n    Parameters.contentLength,\n    Parameters.transactionalContentMD5,\n    Parameters.range,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.pageWrite0,\n    Parameters.leaseId0,\n    Parameters.ifSequenceNumberLessThanOrEqualTo,\n    Parameters.ifSequenceNumberLessThan,\n    Parameters.ifSequenceNumberEqualTo,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  requestBody: {\n    parameterPath: \"body\",\n    mapper: {\n      required: true,\n      serializedName: \"body\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    201: {\n      headersMapper: Mappers.PageBlobUploadPagesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst clearPagesOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp10\n  ],\n  headerParameters: [\n    Parameters.contentLength,\n    Parameters.range,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.pageWrite1,\n    Parameters.leaseId0,\n    Parameters.ifSequenceNumberLessThanOrEqualTo,\n    Parameters.ifSequenceNumberLessThan,\n    Parameters.ifSequenceNumberEqualTo,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  responses: {\n    201: {\n      headersMapper: Mappers.PageBlobClearPagesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst getPageRangesOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.snapshot,\n    Parameters.timeout,\n    Parameters.comp11\n  ],\n  headerParameters: [\n    Parameters.range,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId0,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.PageList,\n      headersMapper: Mappers.PageBlobGetPageRangesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst getPageRangesDiffOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.snapshot,\n    Parameters.timeout,\n    Parameters.prevsnapshot,\n    Parameters.comp11\n  ],\n  headerParameters: [\n    Parameters.range,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId0,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.PageList,\n      headersMapper: Mappers.PageBlobGetPageRangesDiffHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst resizeOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp0\n  ],\n  headerParameters: [\n    Parameters.blobContentLength,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId0,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.PageBlobResizeHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst updateSequenceNumberOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp0\n  ],\n  headerParameters: [\n    Parameters.sequenceNumberAction,\n    Parameters.blobSequenceNumber,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId0,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  responses: {\n    200: {\n      headersMapper: Mappers.PageBlobUpdateSequenceNumberHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst copyIncrementalOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp12\n  ],\n  headerParameters: [\n    Parameters.copySource,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  responses: {\n    202: {\n      headersMapper: Mappers.PageBlobCopyIncrementalHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/appendBlobMappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\n\n/** Class representing a AppendBlob. */\nexport class AppendBlob {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Create a AppendBlob.\n   * @param {StorageClientContext} client Reference to the service client.\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * The Create Append Blob operation creates a new append blob.\n   * @param contentLength The length of the request.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.AppendBlobCreateResponse>\n   */\n  create(contentLength: number, options?: Models.AppendBlobCreateOptionalParams): Promise<Models.AppendBlobCreateResponse>;\n  /**\n   * @param contentLength The length of the request.\n   * @param callback The callback\n   */\n  create(contentLength: number, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param contentLength The length of the request.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  create(contentLength: number, options: Models.AppendBlobCreateOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  create(contentLength: number, options?: Models.AppendBlobCreateOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.AppendBlobCreateResponse> {\n    return this.client.sendOperationRequest(\n      {\n        contentLength,\n        options\n      },\n      createOperationSpec,\n      callback) as Promise<Models.AppendBlobCreateResponse>;\n  }\n\n  /**\n   * The Append Block operation commits a new block of data to the end of an existing append blob.\n   * The Append Block operation is permitted only if the blob was created with x-ms-blob-type set to\n   * AppendBlob. Append Block is supported only on version 2015-02-21 version or later.\n   * @param body Initial data\n   * @param contentLength The length of the request.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.AppendBlobAppendBlockResponse>\n   */\n  appendBlock(body: coreHttp.HttpRequestBody, contentLength: number, options?: Models.AppendBlobAppendBlockOptionalParams): Promise<Models.AppendBlobAppendBlockResponse>;\n  /**\n   * @param body Initial data\n   * @param contentLength The length of the request.\n   * @param callback The callback\n   */\n  appendBlock(body: coreHttp.HttpRequestBody, contentLength: number, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param body Initial data\n   * @param contentLength The length of the request.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  appendBlock(body: coreHttp.HttpRequestBody, contentLength: number, options: Models.AppendBlobAppendBlockOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  appendBlock(body: coreHttp.HttpRequestBody, contentLength: number, options?: Models.AppendBlobAppendBlockOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.AppendBlobAppendBlockResponse> {\n    return this.client.sendOperationRequest(\n      {\n        body,\n        contentLength,\n        options\n      },\n      appendBlockOperationSpec,\n      callback) as Promise<Models.AppendBlobAppendBlockResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new coreHttp.Serializer(Mappers, true);\nconst createOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout\n  ],\n  headerParameters: [\n    Parameters.contentLength,\n    Parameters.metadata,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.blobType1,\n    Parameters.blobContentType,\n    Parameters.blobContentEncoding,\n    Parameters.blobContentLanguage,\n    Parameters.blobContentMD5,\n    Parameters.blobCacheControl,\n    Parameters.blobContentDisposition,\n    Parameters.leaseId0,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  responses: {\n    201: {\n      headersMapper: Mappers.AppendBlobCreateHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst appendBlockOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp13\n  ],\n  headerParameters: [\n    Parameters.contentLength,\n    Parameters.transactionalContentMD5,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId0,\n    Parameters.maxSize,\n    Parameters.appendPosition,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  requestBody: {\n    parameterPath: \"body\",\n    mapper: {\n      required: true,\n      serializedName: \"body\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    201: {\n      headersMapper: Mappers.AppendBlobAppendBlockHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/blockBlobMappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\n\n/** Class representing a BlockBlob. */\nexport class BlockBlob {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Create a BlockBlob.\n   * @param {StorageClientContext} client Reference to the service client.\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * The Upload Block Blob operation updates the content of an existing block blob. Updating an\n   * existing block blob overwrites any existing metadata on the blob. Partial updates are not\n   * supported with Put Blob; the content of the existing blob is overwritten with the content of the\n   * new blob. To perform a partial update of the content of a block blob, use the Put Block List\n   * operation.\n   * @param body Initial data\n   * @param contentLength The length of the request.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlockBlobUploadResponse>\n   */\n  upload(body: coreHttp.HttpRequestBody, contentLength: number, options?: Models.BlockBlobUploadOptionalParams): Promise<Models.BlockBlobUploadResponse>;\n  /**\n   * @param body Initial data\n   * @param contentLength The length of the request.\n   * @param callback The callback\n   */\n  upload(body: coreHttp.HttpRequestBody, contentLength: number, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param body Initial data\n   * @param contentLength The length of the request.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  upload(body: coreHttp.HttpRequestBody, contentLength: number, options: Models.BlockBlobUploadOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  upload(body: coreHttp.HttpRequestBody, contentLength: number, options?: Models.BlockBlobUploadOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.BlockBlobUploadResponse> {\n    return this.client.sendOperationRequest(\n      {\n        body,\n        contentLength,\n        options\n      },\n      uploadOperationSpec,\n      callback) as Promise<Models.BlockBlobUploadResponse>;\n  }\n\n  /**\n   * The Stage Block operation creates a new block to be committed as part of a blob\n   * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the\n   * string must be less than or equal to 64 bytes in size. For a given blob, the length of the value\n   * specified for the blockid parameter must be the same size for each block.\n   * @param contentLength The length of the request.\n   * @param body Initial data\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlockBlobStageBlockResponse>\n   */\n  stageBlock(blockId: string, contentLength: number, body: coreHttp.HttpRequestBody, options?: Models.BlockBlobStageBlockOptionalParams): Promise<Models.BlockBlobStageBlockResponse>;\n  /**\n   * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the\n   * string must be less than or equal to 64 bytes in size. For a given blob, the length of the value\n   * specified for the blockid parameter must be the same size for each block.\n   * @param contentLength The length of the request.\n   * @param body Initial data\n   * @param callback The callback\n   */\n  stageBlock(blockId: string, contentLength: number, body: coreHttp.HttpRequestBody, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the\n   * string must be less than or equal to 64 bytes in size. For a given blob, the length of the value\n   * specified for the blockid parameter must be the same size for each block.\n   * @param contentLength The length of the request.\n   * @param body Initial data\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  stageBlock(blockId: string, contentLength: number, body: coreHttp.HttpRequestBody, options: Models.BlockBlobStageBlockOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  stageBlock(blockId: string, contentLength: number, body: coreHttp.HttpRequestBody, options?: Models.BlockBlobStageBlockOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.BlockBlobStageBlockResponse> {\n    return this.client.sendOperationRequest(\n      {\n        blockId,\n        contentLength,\n        body,\n        options\n      },\n      stageBlockOperationSpec,\n      callback) as Promise<Models.BlockBlobStageBlockResponse>;\n  }\n\n  /**\n   * The Stage Block operation creates a new block to be committed as part of a blob where the\n   * contents are read from a URL.\n   * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the\n   * string must be less than or equal to 64 bytes in size. For a given blob, the length of the value\n   * specified for the blockid parameter must be the same size for each block.\n   * @param contentLength The length of the request.\n   * @param sourceUrl Specify a URL to the copy source.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlockBlobStageBlockFromURLResponse>\n   */\n  stageBlockFromURL(blockId: string, contentLength: number, sourceUrl: string, options?: Models.BlockBlobStageBlockFromURLOptionalParams): Promise<Models.BlockBlobStageBlockFromURLResponse>;\n  /**\n   * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the\n   * string must be less than or equal to 64 bytes in size. For a given blob, the length of the value\n   * specified for the blockid parameter must be the same size for each block.\n   * @param contentLength The length of the request.\n   * @param sourceUrl Specify a URL to the copy source.\n   * @param callback The callback\n   */\n  stageBlockFromURL(blockId: string, contentLength: number, sourceUrl: string, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the\n   * string must be less than or equal to 64 bytes in size. For a given blob, the length of the value\n   * specified for the blockid parameter must be the same size for each block.\n   * @param contentLength The length of the request.\n   * @param sourceUrl Specify a URL to the copy source.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  stageBlockFromURL(blockId: string, contentLength: number, sourceUrl: string, options: Models.BlockBlobStageBlockFromURLOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  stageBlockFromURL(blockId: string, contentLength: number, sourceUrl: string, options?: Models.BlockBlobStageBlockFromURLOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.BlockBlobStageBlockFromURLResponse> {\n    return this.client.sendOperationRequest(\n      {\n        blockId,\n        contentLength,\n        sourceUrl,\n        options\n      },\n      stageBlockFromURLOperationSpec,\n      callback) as Promise<Models.BlockBlobStageBlockFromURLResponse>;\n  }\n\n  /**\n   * The Commit Block List operation writes a blob by specifying the list of block IDs that make up\n   * the blob. In order to be written as part of a blob, a block must have been successfully written\n   * to the server in a prior Put Block operation. You can call Put Block List to update a blob by\n   * uploading only those blocks that have changed, then committing the new and existing blocks\n   * together. You can do this by specifying whether to commit a block from the committed block list\n   * or from the uncommitted block list, or to commit the most recently uploaded version of the\n   * block, whichever list it may belong to.\n   * @param blocks\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlockBlobCommitBlockListResponse>\n   */\n  commitBlockList(blocks: Models.BlockLookupList, options?: Models.BlockBlobCommitBlockListOptionalParams): Promise<Models.BlockBlobCommitBlockListResponse>;\n  /**\n   * @param blocks\n   * @param callback The callback\n   */\n  commitBlockList(blocks: Models.BlockLookupList, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param blocks\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  commitBlockList(blocks: Models.BlockLookupList, options: Models.BlockBlobCommitBlockListOptionalParams, callback: coreHttp.ServiceCallback<void>): void;\n  commitBlockList(blocks: Models.BlockLookupList, options?: Models.BlockBlobCommitBlockListOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.BlockBlobCommitBlockListResponse> {\n    return this.client.sendOperationRequest(\n      {\n        blocks,\n        options\n      },\n      commitBlockListOperationSpec,\n      callback) as Promise<Models.BlockBlobCommitBlockListResponse>;\n  }\n\n  /**\n   * The Get Block List operation retrieves the list of blocks that have been uploaded as part of a\n   * block blob\n   * @param listType Specifies whether to return the list of committed blocks, the list of\n   * uncommitted blocks, or both lists together. Possible values include: 'committed', 'uncommitted',\n   * 'all'\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BlockBlobGetBlockListResponse>\n   */\n  getBlockList(listType: Models.BlockListType, options?: Models.BlockBlobGetBlockListOptionalParams): Promise<Models.BlockBlobGetBlockListResponse>;\n  /**\n   * @param listType Specifies whether to return the list of committed blocks, the list of\n   * uncommitted blocks, or both lists together. Possible values include: 'committed', 'uncommitted',\n   * 'all'\n   * @param callback The callback\n   */\n  getBlockList(listType: Models.BlockListType, callback: coreHttp.ServiceCallback<Models.BlockList>): void;\n  /**\n   * @param listType Specifies whether to return the list of committed blocks, the list of\n   * uncommitted blocks, or both lists together. Possible values include: 'committed', 'uncommitted',\n   * 'all'\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getBlockList(listType: Models.BlockListType, options: Models.BlockBlobGetBlockListOptionalParams, callback: coreHttp.ServiceCallback<Models.BlockList>): void;\n  getBlockList(listType: Models.BlockListType, options?: Models.BlockBlobGetBlockListOptionalParams | coreHttp.ServiceCallback<Models.BlockList>, callback?: coreHttp.ServiceCallback<Models.BlockList>): Promise<Models.BlockBlobGetBlockListResponse> {\n    return this.client.sendOperationRequest(\n      {\n        listType,\n        options\n      },\n      getBlockListOperationSpec,\n      callback) as Promise<Models.BlockBlobGetBlockListResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new coreHttp.Serializer(Mappers, true);\nconst uploadOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout\n  ],\n  headerParameters: [\n    Parameters.contentLength,\n    Parameters.metadata,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.blobType2,\n    Parameters.blobContentType,\n    Parameters.blobContentEncoding,\n    Parameters.blobContentLanguage,\n    Parameters.blobContentMD5,\n    Parameters.blobCacheControl,\n    Parameters.blobContentDisposition,\n    Parameters.leaseId0,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  requestBody: {\n    parameterPath: \"body\",\n    mapper: {\n      required: true,\n      serializedName: \"body\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobUploadHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst stageBlockOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.blockId,\n    Parameters.timeout,\n    Parameters.comp14\n  ],\n  headerParameters: [\n    Parameters.contentLength,\n    Parameters.transactionalContentMD5,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId0\n  ],\n  requestBody: {\n    parameterPath: \"body\",\n    mapper: {\n      required: true,\n      serializedName: \"body\",\n      type: {\n        name: \"Stream\"\n      }\n    }\n  },\n  contentType: \"application/octet-stream\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobStageBlockHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst stageBlockFromURLOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.blockId,\n    Parameters.timeout,\n    Parameters.comp14\n  ],\n  headerParameters: [\n    Parameters.contentLength,\n    Parameters.sourceUrl,\n    Parameters.sourceRange,\n    Parameters.sourceContentMD5,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId0\n  ],\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobStageBlockFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst commitBlockListOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.comp15\n  ],\n  headerParameters: [\n    Parameters.metadata,\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.blobCacheControl,\n    Parameters.blobContentType,\n    Parameters.blobContentEncoding,\n    Parameters.blobContentLanguage,\n    Parameters.blobContentMD5,\n    Parameters.blobContentDisposition,\n    Parameters.leaseId0,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  requestBody: {\n    parameterPath: \"blocks\",\n    mapper: {\n      ...Mappers.BlockLookupList,\n      required: true\n    }\n  },\n  contentType: \"application/xml; charset=utf-8\",\n  responses: {\n    201: {\n      headersMapper: Mappers.BlockBlobCommitBlockListHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n\nconst getBlockListOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"{containerName}/{blob}\",\n  urlParameters: [\n    Parameters.url\n  ],\n  queryParameters: [\n    Parameters.snapshot,\n    Parameters.listType,\n    Parameters.timeout,\n    Parameters.comp15\n  ],\n  headerParameters: [\n    Parameters.version,\n    Parameters.requestId,\n    Parameters.leaseId0\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.BlockList,\n      headersMapper: Mappers.BlockBlobGetBlockListHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError\n    }\n  },\n  isXML: true,\n  serializer\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nexport const SDK_VERSION: string = \"12.0.0-preview.1\";\nexport const SERVICE_VERSION: string = \"2018-03-28\";\n\nexport const BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES: number = 256 * 1024 * 1024; // 256MB\nexport const BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES: number = 100 * 1024 * 1024; // 100MB\nexport const BLOCK_BLOB_MAX_BLOCKS: number = 50000;\nexport const DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES: number = 4 * 1024 * 1024; // 4MB\nexport const DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS: number = 5;\n\nexport const URLConstants = {\n  Parameters: {\n    FORCE_BROWSER_NO_CACHE: \"_\",\n    SIGNATURE: \"sig\",\n    SNAPSHOT: \"snapshot\",\n    TIMEOUT: \"timeout\"\n  }\n};\n\nexport const HTTPURLConnection = {\n  HTTP_CONFLICT: 409,\n  HTTP_NOT_FOUND: 404,\n  HTTP_PRECON_FAILED: 412,\n  HTTP_RANGE_NOT_SATISFIABLE: 416\n};\n\nexport const HeaderConstants = {\n  AUTHORIZATION: \"authorization\",\n  AUTHORIZATION_SCHEME: \"Bearer\",\n  CONTENT_ENCODING: \"content-encoding\",\n  CONTENT_LANGUAGE: \"content-language\",\n  CONTENT_LENGTH: \"content-length\",\n  CONTENT_MD5: \"content-md5\",\n  CONTENT_TYPE: \"content-type\",\n  COOKIE: \"Cookie\",\n  DATE: \"date\",\n  IF_MATCH: \"if-match\",\n  IF_MODIFIED_SINCE: \"if-modified-since\",\n  IF_NONE_MATCH: \"if-none-match\",\n  IF_UNMODIFIED_SINCE: \"if-unmodified-since\",\n  PREFIX_FOR_STORAGE: \"x-ms-\",\n  RANGE: \"Range\",\n  USER_AGENT: \"User-Agent\",\n  X_MS_CLIENT_REQUEST_ID: \"x-ms-client-request-id\",\n  X_MS_COPY_SOURCE: \"x-ms-copy-source\",\n  X_MS_DATE: \"x-ms-date\"\n};\n\nexport const ETagNone = \"\";\nexport const ETagAny = \"*\";\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport * as fs from \"fs\";\nimport { HttpHeaders, isNode, URLBuilder } from \"@azure/core-http\";\nimport { HeaderConstants, URLConstants } from \"./constants\";\n\n/**\n * Reserved URL characters must be properly escaped for Storage services like Blob or File.\n *\n * ## URL encode and escape strategy for JS SDKs\n *\n * When customers pass a URL string into XxxClient classes constrcutor, the URL string may already be URL encoded or not.\n * But before sending to Azure Storage server, the URL must be encoded. However, it's hard for a SDK to guess whether the URL\n * string has been encoded or not. We have 2 potential strategies, and chose strategy two for the XxxClient constructors.\n *\n * ### Strategy One: Assume the customer URL string is not encoded, and always encode URL string in SDK.\n *\n * This is what legacy V2 SDK does, simple and works for most of the cases.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b:\",\n *   SDK will encode it to \"http://account.blob.core.windows.net/con/b%3A\" and send to server. A blob named \"b:\" will be created.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b%3A\",\n *   SDK will encode it to \"http://account.blob.core.windows.net/con/b%253A\" and send to server. A blob named \"b%3A\" will be created.\n *\n * But this strategy will make it not possible to create a blob with \"?\" in it's name. Because when customer URL string is\n * \"http://account.blob.core.windows.net/con/blob?name\", the \"?name\" will be treated as URL paramter instead of blob name.\n * If customer URL string is \"http://account.blob.core.windows.net/con/blob%3Fname\", a blob named \"blob%3Fname\" will be created.\n * V2 SDK doesn't have this issue because it doesn't allow customer pass in a full URL, it accepts a separate blob name and encodeURIComponent for it.\n * We cannot accept a SDK cannot create a blob name with \"?\". So we implement strategy two:\n *\n * ### Strategy Two: SDK doesn't assume the URL has been encoded or not. It will just escape the special characters.\n *\n * This is what V10 Blob Go SDK does. It accepts a URL type in Go, and call url.EscapedPath() to escape the special chars unescaped.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b:\",\n *   SDK will escape \":\" like \"http://account.blob.core.windows.net/con/b%3A\" and send to server. A blob named \"b:\" will be created.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b%3A\",\n *   There is no special characters, so send \"http://account.blob.core.windows.net/con/b%3A\" to server. A blob named \"b:\" will be created.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b%253A\",\n *   There is no special characters, so send \"http://account.blob.core.windows.net/con/b%253A\" to server. A blob named \"b%3A\" will be created.\n *\n * This strategy gives us flexibility to create with any special characters. But \"%\" will be treated as a special characters, if the URL string\n * is not encoded, there shouldn't a \"%\" in the URL string, otherwise the URL is not a valid URL.\n * If customer needs to create a blob with \"%\" in it's blob name, use \"%25\" insead of \"%\". Just like above 3rd sample.\n * And following URL strings are invalid:\n * - \"http://account.blob.core.windows.net/con/b%\"\n * - \"http://account.blob.core.windows.net/con/b%2\"\n * - \"http://account.blob.core.windows.net/con/b%G\"\n *\n * Another special character is \"?\", use \"%2F\" to represent a blob name with \"?\" in a URL string.\n *\n * ### Strategy for containerName, blobName or other specific XXXName parameters in methods such as `containerClient.getBlobClient(blobName)`\n *\n * We will apply strategy one, and call encodeURIComponent for these parameters like blobName. Because what customers passes in is a plain name instead of a URL.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-shares--directories--files--and-metadata\n *\n * @export\n * @param {string} url\n * @returns {string}\n */\nexport function escapeURLPath(url: string): string {\n  const urlParsed = URLBuilder.parse(url);\n\n  let path = urlParsed.getPath();\n  path = path || \"/\";\n\n  path = escape(path);\n  urlParsed.setPath(path);\n\n  return urlParsed.toString();\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * Extracts the parts of an Azure Storage account connection string.\n *\n * @export\n * @param {string} connectionString Connection string.\n * @returns {{ [key: string]: any }} String key value pairs of the storage account's base url for Blob, account name, and account key.\n */\nexport function extractConnectionStringParts(connectionString: string): { [key: string]: any } {\n  const matchCredentials = connectionString.match(\n    \"DefaultEndpointsProtocol=(.*);AccountName=(.*);AccountKey=(.*);EndpointSuffix=(.*)\"\n  );\n\n  let defaultEndpointsProtocol;\n  let accountName;\n  let accountKey;\n  let endpointSuffix;\n\n  try {\n    defaultEndpointsProtocol = matchCredentials![1] || \"\";\n    accountName = matchCredentials![2] || \"\";\n    accountKey = Buffer.from(matchCredentials![3], \"base64\");\n    endpointSuffix = matchCredentials![4] || \"\";\n  } catch (err) {\n    throw new Error(\"Invalid Connection String\");\n  }\n\n  const protocol = defaultEndpointsProtocol.toLowerCase();\n  if (protocol !== \"https\" && protocol !== \"http\") {\n    throw new Error(\n      \"Invalid DefaultEndpointsProtocol in the provided Connection String. Expecting 'https' or 'http'\"\n    );\n  } else if (!accountName) {\n    throw new Error(\"Invalid AccountName in the provided Connection String\");\n  } else if (accountKey.length === 0) {\n    throw new Error(\"Invalid AccountKey in the provided Connection String\");\n  } else if (!endpointSuffix) {\n    throw new Error(\"Invalid EndpointSuffix in the provided Connection String\");\n  }\n\n  const url = `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`;\n\n  return {\n    url: url,\n    accountName: accountName,\n    accountKey: accountKey\n  };\n}\n/**\n * Internal escape method implmented Strategy Two mentioned in escapeURL() description.\n *\n * @param {string} text\n * @returns {string}\n */\nfunction escape(text: string): string {\n  return encodeURIComponent(text)\n    .replace(/%2F/g, \"/\") // Don't escape for \"/\"\n    .replace(/'/g, \"%27\") // Escape for \"'\"\n    .replace(/\\+/g, \"%20\")\n    .replace(/%25/g, \"%\"); // Revert encoded \"%\"\n}\n\n/**\n * Append a string to URL path. Will remove duplicated \"/\" in front of the string\n * when URL path ends with a \"/\".\n *\n * @export\n * @param {string} url Source URL string\n * @param {string} name String to be appended to URL\n * @returns {string} An updated URL string\n */\nexport function appendToURLPath(url: string, name: string): string {\n  const urlParsed = URLBuilder.parse(url);\n\n  let path = urlParsed.getPath();\n  path = path ? (path.endsWith(\"/\") ? `${path}${name}` : `${path}/${name}`) : name;\n  urlParsed.setPath(path);\n\n  return urlParsed.toString();\n}\n\n/**\n * Set URL parameter name and value. If name exists in URL parameters, old value\n * will be replaced by name key. If not provide value, the parameter will be deleted.\n *\n * @export\n * @param {string} url Source URL string\n * @param {string} name Parameter name\n * @param {string} [value] Parameter value\n * @returns {string} An updated URL string\n */\nexport function setURLParameter(url: string, name: string, value?: string): string {\n  const urlParsed = URLBuilder.parse(url);\n  urlParsed.setQueryParameter(name, value);\n  return urlParsed.toString();\n}\n\n/**\n * Get URL parameter by name.\n *\n * @export\n * @param {string} url\n * @param {string} name\n * @returns {(string | string[] | undefined)}\n */\nexport function getURLParameter(url: string, name: string): string | string[] | undefined {\n  const urlParsed = URLBuilder.parse(url);\n  return urlParsed.getQueryParameterValue(name);\n}\n\n/**\n * Set URL host.\n *\n * @export\n * @param {string} url Source URL string\n * @param {string} host New host string\n * @returns An updated URL string\n */\nexport function setURLHost(url: string, host: string): string {\n  const urlParsed = URLBuilder.parse(url);\n  urlParsed.setHost(host);\n  return urlParsed.toString();\n}\n\n/**\n * Get URL path from an URL string.\n *\n * @export\n * @param {string} url Source URL string\n * @returns {(string | undefined)}\n */\nexport function getURLPath(url: string): string | undefined {\n  const urlParsed = URLBuilder.parse(url);\n  return urlParsed.getPath();\n}\n\n/**\n * Get URL query key value pairs from an URL string.\n *\n * @export\n * @param {string} url\n * @returns {{[key: string]: string}}\n */\nexport function getURLQueries(url: string): { [key: string]: string } {\n  let queryString = URLBuilder.parse(url).getQuery();\n  if (!queryString) {\n    return {};\n  }\n\n  queryString = queryString.trim();\n  queryString = queryString.startsWith(\"?\") ? queryString.substr(1) : queryString;\n\n  let querySubStrings: string[] = queryString.split(\"&\");\n  querySubStrings = querySubStrings.filter((value: string) => {\n    const indexOfEqual = value.indexOf(\"=\");\n    const lastIndexOfEqual = value.lastIndexOf(\"=\");\n    return (\n      indexOfEqual > 0 && indexOfEqual === lastIndexOfEqual && lastIndexOfEqual < value.length - 1\n    );\n  });\n\n  const queries: { [key: string]: string } = {};\n  for (const querySubString of querySubStrings) {\n    const splitResults = querySubString.split(\"=\");\n    const key: string = splitResults[0];\n    const value: string = splitResults[1];\n    queries[key] = value;\n  }\n\n  return queries;\n}\n\n/**\n * Rounds a date off to seconds.\n *\n * @export\n * @param {Date} date\n * @param {boolean} [withMilliseconds=true] If true, YYYY-MM-DDThh:mm:ss.fffffffZ will be returned;\n *                                          If false, YYYY-MM-DDThh:mm:ssZ will be returned.\n * @returns {string} Date string in ISO8061 format, with or without 7 milliseconds component\n */\nexport function truncatedISO8061Date(date: Date, withMilliseconds: boolean = true): string {\n  // Date.toISOString() will return like \"2018-10-29T06:34:36.139Z\"\n  const dateString = date.toISOString();\n\n  return withMilliseconds\n    ? dateString.substring(0, dateString.length - 1) + \"0000\" + \"Z\"\n    : dateString.substring(0, dateString.length - 5) + \"Z\";\n}\n\n/**\n * Base64 encode.\n *\n * @export\n * @param {string} content\n * @returns {string}\n */\nexport function base64encode(content: string): string {\n  return !isNode ? btoa(content) : Buffer.from(content).toString(\"base64\");\n}\n\n/**\n * Base64 decode.\n *\n * @export\n * @param {string} encodedString\n * @returns {string}\n */\nexport function base64decode(encodedString: string): string {\n  return !isNode ? atob(encodedString) : Buffer.from(encodedString, \"base64\").toString();\n}\n\n/**\n * Generate a 64 bytes base64 block ID string.\n *\n * @export\n * @param {number} blockIndex\n * @returns {string}\n */\nexport function generateBlockID(blockIDPrefix: string, blockIndex: number): string {\n  // To generate a 64 bytes base64 string, source string should be 48\n  const maxSourceStringLength = 48;\n\n  // A blob can have a maximum of 100,000 uncommitted blocks at any given time\n  const maxBlockIndexLength = 6;\n\n  const maxAllowedBlockIDPrefixLength = maxSourceStringLength - maxBlockIndexLength;\n\n  if (blockIDPrefix.length > maxAllowedBlockIDPrefixLength) {\n    blockIDPrefix = blockIDPrefix.slice(0, maxAllowedBlockIDPrefixLength);\n  }\n  const res =\n    blockIDPrefix +\n    padStart(blockIndex.toString(), maxSourceStringLength - blockIDPrefix.length, \"0\");\n  return base64encode(res);\n}\n\n/**\n * String.prototype.padStart()\n *\n * @export\n * @param {string} currentString\n * @param {number} targetLength\n * @param {string} [padString=\" \"]\n * @returns {string}\n */\nexport function padStart(\n  currentString: string,\n  targetLength: number,\n  padString: string = \" \"\n): string {\n  if (String.prototype.padStart) {\n    return currentString.padStart(targetLength, padString);\n  }\n\n  padString = padString || \" \";\n  if (currentString.length > targetLength) {\n    return currentString;\n  } else {\n    targetLength = targetLength - currentString.length;\n    if (targetLength > padString.length) {\n      padString += padString.repeat(targetLength / padString.length);\n    }\n    return padString.slice(0, targetLength) + currentString;\n  }\n}\n\nexport function sanitizeURL(url: string): string {\n  let safeURL: string = url;\n  if (getURLParameter(safeURL, URLConstants.Parameters.SIGNATURE)) {\n    safeURL = setURLParameter(safeURL, URLConstants.Parameters.SIGNATURE, \"*****\");\n  }\n\n  return safeURL;\n}\n\nexport function sanitizeHeaders(originalHeader: HttpHeaders): HttpHeaders {\n  const headers: HttpHeaders = new HttpHeaders();\n  for (const header of originalHeader.headersArray()) {\n    if (header.name.toLowerCase() === HeaderConstants.AUTHORIZATION) {\n      headers.set(header.name, \"*****\");\n    } else if (header.name.toLowerCase() === HeaderConstants.X_MS_COPY_SOURCE) {\n      headers.set(header.name, sanitizeURL(header.value));\n    } else {\n      headers.set(header.name, header.value);\n    }\n  }\n\n  return headers;\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * Writes the content of a readstream to a local file. Returns a Promise which is completed after the file handle is closed.\n * If Promise is rejected, the reason will be set to the first error raised by either the\n * ReadableStream or the fs.WriteStream.\n *\n * @export\n * @param {NodeJS.ReadableStream} rs The read stream.\n * @param {string} file Destination file path.\n * @returns {Promise<void>}\n */\nexport async function readStreamToLocalFile(\n  rs: NodeJS.ReadableStream,\n  file: string\n): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    const ws = fs.createWriteStream(file);\n\n    // Set STREAM_DEBUG env var to log stream events while running tests\n    if (process.env.STREAM_DEBUG) {\n      rs.on(\"close\", () => console.log(\"rs.close\"));\n      rs.on(\"data\", () => console.log(\"rs.data\"));\n      rs.on(\"end\", () => console.log(\"rs.end\"));\n      rs.on(\"error\", () => console.log(\"rs.error\"));\n\n      ws.on(\"close\", () => console.log(\"ws.close\"));\n      ws.on(\"drain\", () => console.log(\"ws.drain\"));\n      ws.on(\"error\", () => console.log(\"ws.error\"));\n      ws.on(\"finish\", () => console.log(\"ws.finish\"));\n      ws.on(\"pipe\", () => console.log(\"ws.pipe\"));\n      ws.on(\"unpipe\", () => console.log(\"ws.unpipe\"));\n    }\n\n    let error: Error;\n\n    rs.on(\"error\", (err: Error) => {\n      // First error wins\n      if (!error) {\n        error = err;\n      }\n\n      // When rs.error is raised, rs.end will never be raised automatically, so it must be raised manually\n      // to ensure ws.close is eventually raised.\n      rs.emit(\"end\");\n    });\n\n    ws.on(\"error\", (err: Error) => {\n      // First error wins\n      if (!error) {\n        error = err;\n      }\n    });\n\n    ws.on(\"close\", () => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve();\n      }\n    });\n\n    rs.pipe(ws);\n  });\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {\n  BaseRequestPolicy,\n  HttpOperationResponse,\n  isNode,\n  RequestPolicy,\n  RequestPolicyOptions,\n  WebResource\n} from \"@azure/core-http\";\n\nimport { HeaderConstants, URLConstants } from \"../utils/constants\";\nimport { setURLParameter } from \"../utils/utils.common\";\n\n/**\n * BrowserPolicy will handle differences between Node.js and browser runtime, including:\n *\n * 1. Browsers cache GET/HEAD requests by adding conditional headers such as 'IF_MODIFIED_SINCE'.\n * BrowserPolicy is a policy used to add a timestamp query to GET/HEAD request URL\n * thus avoid the browser cache.\n *\n * 2. Remove cookie header for security\n *\n * 3. Remove content-length header to avoid browsers warning\n *\n * @class BrowserPolicy\n * @extends {BaseRequestPolicy}\n */\nexport class BrowserPolicy extends BaseRequestPolicy {\n  /**\n   * Creates an instance of BrowserPolicy.\n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @memberof BrowserPolicy\n   */\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n    super(nextPolicy, options);\n  }\n\n  /**\n   * Sends out request.\n   *\n   * @param {WebResource} request\n   * @returns {Promise<HttpOperationResponse>}\n   * @memberof BrowserPolicy\n   */\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    if (isNode) {\n      return this._nextPolicy.sendRequest(request);\n    }\n\n    if (request.method.toUpperCase() === \"GET\" || request.method.toUpperCase() === \"HEAD\") {\n      request.url = setURLParameter(\n        request.url,\n        URLConstants.Parameters.FORCE_BROWSER_NO_CACHE,\n        new Date().getTime().toString()\n      );\n    }\n\n    request.headers.remove(HeaderConstants.COOKIE);\n\n    // According to XHR standards, content-length should be fully controlled by browsers\n    request.headers.remove(HeaderConstants.CONTENT_LENGTH);\n\n    return this._nextPolicy.sendRequest(request);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"@azure/core-http\";\nimport { BrowserPolicy } from \"./policies/BrowserPolicy\";\n\n/**\n * BrowserPolicyFactory is a factory class helping generating BrowserPolicy objects.\n *\n * @export\n * @class BrowserPolicyFactory\n * @implements {RequestPolicyFactory}\n */\nexport class BrowserPolicyFactory implements RequestPolicyFactory {\n  /**\n   * Creates a BrowserPolicyFactory object.\n   *\n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @returns {BrowserPolicy}\n   * @memberof BrowserPolicyFactory\n   */\n  public create(nextPolicy: RequestPolicy, options: RequestPolicyOptions): BrowserPolicy {\n    return new BrowserPolicy(nextPolicy, options);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {\n  BaseRequestPolicy,\n  HttpOperationResponse,\n  HttpPipelineLogLevel,\n  RequestPolicy,\n  RequestPolicyOptions,\n  RestError,\n  WebResource\n} from \"@azure/core-http\";\n\nimport { RequestLogOptions } from \"../LoggingPolicyFactory\";\nimport { HTTPURLConnection } from \"../utils/constants\";\nimport { sanitizeHeaders, sanitizeURL } from \"../utils/utils.common\";\n\n// Default values of RetryOptions\nconst DEFAULT_REQUEST_LOG_OPTIONS: RequestLogOptions = {\n  logWarningIfTryOverThreshold: 3000\n};\n\n/**\n * LoggingPolicy is a policy used to log requests.\n *\n * @class LoggingPolicy\n * @extends {BaseRequestPolicy}\n */\nexport class LoggingPolicy extends BaseRequestPolicy {\n  private tryCount: number = 0;\n  private operationStartTime: Date = new Date();\n  private requestStartTime: Date = new Date();\n\n  private readonly loggingOptions: RequestLogOptions;\n\n  /**\n   * Creates an instance of LoggingPolicy.\n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @param {RequestLogOptions} [loggingOptions=DEFAULT_REQUEST_LOG_OPTIONS]\n   * @memberof LoggingPolicy\n   */\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    loggingOptions: RequestLogOptions = DEFAULT_REQUEST_LOG_OPTIONS\n  ) {\n    super(nextPolicy, options);\n    this.loggingOptions = loggingOptions;\n  }\n\n  /**\n   * Sends out request.\n   *\n   * @param {WebResource} request\n   * @returns {Promise<HttpOperationResponse>}\n   * @memberof LoggingPolicy\n   */\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    this.tryCount++;\n    this.requestStartTime = new Date();\n    if (this.tryCount === 1) {\n      this.operationStartTime = this.requestStartTime;\n    }\n\n    this.log(HttpPipelineLogLevel.INFO, `==> OUTGOING REQUEST (Try number=${this.tryCount}):`);\n    this.log(HttpPipelineLogLevel.INFO, `  ${request.method}: ${sanitizeURL(request.url)}`);\n\n    try {\n      const response = await this._nextPolicy.sendRequest(request);\n\n      const requestEndTime = new Date();\n      const requestCompletionTime = requestEndTime.getTime() - this.requestStartTime.getTime();\n      const operationDuration = requestEndTime.getTime() - this.operationStartTime.getTime();\n\n      let currentLevel: HttpPipelineLogLevel = HttpPipelineLogLevel.INFO;\n      let logMessage: string = \"\";\n      if (this.shouldLog(HttpPipelineLogLevel.INFO)) {\n        // Assume success and default to informational logging.\n        logMessage = \"Successfully Received Response. \";\n      }\n\n      // If the response took too long, we'll upgrade to warning.\n      if (requestCompletionTime >= this.loggingOptions.logWarningIfTryOverThreshold) {\n        // Log a warning if the try duration exceeded the specified threshold.\n        if (this.shouldLog(HttpPipelineLogLevel.WARNING)) {\n          currentLevel = HttpPipelineLogLevel.WARNING;\n          logMessage = `SLOW OPERATION. Duration > ${this.loggingOptions.logWarningIfTryOverThreshold} ms. `;\n        }\n      }\n\n      if (\n        (response.status >= 400 &&\n          response.status <= 499 &&\n          (response.status !== HTTPURLConnection.HTTP_NOT_FOUND &&\n            response.status !== HTTPURLConnection.HTTP_CONFLICT &&\n            response.status !== HTTPURLConnection.HTTP_PRECON_FAILED &&\n            response.status !== HTTPURLConnection.HTTP_RANGE_NOT_SATISFIABLE)) ||\n        (response.status >= 500 && response.status <= 509)\n      ) {\n        const errorString = `REQUEST ERROR: HTTP request failed with status code: ${response.status}. `;\n        logMessage = errorString;\n\n        currentLevel = HttpPipelineLogLevel.ERROR;\n      }\n\n      const messageInfo = `Request try:${this.tryCount}, status:${response.status} request duration:${requestCompletionTime} ms, operation duration:${operationDuration} ms\\n`;\n      this.log(currentLevel, logMessage + messageInfo);\n      this.log(\n        HttpPipelineLogLevel.INFO,\n        `  request headers: ${JSON.stringify(sanitizeHeaders(response.request.headers), null, 2)}`\n      );\n      this.log(\n        HttpPipelineLogLevel.INFO,\n        `  response headers: ${JSON.stringify(sanitizeHeaders(response.headers), null, 2)}`\n      );\n\n      return response;\n    } catch (err) {\n      if (err instanceof RestError && err.request) {\n        this.log(\n          HttpPipelineLogLevel.INFO,\n          `  request headers: ${JSON.stringify(sanitizeHeaders(err.request.headers), null, 2)}`\n        );\n      }\n      this.log(\n        HttpPipelineLogLevel.ERROR,\n        `Unexpected failure attempting to make request. Error message: ${err.message}`\n      );\n      throw err;\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {\n  BaseRequestPolicy,\n  delay,\n  HttpOperationResponse,\n  HttpPipelineLogLevel,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n  RestError,\n  WebResource\n} from \"@azure/core-http\";\n\nimport { RetryOptions } from \"../RetryPolicyFactory\";\nimport { URLConstants } from \"../utils/constants\";\nimport { setURLHost, setURLParameter } from \"../utils/utils.common\";\n\n/**\n * A factory method used to generated a RetryPolicy factory.\n *\n * @export\n * @param {RetryOptions} retryOptions\n * @returns\n */\nexport function NewRetryPolicyFactory(retryOptions?: RetryOptions): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions): RetryPolicy => {\n      return new RetryPolicy(nextPolicy, options, retryOptions);\n    }\n  };\n}\n\n/**\n * RetryPolicy types.\n *\n * @export\n * @enum {number}\n */\nexport enum RetryPolicyType {\n  /**\n   * Exponential retry. Retry time delay grows exponentially.\n   */\n  EXPONENTIAL,\n  /**\n   * Linear retry. Retry time delay grows linearly.\n   */\n  FIXED\n}\n\n// Default values of RetryOptions\nconst DEFAULT_RETRY_OPTIONS: RetryOptions = {\n  maxRetryDelayInMs: 120 * 1000,\n  maxTries: 4,\n  retryDelayInMs: 4 * 1000,\n  retryPolicyType: RetryPolicyType.EXPONENTIAL,\n  secondaryHost: \"\",\n  tryTimeoutInMs: undefined // Use server side default timeout strategy\n};\n\n/**\n * Retry policy with exponential retry and linear retry implemented.\n *\n * @class RetryPolicy\n * @extends {BaseRequestPolicy}\n */\nexport class RetryPolicy extends BaseRequestPolicy {\n  /**\n   * RetryOptions.\n   *\n   * @private\n   * @type {RetryOptions}\n   * @memberof RetryPolicy\n   */\n  private readonly retryOptions: RetryOptions;\n\n  /**\n   * Creates an instance of RetryPolicy.\n   *\n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @param {RetryOptions} [retryOptions=DEFAULT_RETRY_OPTIONS]\n   * @memberof RetryPolicy\n   */\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    retryOptions: RetryOptions = DEFAULT_RETRY_OPTIONS\n  ) {\n    super(nextPolicy, options);\n\n    // Initialize retry options\n    this.retryOptions = {\n      retryPolicyType: retryOptions.retryPolicyType\n        ? retryOptions.retryPolicyType\n        : DEFAULT_RETRY_OPTIONS.retryPolicyType,\n\n      maxTries:\n        retryOptions.maxTries && retryOptions.maxTries >= 1\n          ? Math.floor(retryOptions.maxTries)\n          : DEFAULT_RETRY_OPTIONS.maxTries,\n\n      tryTimeoutInMs:\n        retryOptions.tryTimeoutInMs && retryOptions.tryTimeoutInMs >= 0\n          ? retryOptions.tryTimeoutInMs\n          : DEFAULT_RETRY_OPTIONS.tryTimeoutInMs,\n\n      retryDelayInMs:\n        retryOptions.retryDelayInMs && retryOptions.retryDelayInMs >= 0\n          ? Math.min(\n              retryOptions.retryDelayInMs,\n              retryOptions.maxRetryDelayInMs\n                ? retryOptions.maxRetryDelayInMs\n                : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs!\n            )\n          : DEFAULT_RETRY_OPTIONS.retryDelayInMs,\n\n      maxRetryDelayInMs:\n        retryOptions.maxRetryDelayInMs && retryOptions.maxRetryDelayInMs >= 0\n          ? retryOptions.maxRetryDelayInMs\n          : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs,\n\n      secondaryHost: retryOptions.secondaryHost\n        ? retryOptions.secondaryHost\n        : DEFAULT_RETRY_OPTIONS.secondaryHost\n    };\n  }\n\n  /**\n   * Sends request.\n   *\n   * @param {WebResource} request\n   * @returns {Promise<HttpOperationResponse>}\n   * @memberof RetryPolicy\n   */\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this.attemptSendRequest(request, false, 1);\n  }\n\n  /**\n   * Decide and perform next retry. Won't mutate request parameter.\n   *\n   * @protected\n   * @param {WebResource} request\n   * @param {HttpOperationResponse} response\n   * @param {boolean} secondaryHas404  If attempt was against the secondary & it returned a StatusNotFound (404), then\n   *                                   the resource was not found. This may be due to replication delay. So, in this\n   *                                   case, we'll never try the secondary again for this operation.\n   * @param {number} attempt           How many retries has been attempted to performed, starting from 1, which includes\n   *                                   the attempt will be performed by this method call.\n   * @returns {Promise<HttpOperationResponse>}\n   * @memberof RetryPolicy\n   */\n  protected async attemptSendRequest(\n    request: WebResource,\n    secondaryHas404: boolean,\n    attempt: number\n  ): Promise<HttpOperationResponse> {\n    const newRequest: WebResource = request.clone();\n\n    const isPrimaryRetry =\n      secondaryHas404 ||\n      !this.retryOptions.secondaryHost ||\n      !(request.method === \"GET\" || request.method === \"HEAD\" || request.method === \"OPTIONS\") ||\n      attempt % 2 === 1;\n\n    if (!isPrimaryRetry) {\n      newRequest.url = setURLHost(newRequest.url, this.retryOptions.secondaryHost!);\n    }\n\n    // Set the server-side timeout query parameter \"timeout=[seconds]\"\n    if (this.retryOptions.tryTimeoutInMs) {\n      newRequest.url = setURLParameter(\n        newRequest.url,\n        URLConstants.Parameters.TIMEOUT,\n        Math.floor(this.retryOptions.tryTimeoutInMs! / 1000).toString()\n      );\n    }\n\n    let response: HttpOperationResponse | undefined;\n    try {\n      this.logf(\n        HttpPipelineLogLevel.INFO,\n        `RetryPolicy: =====> Try=${attempt} ${isPrimaryRetry ? \"Primary\" : \"Secondary\"}`\n      );\n      response = await this._nextPolicy.sendRequest(newRequest);\n      if (!this.shouldRetry(isPrimaryRetry, attempt, response)) {\n        return response;\n      }\n\n      secondaryHas404 = secondaryHas404 || (!isPrimaryRetry && response.status === 404);\n    } catch (err) {\n      this.logf(\n        HttpPipelineLogLevel.ERROR,\n        `RetryPolicy: Caught error, message: ${err.message}, code: ${err.code}`\n      );\n      if (!this.shouldRetry(isPrimaryRetry, attempt, response, err)) {\n        throw err;\n      }\n    }\n\n    await this.delay(isPrimaryRetry, attempt);\n    return await this.attemptSendRequest(request, secondaryHas404, ++attempt);\n  }\n\n  /**\n   * Decide whether to retry according to last HTTP response and retry counters.\n   *\n   * @protected\n   * @param {boolean} isPrimaryRetry\n   * @param {number} attempt\n   * @param {HttpOperationResponse} [response]\n   * @param {RestError} [err]\n   * @returns {boolean}\n   * @memberof RetryPolicy\n   */\n  protected shouldRetry(\n    isPrimaryRetry: boolean,\n    attempt: number,\n    response?: HttpOperationResponse,\n    err?: RestError\n  ): boolean {\n    if (attempt >= this.retryOptions.maxTries!) {\n      this.logf(\n        HttpPipelineLogLevel.INFO,\n        `RetryPolicy: Attempt(s) ${attempt} >= maxTries ${this.retryOptions\n          .maxTries!}, no further try.`\n      );\n      return false;\n    }\n\n    // Handle network failures, you may need to customize the list when you implement\n    // your own http client\n    const retriableErrors = [\n      \"ETIMEDOUT\",\n      \"ESOCKETTIMEDOUT\",\n      \"ECONNREFUSED\",\n      \"ECONNRESET\",\n      \"ENOENT\",\n      \"ENOTFOUND\",\n      \"TIMEOUT\",\n      \"REQUEST_SEND_ERROR\" // For default xhr based http client provided in ms-rest-js\n    ];\n    if (err) {\n      for (const retriableError of retriableErrors) {\n        if (\n          err.name.toUpperCase().includes(retriableError) ||\n          err.message.toUpperCase().includes(retriableError) ||\n          (err.code && err.code.toUpperCase().includes(retriableError))\n        ) {\n          this.logf(\n            HttpPipelineLogLevel.INFO,\n            `RetryPolicy: Network error ${retriableError} found, will retry.`\n          );\n          return true;\n        }\n      }\n    }\n\n    // If attempt was against the secondary & it returned a StatusNotFound (404), then\n    // the resource was not found. This may be due to replication delay. So, in this\n    // case, we'll never try the secondary again for this operation.\n    if (response || err) {\n      const statusCode = response ? response.status : err ? err.statusCode : 0;\n      if (!isPrimaryRetry && statusCode === 404) {\n        this.logf(HttpPipelineLogLevel.INFO, `RetryPolicy: Secondary access with 404, will retry.`);\n        return true;\n      }\n\n      // Server internal error or server timeout\n      if (statusCode === 503 || statusCode === 500) {\n        this.logf(\n          HttpPipelineLogLevel.INFO,\n          `RetryPolicy: Will retry for status code ${statusCode}.`\n        );\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * This is to log for debugging purposes only.\n   * Comment/uncomment as necessary for releasing/debugging.\n   *\n   * @private\n   * @param {HttpPipelineLogLevel} level\n   * @param {string} message\n   * @memberof RetryPolicy\n   */\n  // tslint:disable-next-line:variable-name\n  private logf(_level: HttpPipelineLogLevel, _message: string) {\n    // this.log(_level, _message);\n  }\n\n  /**\n   * Delay a calculated time between retries.\n   *\n   * @private\n   * @param {boolean} isPrimaryRetry\n   * @param {number} attempt\n   * @returns\n   * @memberof RetryPolicy\n   */\n  private async delay(isPrimaryRetry: boolean, attempt: number) {\n    let delayTimeInMs: number = 0;\n\n    if (isPrimaryRetry) {\n      switch (this.retryOptions.retryPolicyType) {\n        case RetryPolicyType.EXPONENTIAL:\n          delayTimeInMs = Math.min(\n            (Math.pow(2, attempt - 1) - 1) * this.retryOptions.retryDelayInMs!,\n            this.retryOptions.maxRetryDelayInMs!\n          );\n          break;\n        case RetryPolicyType.FIXED:\n          delayTimeInMs = this.retryOptions.retryDelayInMs!;\n          break;\n      }\n    } else {\n      delayTimeInMs = Math.random() * 1000;\n    }\n\n    this.logf(HttpPipelineLogLevel.INFO, `RetryPolicy: Delay for ${delayTimeInMs}ms`);\n    return delay(delayTimeInMs);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"@azure/core-http\";\n\nimport { LoggingPolicy } from \"./policies/LoggingPolicy\";\n\n/**\n * RequestLogOptions configures the retry policy's behavior.\n *\n * @export\n * @interface RequestLogOptions\n */\nexport interface RequestLogOptions {\n  /**\n   * LogWarningIfTryOverThreshold logs a warning if a tried operation takes longer than the specified\n   * duration in ms. Default is 3000ms.\n   * @type {number}\n   * @memberof RequestLogOptions\n   */\n  logWarningIfTryOverThreshold: number;\n}\n\n/**\n * LoggingPolicyFactory is a factory class helping generating LoggingPolicy objects.\n *\n * @export\n * @class LoggingPolicyFactory\n * @implements {RequestPolicyFactory}\n */\nexport class LoggingPolicyFactory implements RequestPolicyFactory {\n  private readonly loggingOptions?: RequestLogOptions;\n\n  constructor(loggingOptions?: RequestLogOptions) {\n    this.loggingOptions = loggingOptions;\n  }\n\n  public create(nextPolicy: RequestPolicy, options: RequestPolicyOptions): LoggingPolicy {\n    return new LoggingPolicy(nextPolicy, options, this.loggingOptions);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"@azure/core-http\";\nimport { RetryPolicy, RetryPolicyType } from \"./policies/RetryPolicy\";\n\n/**\n * Retry options interface.\n *\n * @export\n * @interface RetryOptions\n */\nexport interface RetryOptions {\n  /**\n   * Optional. RetryPolicyType, default is exponential retry policy.\n   *\n   * @type {RetryPolicyType}\n   * @memberof RetryOptions\n   */\n  readonly retryPolicyType?: RetryPolicyType;\n\n  /**\n   * Optional. Max try number of attempts, default is 4.\n   * A value of 1 means 1 try and no retries.\n   * A value smaller than 1 means default retry number of attempts.\n   *\n   * @type {number}\n   * @memberof RetryOptions\n   */\n  readonly maxTries?: number;\n\n  /**\n   * Optional. Indicates the maximum time in ms allowed for any single try of an HTTP request.\n   * A value of zero or undefined means no default timeout on SDK client, Azure\n   * Storage server's default timeout policy will be used.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-blob-service-operations\n   *\n   * @type {number}\n   * @memberof RetryOptions\n   */\n  readonly tryTimeoutInMs?: number;\n\n  /**\n   * Optional. Specifies the amount of delay to use before retrying an operation (default is 4s or 4 * 1000ms).\n   * The delay increases (exponentially or linearly) with each retry up to a maximum specified by\n   * maxRetryDelayInMs. If you specify 0, then you must also specify 0 for maxRetryDelayInMs.\n   *\n   * @type {number}\n   * @memberof RetryOptions\n   */\n  readonly retryDelayInMs?: number;\n\n  /**\n   * Optional. Specifies the maximum delay allowed before retrying an operation (default is 120s or 120 * 1000ms).\n   * If you specify 0, then you must also specify 0 for retryDelayInMs.\n   *\n   * @type {number}\n   * @memberof RetryOptions\n   */\n  readonly maxRetryDelayInMs?: number;\n\n  /**\n   * If a secondaryHost is specified, retries will be tried against this host. If secondaryHost is undefined\n   * (the default) then operations are not retried against another host.\n   *\n   * NOTE: Before setting this field, make sure you understand the issues around\n   * reading stale and potentially-inconsistent data at\n   * {@link https://docs.microsoft.com/en-us/azure/storage/common/storage-designing-ha-apps-with-ragrs}\n   *\n   * @type {string}\n   * @memberof RetryOptions\n   */\n  readonly secondaryHost?: string;\n}\n\n/**\n * RetryPolicyFactory is a factory class helping generating RetryPolicy objects.\n *\n * @export\n * @class RetryPolicyFactory\n * @implements {RequestPolicyFactory}\n */\nexport class RetryPolicyFactory implements RequestPolicyFactory {\n  private retryOptions?: RetryOptions;\n\n  /**\n   * Creates an instance of RetryPolicyFactory.\n   * @param {RetryOptions} [retryOptions]\n   * @memberof RetryPolicyFactory\n   */\n  constructor(retryOptions?: RetryOptions) {\n    this.retryOptions = retryOptions;\n  }\n\n  public create(nextPolicy: RequestPolicy, options: RequestPolicyOptions): RetryPolicy {\n    return new RetryPolicy(nextPolicy, options, this.retryOptions);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {\n  BaseRequestPolicy,\n  HttpHeaders,\n  HttpOperationResponse,\n  isNode,\n  RequestPolicy,\n  RequestPolicyOptions,\n  WebResource\n} from \"@azure/core-http\";\n\nimport { HeaderConstants } from \"../utils/constants\";\n\n/**\n * TelemetryPolicy is a policy used to tag user-agent header for every requests.\n *\n * @class TelemetryPolicy\n * @extends {BaseRequestPolicy}\n */\nexport class TelemetryPolicy extends BaseRequestPolicy {\n  /**\n   * Telemetry string.\n   *\n   * @type {string}\n   * @memberof TelemetryPolicy\n   */\n  public readonly telemetry: string;\n\n  /**\n   * Creates an instance of TelemetryPolicy.\n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @param {TelemetryOptions} [telemetry]\n   * @memberof TelemetryPolicy\n   */\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, telemetry: string) {\n    super(nextPolicy, options);\n    this.telemetry = telemetry;\n  }\n\n  /**\n   * Sends out request.\n   *\n   * @param {WebResource} request\n   * @returns {Promise<HttpOperationResponse>}\n   * @memberof TelemetryPolicy\n   */\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    if (isNode) {\n      if (!request.headers) {\n        request.headers = new HttpHeaders();\n      }\n      if (!request.headers.get(HeaderConstants.USER_AGENT)) {\n        request.headers.set(HeaderConstants.USER_AGENT, this.telemetry);\n      }\n    }\n\n    return this._nextPolicy.sendRequest(request);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {\n  isNode,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions\n} from \"@azure/core-http\";\nimport * as os from \"os\";\n\nimport { TelemetryPolicy } from \"./policies/TelemetryPolicy\";\nimport { SDK_VERSION } from \"./utils/constants\";\n\n/**\n * Interface of TelemetryPolicy options.\n *\n * @export\n * @interface TelemetryOptions\n */\nexport interface TelemetryOptions {\n  /**\n   * Configues the costom string that is pre-pended to the user agent string.\n   *\n   * @type {string}\n   * @memberof TelemetryOptions\n   */\n  value: string;\n}\n\n/**\n * TelemetryPolicyFactory is a factory class helping generating TelemetryPolicy objects.\n *\n * @export\n * @class TelemetryPolicyFactory\n * @implements {RequestPolicyFactory}\n */\nexport class TelemetryPolicyFactory implements RequestPolicyFactory {\n  private telemetryString: string;\n\n  /**\n   * Creates an instance of TelemetryPolicyFactory.\n   * @param {TelemetryOptions} [telemetry]\n   * @memberof TelemetryPolicyFactory\n   */\n  constructor(telemetry?: TelemetryOptions) {\n    const userAgentInfo: string[] = [];\n\n    if (isNode) {\n      if (telemetry) {\n        const telemetryString = telemetry.value.replace(\" \", \"\");\n        if (telemetryString.length > 0 && userAgentInfo.indexOf(telemetryString) === -1) {\n          userAgentInfo.push(telemetryString);\n        }\n      }\n\n      // e.g. azsdk-js-storageblob/10.0.0\n      const libInfo = `azsdk-js-storageblob/${SDK_VERSION}`;\n      if (userAgentInfo.indexOf(libInfo) === -1) {\n        userAgentInfo.push(libInfo);\n      }\n\n      // e.g. (NODE-VERSION 4.9.1; Windows_NT 10.0.16299)\n      const runtimeInfo = `(NODE-VERSION ${process.version}; ${os.type()} ${os.release()})`;\n      if (userAgentInfo.indexOf(runtimeInfo) === -1) {\n        userAgentInfo.push(runtimeInfo);\n      }\n    }\n\n    this.telemetryString = userAgentInfo.join(\" \");\n  }\n\n  /**\n   * Creates a TelemetryPolicy object.\n   *\n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @returns {TelemetryPolicy}\n   * @memberof TelemetryPolicyFactory\n   */\n  public create(nextPolicy: RequestPolicy, options: RequestPolicyOptions): TelemetryPolicy {\n    return new TelemetryPolicy(nextPolicy, options, this.telemetryString);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {\n  BaseRequestPolicy,\n  generateUuid,\n  HttpOperationResponse,\n  RequestPolicy,\n  RequestPolicyOptions,\n  WebResource\n} from \"@azure/core-http\";\n\nimport { HeaderConstants } from \"../utils/constants\";\n\n/**\n * UniqueRequestIDPolicy generates an UUID as x-ms-request-id header value.\n *\n * @class UniqueRequestIDPolicy\n * @extends {BaseRequestPolicy}\n */\nexport class UniqueRequestIDPolicy extends BaseRequestPolicy {\n  /**\n   * Creates an instance of UniqueRequestIDPolicy.\n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @memberof UniqueRequestIDPolicy\n   */\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n    super(nextPolicy, options);\n  }\n\n  /**\n   * Sends request.\n   *\n   * @param {WebResource} request\n   * @returns {Promise<HttpOperationResponse>}\n   * @memberof UniqueRequestIDPolicy\n   */\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    if (!request.headers.contains(HeaderConstants.X_MS_CLIENT_REQUEST_ID)) {\n      request.headers.set(HeaderConstants.X_MS_CLIENT_REQUEST_ID, generateUuid());\n    }\n\n    return this._nextPolicy.sendRequest(request);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"@azure/core-http\";\nimport { UniqueRequestIDPolicy } from \"./policies/UniqueRequestIDPolicy\";\n\n/**\n * UniqueRequestIDPolicyFactory is a factory class helping generating UniqueRequestIDPolicy objects.\n *\n * @export\n * @class UniqueRequestIDPolicyFactory\n * @implements {RequestPolicyFactory}\n */\nexport class UniqueRequestIDPolicyFactory implements RequestPolicyFactory {\n  /**\n   * Creates a UniqueRequestIDPolicy object.\n   *\n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @returns {UniqueRequestIDPolicy}\n   * @memberof UniqueRequestIDPolicyFactory\n   */\n  public create(nextPolicy: RequestPolicy, options: RequestPolicyOptions): UniqueRequestIDPolicy {\n    return new UniqueRequestIDPolicy(nextPolicy, options);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {\n  BaseRequestPolicy,\n  deserializationPolicy,\n  HttpClient as IHttpClient,\n  HttpHeaders,\n  HttpOperationResponse,\n  HttpPipelineLogger as IHttpPipelineLogger,\n  HttpPipelineLogLevel,\n  HttpRequestBody,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n  ServiceClientOptions,\n  WebResource,\n  proxyPolicy,\n  getDefaultProxySettings,\n  isNode,\n  TokenCredential,\n  isTokenCredential,\n  bearerTokenAuthenticationPolicy\n} from \"@azure/core-http\";\n\nimport { BrowserPolicyFactory } from \"./BrowserPolicyFactory\";\nimport { Credential } from \"./credentials/Credential\";\nimport { LoggingPolicyFactory } from \"./LoggingPolicyFactory\";\nimport { RetryOptions, RetryPolicyFactory } from \"./RetryPolicyFactory\";\nimport { TelemetryOptions, TelemetryPolicyFactory } from \"./TelemetryPolicyFactory\";\nimport { UniqueRequestIDPolicyFactory } from \"./UniqueRequestIDPolicyFactory\";\n\n// Export following interfaces and types for customers who want to implement their\n// own RequestPolicy or HTTPClient\nexport {\n  BaseRequestPolicy,\n  deserializationPolicy,\n  IHttpClient,\n  IHttpPipelineLogger,\n  HttpHeaders,\n  HttpPipelineLogLevel,\n  HttpRequestBody,\n  HttpOperationResponse,\n  WebResource,\n  RequestPolicyFactory,\n  RequestPolicy,\n  RequestPolicyOptions\n};\n\n/**\n * Interface of proxy policy options.\n *\n * @example\n * // Use SharedKeyCredential with storage account and account key\n * // SharedKeyCredential is only avaiable in Node.js runtime, not in browsers\n * const sharedKeyCredential = new SharedKeyCredential(account, accountKey);\n * const blobServiceClient = new BlobServiceClient(\n *  `https://${account}.blob.core.windows.net`,\n *  sharedKeyCredential,\n *  {\n *    proxy: { url: \"http://localhost:3128\" }\n *  });\n *\n * @export\n * @interface ProxyOptions\n */\n\nexport interface ProxyOptions {\n  url?: string;\n}\n/**\n * Option interface for Pipeline constructor.\n *\n * @export\n * @interface PipelineOptions\n */\nexport interface PipelineOptions {\n  /**\n   * Optional. Configures the HTTP pipeline logger.\n   *\n   * @type {IHttpPipelineLogger}\n   * @memberof PipelineOptions\n   */\n  logger?: IHttpPipelineLogger;\n  /**\n   * Optional. Configures the HTTP client to send requests and receive responses.\n   *\n   * @type {IHttpClient}\n   * @memberof PipelineOptions\n   */\n  HTTPClient?: IHttpClient;\n}\n\n/**\n * A Pipeline class containing HTTP request policies.\n * You can create a default Pipeline by calling newPipeline().\n * Or you can create a Pipeline with your own policies by the constructor of Pipeline.\n * Refer to newPipeline() and provided policies as reference before\n * implementing your customized Pipeline.\n *\n * @export\n * @class Pipeline\n */\nexport class Pipeline {\n  /**\n   * A list of chained request policy factories.\n   *\n   * @type {RequestPolicyFactory[]}\n   * @memberof Pipeline\n   */\n  public readonly factories: RequestPolicyFactory[];\n  /**\n   * Configures pipeline logger and HTTP client.\n   *\n   * @type {PipelineOptions}\n   * @memberof Pipeline\n   */\n  public readonly options: PipelineOptions;\n\n  /**\n   * Creates an instance of Pipeline. Customize HTTPClient by implementing IHttpClient interface.\n   *\n   * @param {RequestPolicyFactory[]} factories\n   * @param {PipelineOptions} [options={}]\n   * @memberof Pipeline\n   */\n  constructor(factories: RequestPolicyFactory[], options: PipelineOptions = {}) {\n    this.factories = factories;\n    this.options = options;\n  }\n\n  /**\n   * Transfer Pipeline object to ServiceClientOptions object which required by\n   * ServiceClient constructor.\n   *\n   * @returns {ServiceClientOptions} The ServiceClientOptions object from this Pipeline.\n   * @memberof Pipeline\n   */\n  public toServiceClientOptions(): ServiceClientOptions {\n    return {\n      httpClient: this.options.HTTPClient,\n      httpPipelineLogger: this.options.logger,\n      requestPolicyFactories: this.factories\n    };\n  }\n}\n\n/**\n * Option interface for newPipeline() method.\n *\n * @export\n * @interface NewPipelineOptions\n */\nexport interface NewPipelineOptions {\n  proxy?: ProxyOptions;\n  /**\n   * Telemetry configures the built-in telemetry policy behavior.\n   *\n   * @type {TelemetryOptions}\n   * @memberof NewPipelineOptions\n   */\n  telemetry?: TelemetryOptions;\n  /**\n   * Configures the built-in retry policy behavior.\n   *\n   * @type {RetryOptions}\n   * @memberof NewPipelineOptions\n   */\n  retryOptions?: RetryOptions;\n\n  /**\n   * Configures the HTTP pipeline logger.\n   *\n   * @type {IHttpPipelineLogger}\n   * @memberof NewPipelineOptions\n   */\n  logger?: IHttpPipelineLogger;\n  /**\n   * Configures the HTTP client to send requests and receive responses.\n   *\n   * @type {IHttpClient}\n   * @memberof NewPipelineOptions\n   */\n  httpClient?: IHttpClient;\n}\n\n/**\n * Creates a new Pipeline object with Credential provided.\n *\n * @export\n * @param {Credential | TokenCredential} credential Such as AnonymousCredential, SharedKeyCredential, RawTokenCredential,\n *                                                  or a TokenCredential from @azure/identity.\n * @param {NewPipelineOptions} [pipelineOptions] Optional. Options.\n * @returns {Pipeline} A new Pipeline object.\n */\nexport function newPipeline(\n  credential: Credential | TokenCredential,\n  pipelineOptions: NewPipelineOptions = {}\n): Pipeline {\n  // Order is important. Closer to the API at the top & closer to the network at the bottom.\n  // The credential's policy factory must appear close to the wire so it can sign any\n  // changes made by other factories (like UniqueRequestIDPolicyFactory)\n  const factories: RequestPolicyFactory[] = [\n    new TelemetryPolicyFactory(pipelineOptions.telemetry),\n    new UniqueRequestIDPolicyFactory(),\n    new BrowserPolicyFactory(),\n    deserializationPolicy(), // Default deserializationPolicy is provided by protocol layer\n    new RetryPolicyFactory(pipelineOptions.retryOptions),\n    new LoggingPolicyFactory()\n  ];\n\n  if (isNode) {\n    // ProxyPolicy is only avaiable in Node.js runtime, not in browsers\n    factories.push(\n      proxyPolicy(\n        getDefaultProxySettings(pipelineOptions.proxy ? pipelineOptions.proxy.url : undefined)\n      )\n    );\n  }\n  factories.push(\n    isTokenCredential(credential)\n      ? bearerTokenAuthenticationPolicy(credential, \"https://storage.azure.com/.default\")\n      : credential\n  );\n\n  return new Pipeline(factories, {\n    HTTPClient: pipelineOptions.httpClient,\n    logger: pipelineOptions.logger\n  });\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\n\nconst packageName = \"azure-storage-blob\";\nconst packageVersion = \"1.0.0\";\n\nexport class StorageClientContext extends coreHttp.ServiceClient {\n  url: string;\n  version: string;\n\n  /**\n   * Initializes a new instance of the StorageClientContext class.\n   * @param url The URL of the service account, container, or blob that is the targe of the desired\n   * operation.\n   * @param [options] The parameter options\n   */\n  constructor(url: string, options?: coreHttp.ServiceClientOptions) {\n    if (url == undefined) {\n      throw new Error(\"'url' cannot be null.\");\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    if (!options.userAgent) {\n      const defaultUserAgent = coreHttp.getDefaultUserAgentValue();\n      options.userAgent = `${packageName}/${packageVersion} ${defaultUserAgent}`;\n    }\n\n    super(undefined, options);\n\n    this.version = '2018-03-28';\n    this.baseUri = \"{url}\";\n    this.requestContentType = \"application/json; charset=utf-8\";\n    this.url = url;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { StorageClientContext } from \"./generated/lib/storageClientContext\";\nimport { Pipeline } from \"./Pipeline\";\nimport { escapeURLPath } from \"./utils/utils.common\";\n\n/**\n * A StorageClient represents a based URL class for BlobServiceClient, ContainerClient and etc.\n *\n * @export\n * @class StorageClient\n */\nexport abstract class StorageClient {\n  /**\n   * Encoded URL string value.\n   *\n   * @type {string}\n   * @memberof StorageClient\n   */\n  public readonly url: string;\n\n  /**\n   * Request policy pipeline.\n   *\n   * @internal\n   * @ignore\n   * @type {Pipeline}\n   * @memberof StorageClient\n   */\n  protected readonly pipeline: Pipeline;\n\n  /**\n   * StorageClient is a reference to protocol layer operations entry, which is\n   * generated by AutoRest generator.\n   *\n   * @protected\n   * @type {StorageClientContext}\n   * @memberof StorageClient\n   */\n  protected readonly storageClientContext: StorageClientContext;\n\n  /**\n   * Creates an instance of StorageClient.\n   * @param {string} url url to resource\n   * @param {Pipeline} pipeline request policy pipeline.\n   * @memberof StorageClient\n   */\n  protected constructor(url: string, pipeline: Pipeline) {\n    // URL should be encoded and only once, protocol layer shouldn't encode URL again\n    this.url = escapeURLPath(url);\n    this.pipeline = pipeline;\n    this.storageClientContext = new StorageClientContext(\n      this.url,\n      pipeline.toServiceClientOptions()\n    );\n\n    // Override protocol layer's default content-type\n    const storageClientContext = this.storageClientContext as any;\n    storageClientContext.requestContentType = undefined;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// tslint:disable:max-line-length\n/**\n * Range for Blob Service Operations.\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-the-range-header-for-blob-service-operations\n *\n * @export\n * @interface Range\n */\nexport interface Range {\n  /**\n   * StartByte, larger than or equal 0.\n   *\n   * @type {string}\n   * @memberof Range\n   */\n  offset: number;\n  /**\n   * Optional. Count of bytes, larger than 0.\n   * If not provided, will return bytes from offset to the end.\n   *\n   * @type {string}\n   * @memberof Range\n   */\n  count?: number;\n}\n\n/**\n * Generate a range string. For example:\n *\n * \"bytes=255-\" or \"bytes=0-511\"\n *\n * @export\n * @param {Range} iRange\n * @returns {string}\n */\nexport function rangeToString(iRange: Range): string {\n  if (iRange.offset < 0) {\n    throw new RangeError(`Range.offset cannot be smaller than 0.`);\n  }\n  if (iRange.count && iRange.count <= 0) {\n    throw new RangeError(\n      `Range.count must be larger than 0. Leave it undefined if you want a range from offset to the end.`\n    );\n  }\n  return iRange.count\n    ? `bytes=${iRange.offset}-${iRange.offset + iRange.count - 1}`\n    : `bytes=${iRange.offset}-`;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"@azure/core-http\";\nimport { CredentialPolicy } from \"../policies/CredentialPolicy\";\n\n/**\n * Credential is an abstract class for Azure Storage HTTP requests signing. This\n * class will host an credentialPolicyCreator factory which generates CredentialPolicy.\n *\n * @export\n * @abstract\n * @class Credential\n */\nexport abstract class Credential implements RequestPolicyFactory {\n  /**\n   * Creates a RequestPolicy object.\n   *\n   * @param {RequestPolicy} _nextPolicy\n   * @param {RequestPolicyOptions} _options\n   * @returns {RequestPolicy}\n   * @memberof Credential\n   */\n  public create(\n    // tslint:disable-next-line:variable-name\n    _nextPolicy: RequestPolicy,\n    // tslint:disable-next-line:variable-name\n    _options: RequestPolicyOptions\n  ): RequestPolicy {\n    throw new Error(\"Method should be implemented in children classes.\");\n  }\n}\n\n/**\n * A factory function that creates a new CredentialPolicy that uses the provided nextPolicy.\n */\nexport type CredentialPolicyCreator = (\n  nextPolicy: RequestPolicy,\n  options: RequestPolicyOptions\n) => CredentialPolicy;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nexport const SharedKeyCredential = undefined;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { BaseRequestPolicy, HttpOperationResponse, WebResource } from \"@azure/core-http\";\n\n/**\n * Credential policy used to sign HTTP(S) requests before sending. This is an\n * abstract class.\n *\n * @export\n * @abstract\n * @class CredentialPolicy\n * @extends {BaseRequestPolicy}\n */\nexport abstract class CredentialPolicy extends BaseRequestPolicy {\n  /**\n   * Sends out request.\n   *\n   * @param {WebResource} request\n   * @returns {Promise<HttpOperationResponse>}\n   * @memberof CredentialPolicy\n   */\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this._nextPolicy.sendRequest(this.signRequest(request));\n  }\n\n  /**\n   * Child classes must implement this method with request signing. This method\n   * will be executed in sendRequest().\n   *\n   * @protected\n   * @abstract\n   * @param {WebResource} request\n   * @returns {WebResource}\n   * @memberof CredentialPolicy\n   */\n  protected signRequest(request: WebResource): WebResource {\n    // Child classes must override this method with request signing. This method\n    // will be executed in sendRequest().\n    return request;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { RequestPolicy, RequestPolicyOptions } from \"@azure/core-http\";\n\nimport { CredentialPolicy } from \"./CredentialPolicy\";\n\n/**\n * AnonymousCredentialPolicy is used with HTTP(S) requests that read public resources\n * or for use with Shared Access Signatures (SAS).\n *\n * @export\n * @class AnonymousCredentialPolicy\n * @extends {CredentialPolicy}\n */\nexport class AnonymousCredentialPolicy extends CredentialPolicy {\n  /**\n   * Creates an instance of AnonymousCredentialPolicy.\n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @memberof AnonymousCredentialPolicy\n   */\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n    super(nextPolicy, options);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { RequestPolicy, RequestPolicyOptions } from \"@azure/core-http\";\n\nimport { AnonymousCredentialPolicy } from \"../policies/AnonymousCredentialPolicy\";\nimport { Credential } from \"./Credential\";\n\n/**\n * AnonymousCredential provides a credentialPolicyCreator member used to create\n * AnonymousCredentialPolicy objects. AnonymousCredentialPolicy is used with\n * HTTP(S) requests that read public resources or for use with Shared Access\n * Signatures (SAS).\n *\n * @export\n * @class AnonymousCredential\n * @extends {Credential}\n */\nexport class AnonymousCredential extends Credential {\n  /**\n   * Creates an AnonymousCredentialPolicy object.\n   *\n   * @param {RequestPolicy} nextPolicy\n   * @param {RequestPolicyOptions} options\n   * @returns {AnonymousCredentialPolicy}\n   * @memberof AnonymousCredential\n   */\n  public create(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions\n  ): AnonymousCredentialPolicy {\n    return new AnonymousCredentialPolicy(nextPolicy, options);\n  }\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = $getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  var args = [];\n  for (var i = 0; i < arguments.length; i++) args.push(arguments[i]);\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    ReflectApply(this.listener, this.target, args);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function') {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n      }\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function') {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n      }\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// In browser, during webpack or browserify bundling, this module will be replaced by 'events'\n// https://github.com/Gozala/events\nimport { EventEmitter } from \"events\";\n\n/**\n * Operation is an async function to be executed and managed by Batch.\n */\nexport declare type Operation = () => Promise<any>;\n\n/**\n * States for Batch.\n *\n * @enum {number}\n */\nenum BatchStates {\n  Good,\n  Error\n}\n\n/**\n * Batch provides basic parallel execution with concurrency limits.\n * Will stop execute left operations when one of the executed operation throws an error.\n * But Batch cannot cancel ongoing operations, you need to cancel them by yourself.\n *\n * @export\n * @class Batch\n */\nexport class Batch {\n  /**\n   * Concurrency. Must be lager than 0.\n   *\n   * @type {number}\n   * @memberof Batch\n   */\n  private concurrency: number;\n\n  /**\n   * Number of active operations under execution.\n   *\n   * @private\n   * @type {number}\n   * @memberof Batch\n   */\n  private actives: number = 0;\n\n  /**\n   * Number of completed operations under execution.\n   *\n   * @private\n   * @type {number}\n   * @memberof Batch\n   */\n  private completed: number = 0;\n\n  /**\n   * Offset of next operation to be executed.\n   *\n   * @private\n   * @type {number}\n   * @memberof Batch\n   */\n  private offset: number = 0;\n\n  /**\n   * Operation array to be executed.\n   *\n   * @private\n   * @type {Operation[]}\n   * @memberof Batch\n   */\n  private operations: Operation[] = [];\n\n  /**\n   * States of Batch. When an error happens, state will turn into error.\n   * Batch will stop execute left operations.\n   *\n   * @private\n   * @type {BatchStates}\n   * @memberof Batch\n   */\n  private state: BatchStates = BatchStates.Good;\n\n  /**\n   * A private emitter used to pass events inside this class.\n   *\n   * @private\n   * @type {EventEmitter}\n   * @memberof Batch\n   */\n  private emitter: EventEmitter;\n\n  /**\n   * Creates an instance of Batch.\n   * @param {number} [concurrency=5]\n   * @memberof Batch\n   */\n  public constructor(concurrency: number = 5) {\n    if (concurrency < 1) {\n      throw new RangeError(\"concurrency must be larger than 0\");\n    }\n    this.concurrency = concurrency;\n    this.emitter = new EventEmitter();\n  }\n\n  /**\n   * Add a operation into queue.\n   *\n   * @param {Operation} operation\n   * @memberof Batch\n   */\n  public addOperation(operation: Operation): void {\n    this.operations.push(async () => {\n      try {\n        this.actives++;\n        await operation();\n        this.actives--;\n        this.completed++;\n        this.parallelExecute();\n      } catch (error) {\n        this.emitter.emit(\"error\", error);\n      }\n    });\n  }\n\n  /**\n   * Start execute operations in the queue.\n   *\n   * @returns {Promise<void>}\n   * @memberof Batch\n   */\n  public async do(): Promise<void> {\n    this.parallelExecute();\n\n    return new Promise<void>((resolve, reject) => {\n      this.emitter.on(\"finish\", resolve);\n\n      this.emitter.on(\"error\", (error) => {\n        this.state = BatchStates.Error;\n        reject(error);\n      });\n    });\n  }\n\n  /**\n   * Get next operation to be executed. Return null when reaching ends.\n   *\n   * @private\n   * @returns {(Operation | null)}\n   * @memberof Batch\n   */\n  private nextOperation(): Operation | null {\n    if (this.offset < this.operations.length) {\n      return this.operations[this.offset++];\n    }\n    return null;\n  }\n\n  /**\n   * Start execute operations. One one the most important difference between\n   * this method with do() is that do() wraps as an sync method.\n   *\n   * @private\n   * @returns {void}\n   * @memberof Batch\n   */\n  private parallelExecute(): void {\n    if (this.state === BatchStates.Error) {\n      return;\n    }\n\n    if (this.completed >= this.operations.length) {\n      this.emitter.emit(\"finish\");\n      return;\n    }\n\n    while (this.actives < this.concurrency) {\n      const operation = this.nextOperation();\n      if (operation) {\n        operation();\n      } else {\n        return;\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { HttpResponse, generateUuid } from \"@azure/core-http\";\nimport * as Models from \"../src/generated/lib/models\";\nimport { Aborter } from \"./Aborter\";\nimport { ContainerClient } from \"./ContainerClient\";\nimport { Blob, Container } from \"./generated/lib/operations\";\nimport { StorageClientContext } from \"./generated/lib/storageClient\";\nimport { BlobClient } from \"./internal\";\n\nexport interface Lease {\n  /**\n   * @member {string} [eTag] The ETag contains a value that you can use to\n   * perform operations conditionally. If the request version is 2011-08-18 or\n   * newer, the ETag value will be in quotes.\n   */\n  eTag?: string;\n  /**\n   * @member {Date} [lastModified] Returns the date and time the container was\n   * last modified. Any operation that modifies the blob, including an update\n   * of the blob's metadata or properties, changes the last-modified time of\n   * the blob.\n   */\n  lastModified?: Date;\n  /**\n   * @member {string} [leaseId] Uniquely identifies a container's lease\n   */\n  leaseId?: string;\n  /**\n   * @member {number} [leaseTime] Approximate time remaining in the lease\n   * period, in seconds.\n   */\n  leaseTime?: number;\n  /**\n   * @member {string} [requestId] This header uniquely identifies the request\n   * that was made and can be used for troubleshooting the request.\n   */\n  requestId?: string;\n  /**\n   * @member {string} [version] Indicates the version of the Blob service used\n   * to execute the request. This header is returned for requests made against\n   * version 2009-09-19 and above.\n   */\n  version?: string;\n  /**\n   * @member {Date} [date] UTC date/time value generated by the service that\n   * indicates the time at which the response was initiated\n   */\n  date?: Date;\n  /**\n   * @member {string} [errorCode]\n   */\n  errorCode?: string;\n}\n\nexport type LeaseOperationResponse = Lease & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: HttpResponse & {\n    /**\n     * The parsed HTTP response headers.\n     */\n    parsedHeaders: Lease;\n  };\n};\n\n/**\n * Configures lease operations.\n *\n * @export\n * @interface LeaseOperationOptions\n */\nexport interface LeaseOperationOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof LeaseOperationOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * Conditions to meet when changing the lease.\n   *\n   * @type {Models.ModifiedAccessConditions}\n   * @memberof LeaseOperationOptions\n   */\n  modifiedAccessConditions?: Models.ModifiedAccessConditions;\n}\n\n/**\n * A client that manages leases for a ContainerClient or a BlobClient.\n *\n * @export\n * @class LeaseClient\n */\nexport class LeaseClient {\n  private _leaseId: string;\n  private _url: string;\n  private _containerOrBlobOperation: Container | Blob;\n\n  /**\n   * Gets the lease Id.\n   *\n   * @readonly\n   * @memberof LeaseClient\n   */\n  public get leaseId() {\n    return this._leaseId;\n  }\n\n  /**\n   * Gets the url.\n   *\n   * @readonly\n   * @memberof LeaseClient\n   */\n  public get url() {\n    return this._url;\n  }\n\n  /**\n   * Creates an instance of LeaseClient.\n   * @param {(ContainerClient | BlobClient)} client The client to make the lease operation requests.\n   * @param {string} leaseId Initial proposed lease id.\n   * @memberof LeaseClient\n   */\n  constructor(client: ContainerClient | BlobClient, leaseId?: string) {\n    const clientContext = new StorageClientContext(\n      client.url,\n      (client as any).pipeline.toServiceClientOptions()\n    );\n    this._url = client.url;\n\n    if (client instanceof ContainerClient) {\n      this._containerOrBlobOperation = new Container(clientContext);\n    } else {\n      this._containerOrBlobOperation = new Blob(clientContext);\n    }\n\n    if (!leaseId) {\n      leaseId = generateUuid();\n    }\n    this._leaseId = leaseId;\n  }\n\n  /**\n   * Establishes and manages a lock on a container for delete operations, or on a blob\n   * for write and delete operations.\n   * The lock duration can be 15 to 60 seconds, or can be infinite.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param {number} duration Must be between 15 to 60 seconds, or infinite (-1)\n   * @param {LeaseOperationOptions} [options={}] option to configure lease management operations.\n   * @returns {Promise<LeaseOperationResponse>} Response data for acquire lease operation.\n   * @memberof LeaseClient\n   */\n  public async acquireLease(\n    duration: number,\n    options: LeaseOperationOptions = {}\n  ): Promise<LeaseOperationResponse> {\n    const aborter = options.abortSignal || Aborter.none;\n    return await this._containerOrBlobOperation.acquireLease({\n      abortSignal: aborter,\n      duration,\n      modifiedAccessConditions: options.modifiedAccessConditions,\n      proposedLeaseId: this._leaseId\n    });\n  }\n\n  /**\n   * To change the ID of the lease.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param {string} proposedLeaseId the proposed new lease Id.\n   * @param {LeaseOperationOptions} [options={}] option to configure lease management operations.\n   * @returns {Promise<LeaseOperationResponse>} Response data for change lease operation.\n   * @memberof LeaseClient\n   */\n  public async chanageLease(\n    proposedLeaseId: string,\n    options: LeaseOperationOptions = {}\n  ): Promise<LeaseOperationResponse> {\n    const aborter = options.abortSignal || Aborter.none;\n    const response = await this._containerOrBlobOperation.changeLease(\n      this._leaseId,\n      proposedLeaseId,\n      {\n        abortSignal: aborter,\n        modifiedAccessConditions: options.modifiedAccessConditions\n      }\n    );\n    this._leaseId = proposedLeaseId;\n    return response;\n  }\n\n  /**\n   * To free the lease if it is no longer needed so that another client may\n   * immediately acquire a lease against the container or the blob.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param {LeaseOperationOptions} [options={}] option to configure lease management operations.\n   * @returns {Promise<LeaseOperationResponse>} Response data for release lease operation.\n   * @memberof LeaseClient\n   */\n  public async releaseLease(options: LeaseOperationOptions = {}): Promise<LeaseOperationResponse> {\n    const aborter = options.abortSignal || Aborter.none;\n    return await this._containerOrBlobOperation.releaseLease(this._leaseId, {\n      abortSignal: aborter,\n      modifiedAccessConditions: options.modifiedAccessConditions\n    });\n  }\n\n  /**\n   * To renew the lease.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param {LeaseOperationOptions} [options={}] Optional option to configure lease management operations.\n   * @returns {Promise<LeaseOperationResponse>} Response data for renew lease operation.\n   * @memberof LeaseClient\n   */\n  public async renewLease(options: LeaseOperationOptions = {}): Promise<Lease> {\n    const aborter = options.abortSignal || Aborter.none;\n    return await this._containerOrBlobOperation.renewLease(this._leaseId, {\n      abortSignal: aborter,\n      modifiedAccessConditions: options.modifiedAccessConditions\n    });\n  }\n\n  /**\n   * To end the lease but ensure that another client cannot acquire a new lease\n   * until the current lease period has expired.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @static\n   * @param {(ContainerClient | BlobClient)} client\n   * @param {number} breakPeriod Break period\n   * @param {LeaseOperationOptions} [options={}] Optional options to configure lease management operations.\n   * @returns {Promise<LeaseOperationResponse>} Response data for break lease operation.\n   * @memberof LeaseClient\n   */\n  public async breakLease(\n    breakPeriod: number,\n    options: LeaseOperationOptions = {}\n  ): Promise<LeaseOperationResponse> {\n    const aborter = options.abortSignal || Aborter.none;\n    const operationOptions = {\n      abortSignal: aborter,\n      breakPeriod,\n      modifiedAccessConditions: options.modifiedAccessConditions\n    };\n    return await this._containerOrBlobOperation.breakLease(operationOptions);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {\n  isNode,\n  TransferProgressEvent,\n  TokenCredential,\n  isTokenCredential\n} from \"@azure/core-http\";\n\nimport * as Models from \"./generated/lib/models\";\nimport { Aborter } from \"./Aborter\";\nimport { BlobDownloadResponse } from \"./BlobDownloadResponse\";\nimport { Blob } from \"./generated/lib/operations\";\nimport { rangeToString } from \"./Range\";\nimport { BlobAccessConditions, Metadata } from \"./models\";\nimport { newPipeline, NewPipelineOptions, Pipeline } from \"./Pipeline\";\nimport {\n  DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS,\n  URLConstants,\n  DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES\n} from \"./utils/constants\";\nimport {\n  setURLParameter,\n  extractConnectionStringParts,\n  readStreamToLocalFile\n} from \"./utils/utils.common\";\nimport { AppendBlobClient, StorageClient } from \"./internal\";\nimport { BlockBlobClient } from \"./internal\";\nimport { PageBlobClient } from \"./internal\";\nimport { Credential } from \"./credentials/Credential\";\nimport { SharedKeyCredential } from \"./credentials/SharedKeyCredential\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { Batch } from \"./utils/Batch\";\nimport { streamToBuffer } from \"./utils/utils.node\";\nimport { LeaseClient } from \"./LeaseClient\";\n\n/**\n * Options to configure Blob - Download operation.\n *\n * @export\n * @interface BlobDownloadOptions\n */\nexport interface BlobDownloadOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof BlobDownloadOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * Optional. The version string of the snapshot to download.\n   *\n   * @type {string}\n   * @memberof BlobDownloadOptions\n   */\n  snapshot?: string;\n  /**\n   * Specifies whether to retrieve the MD5 hash of the range when downloading a range of bytes.\n   *\n   * @type {boolean}\n   * @memberof BlobDownloadOptions\n   */\n  rangeGetContentMD5?: boolean;\n  /**\n   * Conditions to meet when downloading blobs.\n   *\n   * @type {BlobAccessConditions}\n   * @memberof BlobDownloadOptions\n   */\n  blobAccessConditions?: BlobAccessConditions;\n  /**\n   * Call back to receive events on the progress of download operation.\n   *\n   * @memberof BlobDownloadOptions\n   */\n  progress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * Optional. ONLY AVAILABLE IN NODE.JS.\n   *\n   * How many retries will perform when original body download stream unexpected ends.\n   * Above kind of ends will not trigger retry policy defined in a pipeline,\n   * because they doesn't emit network errors.\n   *\n   * With this option, every additional retry means an additional FileClient.download() request will be made\n   * from the broken point, until the requested range has been successfully downloaded or maxRetryRequests is reached.\n   *\n   * Default value is 5, please set a larger value when loading large files in poor network.\n   *\n   * @type {number}\n   * @memberof BlobDownloadOptions\n   */\n  maxRetryRequests?: number;\n}\n\n/**\n * Options to configure Blob - Get Properties operation.\n *\n * @export\n * @interface BlobGetPropertiesOptions\n */\nexport interface BlobGetPropertiesOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof BlobGetPropertiesOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * Conditions to meet when getting blob properties.\n   *\n   * @type {BlobAccessConditions}\n   * @memberof BlobGetPropertiesOptions\n   */\n  blobAccessConditions?: BlobAccessConditions;\n}\n\n/**\n * Options to configure the Blob - Delete operation.\n *\n * @export\n * @interface BlobDeleteOptions\n */\nexport interface BlobDeleteOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof BlobDeleteOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * Conditions to meet when deleting blobs.\n   *\n   * @type {BlobAccessConditions}\n   * @memberof BlobDeleteOptions\n   */\n  blobAccessConditions?: BlobAccessConditions;\n  /**\n   * Specifies options to delete blobs that have associated snapshots.\n   * - `include`: Delete the base blob and all of its snapshots.\n   * - `only`: Delete only the blob's snapshots and not the blob itself.\n   *\n   * @type {Models.DeleteSnapshotsOptionType}\n   * @memberof BlobDeleteOptions\n   */\n  deleteSnapshots?: Models.DeleteSnapshotsOptionType;\n}\n\n/**\n * Options to confgiure Blob - Undelete operation.\n *\n * @export\n * @interface BlobUndeleteOptions\n */\nexport interface BlobUndeleteOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof BlobUndeleteOptions\n   */\n  abortSignal?: Aborter;\n}\n\n/**\n * Options to configure Blob - Set Http Headers operation.\n *\n * @export\n * @interface BlobSetHTTPHeadersOptions\n */\nexport interface BlobSetHTTPHeadersOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof BlobSetHTTPHeadersOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * Conditions to meet when setting blob HTTP headers.\n   *\n   * @type {BlobAccessConditions}\n   * @memberof BlobSetHTTPHeadersOptions\n   */\n  blobAccessConditions?: BlobAccessConditions;\n}\n\n/**\n * Options to configure Blob - Set Metadata operation.\n *\n * @export\n * @interface BlobSetMetadataOptions\n */\nexport interface BlobSetMetadataOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof BlobSetMetadataOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * Conditions to meet when setting blob metadata.\n   *\n   * @type {BlobAccessConditions}\n   * @memberof BlobSetMetadataOptions\n   */\n  blobAccessConditions?: BlobAccessConditions;\n}\n\n/**\n * Options to configure Blob - Acquire Lease operation.\n *\n * @export\n * @interface BlobAcquireLeaseOptions\n */\nexport interface BlobAcquireLeaseOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof BlobAcquireLeaseOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * Conditions to meet when acquiring the lease of a blob.\n   *\n   * @type {Models.ModifiedAccessConditions}\n   * @memberof BlobAcquireLeaseOptions\n   */\n  modifiedAccessConditions?: Models.ModifiedAccessConditions;\n}\n\n/**\n * Options to configure Blob - Release Lease operation.\n *\n * @export\n * @interface BlobReleaseLeaseOptions\n */\nexport interface BlobReleaseLeaseOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof BlobReleaseLeaseOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * Conditions to meet when releasing the lease of a blob.\n   *\n   * @type {Models.ModifiedAccessConditions}\n   * @memberof BlobReleaseLeaseOptions\n   */\n  modifiedAccessConditions?: Models.ModifiedAccessConditions;\n}\n\n/**\n * Options to configure Blob - Renew Lease operation.\n *\n * @export\n * @interface BlobRenewLeaseOptions\n */\nexport interface BlobRenewLeaseOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof BlobRenewLeaseOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * Conditions to meet when renewing the lease of a blob.\n   *\n   * @type {Models.ModifiedAccessConditions}\n   * @memberof BlobRenewLeaseOptions\n   */\n  modifiedAccessConditions?: Models.ModifiedAccessConditions;\n}\n\n/**\n * Options to configure Blob - Change Lease operation.\n *\n * @export\n * @interface BlobChangeLeaseOptions\n */\nexport interface BlobChangeLeaseOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof BlobChangeLeaseOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * Conditions to meet when changing the lease of a blob.\n   *\n   * @type {Models.ModifiedAccessConditions}\n   * @memberof BlobChangeLeaseOptions\n   */\n  modifiedAccessConditions?: Models.ModifiedAccessConditions;\n}\n\n/**\n * Options to configure Blob - Break Lease operation.\n *\n * @export\n * @interface BlobBreakLeaseOptions\n */\nexport interface BlobBreakLeaseOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof BlobBreakLeaseOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * Conditions to meet when breaking the lease of a blob.\n   *\n   * @type {Models.ModifiedAccessConditions}\n   * @memberof BlobBreakLeaseOptions\n   */\n  modifiedAccessConditions?: Models.ModifiedAccessConditions;\n}\n\n/**\n * Options to configure Blob - Create Snapshot operation.\n *\n * @export\n * @interface BlobCreateSnapshotOptions\n */\nexport interface BlobCreateSnapshotOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof BlobCreateSnapshotOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * A collection of key-value string pair to associate with the snapshot.\n   *\n   * @type {Metadata}\n   * @memberof BlobCreateSnapshotOptions\n   */\n  metadata?: Metadata;\n  /**\n   * Conditions to meet when creating blob snapshots.\n   *\n   * @type {BlobAccessConditions}\n   * @memberof BlobCreateSnapshotOptions\n   */\n  blobAccessConditions?: BlobAccessConditions;\n}\n\n/**\n * Options to configure Blob - Start Copy from URL operation.\n *\n * @export\n * @interface BlobStartCopyFromURLOptions\n */\nexport interface BlobStartCopyFromURLOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof BlobStartCopyFromURLOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * A collection of key-value string pair to associate with the blob that are being copied.\n   *\n   * @type {Metadata}\n   * @memberof BlobStartCopyFromURLOptions\n   */\n  metadata?: Metadata;\n  /**\n   * Conditions to meet for the destination blob when copying from a URL to the blob.\n   *\n   * @type {BlobAccessConditions}\n   * @memberof BlobStartCopyFromURLOptions\n   */\n  blobAccessConditions?: BlobAccessConditions;\n  /**\n   * Conditions to meet for the source Azure Blob/File when copying from a URL to the blob.\n   *\n   * @type {Models.ModifiedAccessConditions}\n   * @memberof BlobStartCopyFromURLOptions\n   */\n  sourceModifiedAccessConditions?: Models.ModifiedAccessConditions;\n}\n\n/**\n * Options to configure Blob - Abort Copy from URL operation.\n *\n * @export\n * @interface BlobAbortCopyFromURLOptions\n */\nexport interface BlobAbortCopyFromURLOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof BlobAbortCopyFromURLOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * If specified, contains the lease id that must be matched and lease with this id\n   * must be active in order for the operation to succeed.\n   *\n   * @type {Models.LeaseAccessConditions}\n   * @memberof BlobAbortCopyFromURLOptions\n   */\n  leaseAccessConditions?: Models.LeaseAccessConditions;\n}\n\n/**\n * Options to configure Blob - Set Tier operation.\n *\n * @export\n * @interface BlobSetTierOptions\n */\nexport interface BlobSetTierOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof BlobSetTierOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * If specified, contains the lease id that must be matched and lease with this id\n   * must be active in order for the operation to succeed.\n   *\n   * @type {Models.LeaseAccessConditions}\n   * @memberof BlobSetTierOptions\n   */\n  leaseAccessConditions?: Models.LeaseAccessConditions;\n}\n\n/**\n * Option interface for BlobClient.downloadToBuffer().\n *\n * @export\n * @interface DownloadFromBlobOptions\n */\nexport interface DownloadFromBlobOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof DownloadFromBlobOptions\n   */\n  abortSignal?: Aborter;\n\n  /**\n   * blockSize is the data every request trying to download.\n   * Must be >= 0, if set to 0 or undefined, blockSize will automatically calculated according\n   * to the blob size.\n   *\n   * @type {number}\n   * @memberof DownloadFromBlobOptions\n   */\n  blockSize?: number;\n\n  /**\n   * Optional. ONLY AVAILABLE IN NODE.JS.\n   *\n   * How many retries will perform when original block download stream unexpected ends.\n   * Above kind of ends will not trigger retry policy defined in a pipeline,\n   * because they doesn't emit network errors.\n   *\n   * With this option, every additional retry means an additional FileClient.download() request will be made\n   * from the broken point, until the requested block has been successfully downloaded or\n   * maxRetryRequestsPerBlock is reached.\n   *\n   * Default value is 5, please set a larger value when in poor network.\n   *\n   * @type {number}\n   * @memberof DownloadFromAzureFileOptions\n   */\n  maxRetryRequestsPerBlock?: number;\n\n  /**\n   * Progress updater.\n   *\n   * @memberof DownloadFromBlobOptions\n   */\n  progress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * Access conditions headers.\n   *\n   * @type {BlobAccessConditions}\n   * @memberof DownloadFromBlobOptions\n   */\n  blobAccessConditions?: BlobAccessConditions;\n\n  /**\n   * Concurrency of parallel download.\n   *\n   * @type {number}\n   * @memberof DownloadFromBlobOptions\n   */\n  parallelism?: number;\n}\n\n/**\n * A BlobClient represents a URL to an Azure Storage blob; the blob may be a block blob,\n * append blob, or page blob.\n *\n * @export\n * @class BlobClient\n */\nexport class BlobClient extends StorageClient {\n  /**\n   * blobContext provided by protocol layer.\n   *\n   * @private\n   * @type {Blobs}\n   * @memberof BlobClient\n   */\n  private blobContext: Blob;\n\n  /**\n   * ONLY AVAILABLE IN NODE.JS RUNTIME.\n   *\n   * Creates an instance of BlobClient from connection string.\n   *\n   * @param {string} connectionString Connection string for an Azure storage account.\n   * @param {string} containerName Container name.\n   * @param {string} blobName Blob name.\n   * @param {NewPipelineOptions} [options] Optional. Options to configure the HTTP pipeline.\n   * @memberof BlobClient\n   */\n  constructor(\n    connectionString: string,\n    containerName: string,\n    blobName: string,\n    options?: NewPipelineOptions\n  );\n  /**\n   * Creates an instance of BlobClient.\n   * This method accepts an encoded URL or non-encoded URL pointing to a blob.\n   * Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   * If a blob name includes ? or %, blob name must be encoded in the URL.\n   *\n   * @param {string} url A Client string pointing to Azure Storage blob service, such as\n   *                     \"https://myaccount.blob.core.windows.net\". You can append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.blob.core.windows.net?sasString\".\n   * @param {Credential | TokenCredential} credential Such as AnonymousCredential, SharedKeyCredential, RawTokenCredential,\n   *                                                  or a TokenCredential from @azure/identity. If not specified,\n   *                                                  AnonymousCredential is used.\n   * @param {NewPipelineOptions} [options] Optional. Options to configure the HTTP pipeline.\n   * @memberof BlobClient\n   */\n  constructor(url: string, credential?: Credential | TokenCredential, options?: NewPipelineOptions);\n  /**\n   * Creates an instance of BlobClient.\n   * This method accepts an encoded URL or non-encoded URL pointing to a blob.\n   * Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   * If a blob name includes ? or %, blob name must be encoded in the URL.\n   *\n   * @param {string} url A URL string pointing to Azure Storage blob, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer/blob\".\n   *                     You can append a SAS if using AnonymousCredential, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer/blob?sasString\".\n   *                     This method accepts an encoded URL or non-encoded URL pointing to a blob.\n   *                     Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   *                     However, if a blob name includes ? or %, blob name must be encoded in the URL.\n   *                     Such as a blob named \"my?blob%\", the URL should be \"https://myaccount.blob.core.windows.net/mycontainer/my%3Fblob%25\".\n   * @param {Pipeline} pipeline Call newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   * @memberof BlobClient\n   */\n  constructor(url: string, pipeline: Pipeline);\n  constructor(\n    urlOrConnectionString: string,\n    credentialOrPipelineOrContainerName?: string | Credential | TokenCredential | Pipeline,\n    blobNameOrOptions?: string | NewPipelineOptions,\n    options?: NewPipelineOptions\n  ) {\n    let pipeline: Pipeline;\n    if (credentialOrPipelineOrContainerName instanceof Pipeline) {\n      pipeline = credentialOrPipelineOrContainerName;\n    } else if (\n      credentialOrPipelineOrContainerName instanceof Credential ||\n      isTokenCredential(credentialOrPipelineOrContainerName)\n    ) {\n      options = blobNameOrOptions as NewPipelineOptions;\n      pipeline = newPipeline(credentialOrPipelineOrContainerName, options);\n    } else if (\n      !credentialOrPipelineOrContainerName &&\n      typeof credentialOrPipelineOrContainerName !== \"string\"\n    ) {\n      // The second parameter is undefined. Use anonymous credential.\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    } else if (\n      credentialOrPipelineOrContainerName &&\n      typeof credentialOrPipelineOrContainerName === \"string\" &&\n      blobNameOrOptions &&\n      typeof blobNameOrOptions === \"string\"\n    ) {\n      if (isNode) {\n        const containerName = credentialOrPipelineOrContainerName;\n        const blobName = blobNameOrOptions;\n\n        const extractedCreds = extractConnectionStringParts(urlOrConnectionString);\n        const sharedKeyCredential = new SharedKeyCredential(\n          extractedCreds.accountName,\n          extractedCreds.accountKey\n        );\n        urlOrConnectionString = extractedCreds.url + \"/\" + containerName + \"/\" + blobName;\n        pipeline = newPipeline(sharedKeyCredential, options);\n      } else {\n        throw new Error(\"Connection string is only supported in Node.js environment\");\n      }\n    } else {\n      throw new Error(\"Expecting non-empty strings for containerName and blobName parameters\");\n    }\n    super(urlOrConnectionString, pipeline);\n    this.blobContext = new Blob(this.storageClientContext);\n  }\n\n  /**\n   * Creates a new BlobClient object identical to the source but with the specified snapshot timestamp.\n   * Provide \"\" will remove the snapshot and return a Client to the base blob.\n   *\n   * @param {string} snapshot The snapshot timestamp.\n   * @returns {BlobClient} A new BlobClient object identical to the source but with the specified snapshot timestamp\n   * @memberof BlobClient\n   */\n  public withSnapshot(snapshot: string): BlobClient {\n    return new BlobClient(\n      setURLParameter(\n        this.url,\n        URLConstants.Parameters.SNAPSHOT,\n        snapshot.length === 0 ? undefined : snapshot\n      ),\n      this.pipeline\n    );\n  }\n\n  /**\n   * Creates a AppendBlobClient object.\n   *\n   * @returns {AppendBlobClient}\n   * @memberof BlobClient\n   */\n  public getAppendBlobClient(): AppendBlobClient {\n    return new AppendBlobClient(this.url, this.pipeline);\n  }\n\n  /**\n   * Creates a BlockBlobClient object.\n   *\n   * @returns {BlockBlobClient}\n   * @memberof BlobClient\n   */\n  public getBlockBlobClient(): BlockBlobClient {\n    return new BlockBlobClient(this.url, this.pipeline);\n  }\n\n  /**\n   * Creates a PageBlobClient object.\n   *\n   * @returns {PageBlobClient}\n   * @memberof BlobClient\n   */\n  public getPageBlobClient(): PageBlobClient {\n    return new PageBlobClient(this.url, this.pipeline);\n  }\n\n  /**\n   * Reads or downloads a blob from the system, including its metadata and properties.\n   * You can also call Get Blob to read a snapshot.\n   *\n   * * In Node.js, data returns in a Readable stream readableStreamBody\n   * * In browsers, data returns in a promise blobBody\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob\n   *\n   * @param {number} [offset] From which position of the blob to download, >= 0\n   * @param {number} [count] How much data to be downloaded, > 0. Will download to the end when undefined\n   * @param {BlobDownloadOptions} [options] Optional options to Blob Download operation.\n   * @returns {Promise<Models.BlobDownloadResponse>}\n   * @memberof BlobClient\n   */\n  public async download(\n    offset: number = 0,\n    count?: number,\n    options: BlobDownloadOptions = {}\n  ): Promise<Models.BlobDownloadResponse> {\n    const aborter = options.abortSignal || Aborter.none;\n    options.blobAccessConditions = options.blobAccessConditions || {};\n    options.blobAccessConditions.modifiedAccessConditions =\n      options.blobAccessConditions.modifiedAccessConditions || {};\n\n    const res = await this.blobContext.download({\n      abortSignal: aborter,\n      leaseAccessConditions: options.blobAccessConditions.leaseAccessConditions,\n      modifiedAccessConditions: options.blobAccessConditions.modifiedAccessConditions,\n      onDownloadProgress: isNode ? undefined : options.progress,\n      range: offset === 0 && !count ? undefined : rangeToString({ offset, count }),\n      rangeGetContentMD5: options.rangeGetContentMD5,\n      snapshot: options.snapshot\n    });\n\n    // Return browser response immediately\n    if (!isNode) {\n      return res;\n    }\n\n    // We support retrying when download stream unexpected ends in Node.js runtime\n    // Following code shouldn't be bundled into browser build, however some\n    // bundlers may try to bundle following code and \"FileReadResponse.ts\".\n    // In this case, \"FileDownloadResponse.browser.ts\" will be used as a shim of \"FileDownloadResponse.ts\"\n    // The config is in package.json \"browser\" field\n    if (options.maxRetryRequests === undefined || options.maxRetryRequests < 0) {\n      // TODO: Default value or make it a required parameter?\n      options.maxRetryRequests = DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS;\n    }\n\n    if (res.contentLength === undefined) {\n      throw new RangeError(`File download response doesn't contain valid content length header`);\n    }\n\n    if (!res.eTag) {\n      throw new RangeError(`File download response doesn't contain valid etag header`);\n    }\n\n    return new BlobDownloadResponse(\n      res,\n      async (start: number): Promise<NodeJS.ReadableStream> => {\n        const updatedOptions: Models.BlobDownloadOptionalParams = {\n          leaseAccessConditions: options.blobAccessConditions!.leaseAccessConditions,\n          modifiedAccessConditions: {\n            ifMatch: options.blobAccessConditions!.modifiedAccessConditions!.ifMatch || res.eTag,\n            ifModifiedSince: options.blobAccessConditions!.modifiedAccessConditions!\n              .ifModifiedSince,\n            ifNoneMatch: options.blobAccessConditions!.modifiedAccessConditions!.ifNoneMatch,\n            ifUnmodifiedSince: options.blobAccessConditions!.modifiedAccessConditions!\n              .ifUnmodifiedSince\n          },\n          range: rangeToString({\n            count: offset + res.contentLength! - start,\n            offset: start\n          }),\n          snapshot: options.snapshot\n        };\n\n        // Debug purpose only\n        // console.log(\n        //   `Read from internal stream, range: ${\n        //     updatedOptions.range\n        //   }, options: ${JSON.stringify(updatedOptions)}`\n        // );\n\n        return (await this.blobContext.download({\n          abortSignal: aborter,\n          ...updatedOptions\n        })).readableStreamBody!;\n      },\n      offset,\n      res.contentLength!,\n      {\n        abortSignal: aborter,\n        maxRetryRequests: options.maxRetryRequests,\n        progress: options.progress\n      }\n    );\n  }\n\n  /**\n   * Returns all user-defined metadata, standard HTTP properties, and system properties\n   * for the blob. It does not return the content of the blob.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-properties\n   *\n   * @param {BlobGetPropertiesOptions} [options] Optional options to Get Properties operation.\n   * @returns {Promise<Models.BlobGetPropertiesResponse>}\n   * @memberof BlobClient\n   */\n  public async getProperties(\n    options: BlobGetPropertiesOptions = {}\n  ): Promise<Models.BlobGetPropertiesResponse> {\n    const aborter = options.abortSignal || Aborter.none;\n    options.blobAccessConditions = options.blobAccessConditions || {};\n    return this.blobContext.getProperties({\n      abortSignal: aborter,\n      leaseAccessConditions: options.blobAccessConditions.leaseAccessConditions,\n      modifiedAccessConditions: options.blobAccessConditions.modifiedAccessConditions\n    });\n  }\n\n  /**\n   * Marks the specified blob or snapshot for deletion. The blob is later deleted\n   * during garbage collection. Note that in order to delete a blob, you must delete\n   * all of its snapshots. You can delete both at the same time with the Delete\n   * Blob operation.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob\n   *\n   * @param {BlobDeleteOptions} [options] Optional options to Blob Delete operation.\n   * @returns {Promise<Models.BlobDeleteResponse>}\n   * @memberof BlobClient\n   */\n  public async delete(options: BlobDeleteOptions = {}): Promise<Models.BlobDeleteResponse> {\n    const aborter = options.abortSignal || Aborter.none;\n    options.blobAccessConditions = options.blobAccessConditions || {};\n    return this.blobContext.deleteMethod({\n      abortSignal: aborter,\n      deleteSnapshots: options.deleteSnapshots,\n      leaseAccessConditions: options.blobAccessConditions.leaseAccessConditions,\n      modifiedAccessConditions: options.blobAccessConditions.modifiedAccessConditions\n    });\n  }\n\n  /**\n   * Restores the contents and metadata of soft deleted blob and any associated\n   * soft deleted snapshots. Undelete Blob is supported only on version 2017-07-29\n   * or later.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/undelete-blob\n   *\n   * @param {BlobUndeleteOptions} [options] Optional options to Blob Undelete operation.\n   * @returns {Promise<Models.BlobUndeleteResponse>}\n   * @memberof BlobClient\n   */\n  public async undelete(options: BlobUndeleteOptions = {}): Promise<Models.BlobUndeleteResponse> {\n    const aborter = options.abortSignal || Aborter.none;\n    return this.blobContext.undelete({\n      abortSignal: aborter || Aborter.none\n    });\n  }\n\n  /**\n   * Sets system properties on the blob.\n   *\n   * If no value provided, or no value provided for the specificed blob HTTP headers,\n   * these blob HTTP headers without a value will be cleared.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties\n   *\n   * @param {Models.BlobHTTPHeaders} [blobHTTPHeaders] If no value provided, or no value provided for\n   *                                                   the specificed blob HTTP headers, these blob HTTP\n   *                                                   headers without a value will be cleared.\n   * @param {BlobSetHTTPHeadersOptions} [options] Optional options to Blob Set HTTP Headers operation.\n   * @returns {Promise<Models.BlobSetHTTPHeadersResponse>}\n   * @memberof BlobClient\n   */\n  public async setHTTPHeaders(\n    blobHTTPHeaders?: Models.BlobHTTPHeaders,\n    options: BlobSetHTTPHeadersOptions = {}\n  ): Promise<Models.BlobSetHTTPHeadersResponse> {\n    const aborter = options.abortSignal || Aborter.none;\n    options.blobAccessConditions = options.blobAccessConditions || {};\n    return this.blobContext.setHTTPHeaders({\n      abortSignal: aborter,\n      blobHTTPHeaders,\n      leaseAccessConditions: options.blobAccessConditions.leaseAccessConditions,\n      modifiedAccessConditions: options.blobAccessConditions.modifiedAccessConditions\n    });\n  }\n\n  /**\n   * Sets user-defined metadata for the specified blob as one or more name-value pairs.\n   *\n   * If no option provided, or no metadata defined in the parameter, the blob\n   * metadata will be removed.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-metadata\n   *\n   * @param {Metadata} [metadata] Replace existing metadata with this value.\n   *                               If no value provided the existing metadata will be removed.\n   * @param {BlobSetMetadataOptions} [options] Optional options to Set Metadata operation.\n   * @returns {Promise<Models.BlobSetMetadataResponse>}\n   * @memberof BlobClient\n   */\n  public async setMetadata(\n    metadata?: Metadata,\n    options: BlobSetMetadataOptions = {}\n  ): Promise<Models.BlobSetMetadataResponse> {\n    const aborter = options.abortSignal || Aborter.none;\n    options.blobAccessConditions = options.blobAccessConditions || {};\n    return this.blobContext.setMetadata({\n      abortSignal: aborter,\n      leaseAccessConditions: options.blobAccessConditions.leaseAccessConditions,\n      metadata,\n      modifiedAccessConditions: options.blobAccessConditions.modifiedAccessConditions\n    });\n  }\n\n  /**\n   * Get a LeaseClient that manages leases on the blob.\n   *\n   * @param {string} [proposeLeaseId] Initial proposed lease Id.\n   * @returns {LeaseClient} A new LeaseClient object for managing leases on the blob.\n   * @memberof BlobClient\n   */\n  public getLeaseClient(proposeLeaseId?: string): LeaseClient {\n    return new LeaseClient(this, proposeLeaseId);\n  }\n\n  /**\n   * Creates a read-only snapshot of a blob.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/snapshot-blob\n   *\n   * @param {BlobCreateSnapshotOptions} [options] Optional options to the Blob Create Snapshot operation.\n   * @returns {Promise<Models.BlobCreateSnapshotResponse>}\n   * @memberof BlobClient\n   */\n  public async createSnapshot(\n    options: BlobCreateSnapshotOptions = {}\n  ): Promise<Models.BlobCreateSnapshotResponse> {\n    const aborter = options.abortSignal || Aborter.none;\n    options.blobAccessConditions = options.blobAccessConditions || {};\n    return this.blobContext.createSnapshot({\n      abortSignal: aborter,\n      leaseAccessConditions: options.blobAccessConditions.leaseAccessConditions,\n      metadata: options.metadata,\n      modifiedAccessConditions: options.blobAccessConditions.modifiedAccessConditions\n    });\n  }\n\n  /**\n   * Copies a blob to a destination within the storage account.\n   * In version 2012-02-12 and later, the source for a Copy Blob operation can be\n   * a committed blob in any Azure storage account.\n   * Beginning with version 2015-02-21, the source for a Copy Blob operation can be\n   * an Azure file in any Azure storage account.\n   * Only storage accounts created on or after June 7th, 2012 allow the Copy Blob\n   * operation to copy from another storage account.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob\n   *\n   * @param {string} copySource url to the ource Azure Blob/File.\n   * @param {BlobStartCopyFromURLOptions} [options] Optional options to the Blob Start Copy From URL operation.\n   * @returns {Promise<Models.BlobStartCopyFromURLResponse>}\n   * @memberof BlobClient\n   */\n  public async startCopyFromURL(\n    copySource: string,\n    options: BlobStartCopyFromURLOptions = {}\n  ): Promise<Models.BlobStartCopyFromURLResponse> {\n    const aborter = options.abortSignal || Aborter.none;\n    options.blobAccessConditions = options.blobAccessConditions || {};\n    options.sourceModifiedAccessConditions = options.sourceModifiedAccessConditions || {};\n\n    return this.blobContext.startCopyFromURL(copySource, {\n      abortSignal: aborter,\n      leaseAccessConditions: options.blobAccessConditions.leaseAccessConditions,\n      metadata: options.metadata,\n      modifiedAccessConditions: options.blobAccessConditions.modifiedAccessConditions,\n      sourceModifiedAccessConditions: {\n        sourceIfMatch: options.sourceModifiedAccessConditions.ifMatch,\n        sourceIfModifiedSince: options.sourceModifiedAccessConditions.ifModifiedSince,\n        sourceIfNoneMatch: options.sourceModifiedAccessConditions.ifNoneMatch,\n        sourceIfUnmodifiedSince: options.sourceModifiedAccessConditions.ifUnmodifiedSince\n      }\n    });\n  }\n\n  /**\n   * Aborts a pending Copy Blob operation, and leaves a destination blob with zero\n   * length and full metadata. Version 2012-02-12 and newer.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/abort-copy-blob\n   *\n   * @param {string} copyId Id of the Copy From URL operation.\n   * @param {BlobAbortCopyFromURLOptions} [options] Optional options to the Blob Abort Copy From URL operation.\n   * @returns {Promise<Models.BlobAbortCopyFromURLResponse>}\n   * @memberof BlobClient\n   */\n  public async abortCopyFromURL(\n    copyId: string,\n    options: BlobAbortCopyFromURLOptions = {}\n  ): Promise<Models.BlobAbortCopyFromURLResponse> {\n    const aborter = options.abortSignal || Aborter.none;\n    return this.blobContext.abortCopyFromURL(copyId, {\n      abortSignal: aborter,\n      leaseAccessConditions: options.leaseAccessConditions\n    });\n  }\n\n  /**\n   * Sets the tier on a blob. The operation is allowed on a page blob in a premium\n   * storage account and on a block blob in a blob storage account (locally redundant\n   * storage only). A premium page blob's tier determines the allowed size, IOPS,\n   * and bandwidth of the blob. A block blob's tier determines Hot/Cool/Archive\n   * storage type. This operation does not update the blob's ETag.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-tier\n   *\n   * @param {Models.AccessTier} tier The tier to be set on the blob. Valid values are Hot, Cool, or Archive.\n   * @param {BlobSetTierOptions} [options] Optional options to the Blob Set Tier operation.\n   * @returns {Promise<Models.BlobsSetTierResponse>}\n   * @memberof BlobClient\n   */\n  public async setTier(\n    tier: Models.AccessTier,\n    options: BlobSetTierOptions = {}\n  ): Promise<Models.BlobSetTierResponse> {\n    const aborter = options.abortSignal || Aborter.none;\n    return await this.blobContext.setTier(tier, {\n      abortSignal: aborter,\n      leaseAccessConditions: options.leaseAccessConditions\n    });\n  }\n\n  // High level function\n\n  /**\n   * ONLY AVAILABLE IN NODE.JS RUNTIME.\n   *\n   * Downloads an Azure Blob in parallel to a buffer.\n   * Offset and count are optional, pass 0 for both to download the entire blob.\n   *\n   * @export\n   * @param {Buffer} buffer Buffer to be fill, must have length larger than count\n   * @param {number} offset From which position of the block blob to download\n   * @param {number} [count] How much data to be downloaded. Will download to the end when passing undefined\n   * @param {DownloadFromBlobOptions} [options] DownloadFromBlobOptions\n   * @returns {Promise<void>}\n   */\n  public async downloadToBuffer(\n    buffer: Buffer,\n    offset: number,\n    count?: number,\n    options: DownloadFromBlobOptions = {}\n  ): Promise<void> {\n    if (!options.blockSize) {\n      options.blockSize = 0;\n    }\n    if (options.blockSize < 0) {\n      throw new RangeError(\"blockSize option must be >= 0\");\n    }\n    if (options.blockSize === 0) {\n      options.blockSize = DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES;\n    }\n\n    if (offset < 0) {\n      throw new RangeError(\"offset option must be >= 0\");\n    }\n\n    if (count && count <= 0) {\n      throw new RangeError(\"count option must be > 0\");\n    }\n\n    if (!options.blobAccessConditions) {\n      options.blobAccessConditions = {};\n    }\n\n    // Customer doesn't specify length, get it\n    if (!count) {\n      const response = await this.getProperties(options);\n      count = response.contentLength! - offset;\n      if (count < 0) {\n        throw new RangeError(\n          `offset ${offset} shouldn't be larger than blob size ${response.contentLength!}`\n        );\n      }\n    }\n\n    if (buffer.length < count) {\n      throw new RangeError(\n        `The buffer's size should be equal to or larger than the request count of bytes: ${count}`\n      );\n    }\n\n    let transferProgress: number = 0;\n    const batch = new Batch(options.parallelism);\n    for (let off = offset; off < offset + count; off = off + options.blockSize) {\n      batch.addOperation(async () => {\n        const chunkEnd = off + options.blockSize! < count! ? off + options.blockSize! : count!;\n        const response = await this.download(off, chunkEnd - off + 1, {\n          abortSignal: options.abortSignal,\n          blobAccessConditions: options.blobAccessConditions,\n          maxRetryRequests: options.maxRetryRequestsPerBlock\n        });\n        const stream = response.readableStreamBody!;\n        await streamToBuffer(stream, buffer, off - offset, chunkEnd - offset);\n        // Update progress after block is downloaded, in case of block trying\n        // Could provide finer grained progress updating inside HTTP requests,\n        // only if convenience layer download try is enabled\n        transferProgress += chunkEnd - off;\n        if (options.progress) {\n          options.progress({ loadedBytes: transferProgress });\n        }\n      });\n    }\n    await batch.do();\n  }\n\n  /**\n   * ONLY AVAILABLE IN NODE.JS RUNTIME.\n   *\n   * Downloads an Azure Blob to a local file.\n   * Fails if the the given file path already exits.\n   * Offset and count are optional, pass 0 and undefined respectively to download the entire blob.\n   *\n   * @param {string} filePath\n   * @param {number} [offset] From which position of the block blob to download.\n   * @param {number} [count] How much data to be downloaded. Will download to the end when passing undefined.\n   * @param {BlobDownloadOptions} [options] Options to Blob download options.\n   * @returns {Promise<Models.BlobDownloadResponse>} The response data for blob download operation,\n   *                                                 but with readableStreamBody set to undefined since its\n   *                                                 content is already read and written into a local file\n   *                                                 at the specified path.\n   * @memberof BlobClient\n   */\n  public async downloadToFile(\n    filePath: string,\n    offset: number = 0,\n    count?: number,\n    options?: BlobDownloadOptions\n  ): Promise<Models.BlobDownloadResponse> {\n    const response = await this.download(offset, count, options);\n    if (response.readableStreamBody) {\n      await readStreamToLocalFile(response.readableStreamBody, filePath);\n    }\n\n    // The stream is no longer accessible so setting it to undefined.\n    (response as any).blobDownloadStream = undefined;\n    return response;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// This file is used as a shim of \"BlobDownloadResponse\" for some browser bundlers\n// when trying to bundle \"BlobDownloadResponse\"\n// \"BlobDownloadResponse\" class is only available in Node.js runtime\nexport const BlobDownloadResponse = 1;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * Reads a readable stream into buffer. Fill the buffer from offset to end.\n *\n * @export\n * @param {NodeJS.ReadableStream} stream A Node.js Readable stream\n * @param {Buffer} buffer Buffer to be filled, length must >= offset\n * @param {number} offset From which position in the buffer to be filled, inclusive\n * @param {number} end To which position in the buffer to be filled, exclusive\n * @param {string} [encoding] Encoding of the Readable stream\n * @returns {Promise<void>}\n */\nexport async function streamToBuffer(\n  stream: NodeJS.ReadableStream,\n  buffer: Buffer,\n  offset: number,\n  end: number,\n  encoding?: string\n): Promise<void> {\n  let pos = 0; // Position in stream\n  const count = end - offset; // Total amount of data needed in stream\n\n  return new Promise<void>((resolve, reject) => {\n    stream.on(\"readable\", () => {\n      if (pos >= count) {\n        resolve();\n        return;\n      }\n\n      let chunk = stream.read();\n      if (!chunk) {\n        return;\n      }\n      if (typeof chunk === \"string\") {\n        chunk = Buffer.from(chunk, encoding);\n      }\n\n      // How much data needed in this chunk\n      const chunkLength = pos + chunk.length > count ? count - pos : chunk.length;\n\n      buffer.fill(chunk.slice(0, chunkLength), offset + pos, offset + pos + chunkLength);\n      pos += chunkLength;\n    });\n\n    stream.on(\"end\", () => {\n      if (pos < count) {\n        reject(\n          new Error(\n            `Stream drains before getting enough data needed. Data read: ${pos}, data need: ${count}`\n          )\n        );\n      }\n      resolve();\n    });\n\n    stream.on(\"error\", reject);\n  });\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {\n  HttpRequestBody,\n  TransferProgressEvent,\n  TokenCredential,\n  isTokenCredential,\n  isNode\n} from \"@azure/core-http\";\n\nimport * as Models from \"./generated/lib/models\";\nimport { Aborter } from \"./Aborter\";\nimport { BlobClient } from \"./internal\";\nimport { AppendBlob } from \"./generated/lib/operations\";\nimport { AppendBlobAccessConditions, BlobAccessConditions, Metadata } from \"./models\";\nimport { newPipeline, NewPipelineOptions, Pipeline } from \"./Pipeline\";\nimport { URLConstants } from \"./utils/constants\";\nimport { setURLParameter, extractConnectionStringParts } from \"./utils/utils.common\";\nimport { SharedKeyCredential } from \"./credentials/SharedKeyCredential\";\nimport { Credential } from \"./credentials/Credential\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\n\n/**\n * Options to configure Append Blob - Create operation.\n *\n * @export\n * @interface AppendBlobCreateOptions\n */\nexport interface AppendBlobCreateOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof AppendBlobCreateOptions\n   */\n  abortSignal?: Aborter;\n\n  /**\n   * Conditions to meet when creating append blobs.\n   *\n   * @type {BlobAccessConditions}\n   * @memberof AppendBlobCreateOptions\n   */\n  accessConditions?: BlobAccessConditions;\n  /**\n   * HTTP headers to set when creating append blobs.\n   *\n   * @type {Models.BlobHTTPHeaders}\n   * @memberof AppendBlobCreateOptions\n   */\n  blobHTTPHeaders?: Models.BlobHTTPHeaders;\n  /**\n   * A collection of key-value string pair to associate with the blob when creating append blobs.\n   *\n   * @type {Metadata}\n   * @memberof AppendBlobCreateOptions\n   */\n  metadata?: Metadata;\n}\n\n/**\n * Optiosn to confgiure the Append Blob - Append Block operation.\n *\n * @export\n * @interface AppendBlobAppendBlockOptions\n */\nexport interface AppendBlobAppendBlockOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof AppendBlobAppendBlockOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * Conditions to meet when appending append blob blocks.\n   *\n   * @type {AppendBlobAccessConditions}\n   * @memberof AppendBlobAppendBlockOptions\n   */\n  accessConditions?: AppendBlobAccessConditions;\n  /**\n   * Callback to receive events on the progress of append block operation.\n   *\n   * @memberof AppendBlobAppendBlockOptions\n   */\n  progress?: (progress: TransferProgressEvent) => void;\n  /**\n   * A Uint8Array holding the MD5 hash of the blob content.\n   * It is only used to verify the integrity of the block during transport.\n   * It is not stored in with the blob.\n   *\n   * @type {Uint8Array}\n   * @memberof AppendBlobAppendBlockOptions\n   */\n  transactionalContentMD5?: Uint8Array;\n}\n\n/**\n * AppendBlobClient defines a set of operations applicable to append blobs.\n *\n * @export\n * @class AppendBlobClient\n * @extends {BlobClient}\n */\nexport class AppendBlobClient extends BlobClient {\n  /**\n   * appendBlobsContext provided by protocol layer.\n   *\n   * @private\n   * @type {AppendBlobs}\n   * @memberof AppendBlobClient\n   */\n  private appendBlobContext: AppendBlob;\n\n  /**\n   * ONLY AVAILABLE IN NODE.JS RUNTIME.\n   *\n   * Creates an instance of AppendBlobClient.\n   *\n   * @param {string} connectionString Connection string for an Azure storage account.\n   * @param {string} containerName Container name.\n   * @param {string} blobName Blob name.\n   * @param {NewPipelineOptions} [options] Optional. Options to configure the HTTP pipeline.\n   * @memberof AppendBlobClient\n   */\n  constructor(\n    connectionString: string,\n    containerName: string,\n    blobName: string,\n    options?: NewPipelineOptions\n  );\n  /**\n   * Creates an instance of AppendBlobClient.\n   * This method accepts an encoded URL or non-encoded URL pointing to an append blob.\n   * Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   * If a blob name includes ? or %, blob name must be encoded in the URL.\n   *\n   * @param {string} url A URL string pointing to Azure Storage append blob, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer/appendblob\". You can\n   *                     append a SAS if using AnonymousCredential, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer/appendblob?sasString\".\n   *                     This method accepts an encoded URL or non-encoded URL pointing to a blob.\n   *                     Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   *                     However, if a blob name includes ? or %, blob name must be encoded in the URL.\n   *                     Such as a blob named \"my?blob%\", the URL should be \"https://myaccount.blob.core.windows.net/mycontainer/my%3Fblob%25\".\n   * @param {Credential | TokenCredential} credential Such as AnonymousCredential, SharedKeyCredential, RawTokenCredential,\n   *                                                  or a TokenCredential from @azure/identity. If not specified,\n   *                                                  AnonymousCredential is used.\n   * @param {NewPipelineOptions} [options] Optional. Options to configure the HTTP pipeline.\n   * @memberof AppendBlobClient\n   */\n  constructor(url: string, credential: Credential | TokenCredential, options?: NewPipelineOptions);\n  /**\n   * Creates an instance of AppendBlobClient.\n   * This method accepts an encoded URL or non-encoded URL pointing to an append blob.\n   * Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   * If a blob name includes ? or %, blob name must be encoded in the URL.\n   *\n   * @param {string} url A URL string pointing to Azure Storage append blob, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer/appendblob\". You can\n   *                     append a SAS if using AnonymousCredential, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer/appendblob?sasString\".\n   *                     This method accepts an encoded URL or non-encoded URL pointing to a blob.\n   *                     Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   *                     However, if a blob name includes ? or %, blob name must be encoded in the URL.\n   *                     Such as a blob named \"my?blob%\", the URL should be \"https://myaccount.blob.core.windows.net/mycontainer/my%3Fblob%25\".\n   * @param {Pipeline} pipeline Call newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   * @memberof AppendBlobClient\n   */\n  constructor(url: string, pipeline: Pipeline);\n  constructor(\n    urlOrConnectionString: string,\n    credentialOrPipelineOrContainerName: string | Credential | TokenCredential | Pipeline,\n    blobNameOrOptions?: string | NewPipelineOptions,\n    options?: NewPipelineOptions\n  ) {\n    // In TypeScript we cannot simply pass all parameters to super() like below so have to duplicate the code instead.\n    //   super(s, credentialOrPipelineOrContainerNameOrOptions, blobNameOrOptions, options);\n    let pipeline: Pipeline;\n    if (credentialOrPipelineOrContainerName instanceof Pipeline) {\n      pipeline = credentialOrPipelineOrContainerName;\n    } else if (\n      credentialOrPipelineOrContainerName instanceof Credential ||\n      isTokenCredential(credentialOrPipelineOrContainerName)\n    ) {\n      options = blobNameOrOptions as NewPipelineOptions;\n      pipeline = newPipeline(credentialOrPipelineOrContainerName, options);\n    } else if (\n      !credentialOrPipelineOrContainerName &&\n      typeof credentialOrPipelineOrContainerName !== \"string\"\n    ) {\n      // The second parameter is undefined. Use anonymous credential.\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    } else if (\n      credentialOrPipelineOrContainerName &&\n      typeof credentialOrPipelineOrContainerName === \"string\" &&\n      blobNameOrOptions &&\n      typeof blobNameOrOptions === \"string\"\n    ) {\n      if (isNode) {\n        const containerName = credentialOrPipelineOrContainerName;\n        const blobName = blobNameOrOptions;\n\n        const extractedCreds = extractConnectionStringParts(urlOrConnectionString);\n        const sharedKeyCredential = new SharedKeyCredential(\n          extractedCreds.accountName,\n          extractedCreds.accountKey\n        );\n        urlOrConnectionString = extractedCreds.url + \"/\" + containerName + \"/\" + blobName;\n        pipeline = newPipeline(sharedKeyCredential, options);\n      } else {\n        throw new Error(\"Connection string is only supported in Node.js environment\");\n      }\n    } else {\n      throw new Error(\"Expecting non-empty strings for containerName and blobName parameters\");\n    }\n    super(urlOrConnectionString, pipeline);\n    this.appendBlobContext = new AppendBlob(this.storageClientContext);\n  }\n\n  /**\n   * Creates a new AppendBlobClient object identical to the source but with the\n   * specified snapshot timestamp.\n   * Provide \"\" will remove the snapshot and return a Client to the base blob.\n   *\n   * @param {string} snapshot The snapshot timestamp.\n   * @returns {AppendBlobClient} A new AppendBlobClient object identical to the source but with the specified snapshot timestamp.\n   * @memberof AppendBlobClient\n   */\n  public withSnapshot(snapshot: string): AppendBlobClient {\n    return new AppendBlobClient(\n      setURLParameter(\n        this.url,\n        URLConstants.Parameters.SNAPSHOT,\n        snapshot.length === 0 ? undefined : snapshot\n      ),\n      this.pipeline\n    );\n  }\n\n  /**\n   * Creates a 0-length append blob. Call AppendBlock to append data to an append blob.\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n   *\n   * @param {AppendBlobCreateOptions} [options] Options to the Append Block Create operation.\n   * @returns {Promise<Models.AppendBlobsCreateResponse>}\n   * @memberof AppendBlobClient\n   */\n  public async create(\n    options: AppendBlobCreateOptions = {}\n  ): Promise<Models.AppendBlobCreateResponse> {\n    const aborter = options.abortSignal || Aborter.none;\n    options.accessConditions = options.accessConditions || {};\n    return this.appendBlobContext.create(0, {\n      abortSignal: aborter,\n      blobHTTPHeaders: options.blobHTTPHeaders,\n      leaseAccessConditions: options.accessConditions.leaseAccessConditions,\n      metadata: options.metadata,\n      modifiedAccessConditions: options.accessConditions.modifiedAccessConditions\n    });\n  }\n\n  /**\n   * Commits a new block of data to the end of the existing append blob.\n   * @see https://docs.microsoft.com/rest/api/storageservices/append-block\n   *\n   * @param {HttpRequestBody} body Data to be appended.\n   * @param {number} contentLength Number of bytes to be appended.\n   * @param {AppendBlobAppendBlockOptions} [options] Options to the Append Block operation.\n   * @returns {Promise<Models.AppendBlobsAppendBlockResponse>}\n   * @memberof AppendBlobClient\n   */\n  public async appendBlock(\n    body: HttpRequestBody,\n    contentLength: number,\n    options: AppendBlobAppendBlockOptions = {}\n  ): Promise<Models.AppendBlobAppendBlockResponse> {\n    const aborter = options.abortSignal || Aborter.none;\n    options.accessConditions = options.accessConditions || {};\n    return this.appendBlobContext.appendBlock(body, contentLength, {\n      abortSignal: aborter,\n      appendPositionAccessConditions: options.accessConditions.appendPositionAccessConditions,\n      leaseAccessConditions: options.accessConditions.leaseAccessConditions,\n      modifiedAccessConditions: options.accessConditions.modifiedAccessConditions,\n      onUploadProgress: options.progress,\n      transactionalContentMD5: options.transactionalContentMD5\n    });\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { EventEmitter } from \"events\";\nimport { Readable } from \"stream\";\n\n/**\n * OutgoingHandler is an async function triggered by BufferScheduler.\n */\nexport declare type OutgoingHandler = (buffer: Buffer, offset?: number) => Promise<any>;\n\n/**\n * This class accepts a Node.js Readable stream as input, and keeps reading data\n * from the stream into the internal buffer structure, until it reaches maxBuffers.\n * Every available buffer will try to trigger outgoingHandler.\n *\n * The internal buffer structure includes an incoming buffer array, and a outgoing\n * buffer array. The incoming buffer array includes the \"empty\" buffers can be filled\n * with new incoming data. The outgoing array includes the filled buffers to be\n * handled by outgoingHandler. Every above buffer size is defined by parameter bufferSize.\n *\n * NUM_OF_ALL_BUFFERS = BUFFERS_IN_INCOMING + BUFFERS_IN_OUTGOING + BUFFERS_UNDER_HANDLING\n *\n * NUM_OF_ALL_BUFFERS <= maxBuffers\n *\n * PERFORMANCE IMPROVEMENT TIPS:\n * 1. Input stream highWaterMark is better to set a same value with bufferSize\n *    parameter, which will avoid Buffer.concat() operations.\n * 2. Parallelism should set a smaller value than maxBuffers, which is helpful to\n *    reduce the possibility when a outgoing handler waits for the stream data.\n *    in this situation, outgoing handlers are blocked.\n *    Outgoing queue shouldn't be empty.\n * @export\n * @class BufferScheduler\n */\nexport class BufferScheduler {\n  /**\n   * Size of buffers in incoming and outgoing queues. This class will try to align\n   * data read from Readable stream into buffer chunks with bufferSize defined.\n   *\n   * @private\n   * @type {number}\n   * @memberof BufferScheduler\n   */\n  private readonly bufferSize: number;\n\n  /**\n   * How many buffers can be created or maintained.\n   *\n   * @private\n   * @type {number}\n   * @memberof BufferScheduler\n   */\n  private readonly maxBuffers: number;\n\n  /**\n   * A Node.js Readable stream.\n   *\n   * @private\n   * @type {Readable}\n   * @memberof BufferScheduler\n   */\n  private readonly readable: Readable;\n\n  /**\n   * OutgoingHandler is an async function triggered by BufferScheduler when there\n   * are available buffers in outgoing array.\n   *\n   * @private\n   * @type {OutgoingHandler}\n   * @memberof BufferScheduler\n   */\n  private readonly outgoingHandler: OutgoingHandler;\n\n  /**\n   * An internal event emitter.\n   *\n   * @private\n   * @type {EventEmitter}\n   * @memberof BufferScheduler\n   */\n  private readonly emitter: EventEmitter = new EventEmitter();\n\n  /**\n   * Concurrency of executing outgoingHandlers. (0 < parallelism <= maxBuffers)\n   *\n   * @private\n   * @type {number}\n   * @memberof BufferScheduler\n   */\n  private readonly parallelism: number;\n\n  /**\n   * An internal offset marker to track data offset in bytes of next outgoingHandler.\n   *\n   * @private\n   * @type {number}\n   * @memberof BufferScheduler\n   */\n  private offset: number = 0;\n\n  /**\n   * An internal marker to track whether stream is end.\n   *\n   * @private\n   * @type {boolean}\n   * @memberof BufferScheduler\n   */\n  private isStreamEnd: boolean = false;\n\n  /**\n   * An internal marker to track whether stream or outgoingHandler returns error.\n   *\n   * @private\n   * @type {boolean}\n   * @memberof BufferScheduler\n   */\n  private isError: boolean = false;\n\n  /**\n   * How many handlers are executing.\n   *\n   * @private\n   * @type {number}\n   * @memberof BufferScheduler\n   */\n  private executingOutgoingHandlers: number = 0;\n\n  /**\n   * Encoding of the input Readable stream which has string data type instead of Buffer.\n   *\n   * @private\n   * @type {string}\n   * @memberof BufferScheduler\n   */\n  private encoding?: string;\n\n  /**\n   * How many buffers have been allocated.\n   *\n   * @private\n   * @type {number}\n   * @memberof BufferScheduler\n   */\n  private numBuffers: number = 0;\n\n  /**\n   * Because this class doesn't know how much data every time stream pops, which\n   * is defined by highWaterMarker of the stream. So BufferScheduler will cache\n   * data received from the stream, when data in unresolvedDataArray exceeds the\n   * blockSize defined, it will try to concat a blockSize of buffer, fill into available\n   * buffers from incoming and push to outgoing array.\n   *\n   * @private\n   * @type {Buffer[]}\n   * @memberof BufferScheduler\n   */\n  private unresolvedDataArray: Buffer[] = [];\n\n  /**\n   * How much data consisted in unresolvedDataArray.\n   *\n   * @private\n   * @type {number}\n   * @memberof BufferScheduler\n   */\n  private unresolvedLength: number = 0;\n\n  /**\n   * The array includes all the available buffers can be used to fill data from stream.\n   *\n   * @private\n   * @type {Buffer[]}\n   * @memberof BufferScheduler\n   */\n  private incoming: Buffer[] = [];\n\n  /**\n   * The array (queue) includes all the buffers filled from stream data.\n   *\n   * @private\n   * @type {Buffer[]}\n   * @memberof BufferScheduler\n   */\n  private outgoing: Buffer[] = [];\n\n  /**\n   * Creates an instance of BufferScheduler.\n   *\n   * @param {Readable} readable A Node.js Readable stream\n   * @param {number} bufferSize Buffer size of every maintained buffer\n   * @param {number} maxBuffers How many buffers can be allocated\n   * @param {OutgoingHandler} outgoingHandler An async function scheduled to be\n   *                                          triggered when a buffer fully filled\n   *                                          with stream data\n   * @param {number} parallelism Concurrency of executing outgoingHandlers (>0)\n   * @param {string} [encoding] [Optional] Encoding of Readable stream when it's a string stream\n   * @memberof BufferScheduler\n   */\n  constructor(\n    readable: Readable,\n    bufferSize: number,\n    maxBuffers: number,\n    outgoingHandler: OutgoingHandler,\n    parallelism: number,\n    encoding?: string\n  ) {\n    if (bufferSize <= 0) {\n      throw new RangeError(`bufferSize must be larger than 0, current is ${bufferSize}`);\n    }\n\n    if (maxBuffers <= 0) {\n      throw new RangeError(`maxBuffers must be larger than 0, current is ${maxBuffers}`);\n    }\n\n    if (parallelism <= 0) {\n      throw new RangeError(`parallelism must be larger than 0, current is ${parallelism}`);\n    }\n\n    this.bufferSize = bufferSize;\n    this.maxBuffers = maxBuffers;\n    this.readable = readable;\n    this.outgoingHandler = outgoingHandler;\n    this.parallelism = parallelism;\n    this.encoding = encoding;\n  }\n\n  /**\n   * Start the scheduler, will return error when stream of any of the outgoingHandlers\n   * returns error.\n   *\n   * @returns {Promise<void>}\n   * @memberof BufferScheduler\n   */\n  public async do(): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      this.readable.on(\"data\", (data) => {\n        data = typeof data === \"string\" ? Buffer.from(data, this.encoding) : data;\n        this.appendUnresolvedData(data);\n\n        if (!this.resolveData()) {\n          this.readable.pause();\n        }\n      });\n\n      this.readable.on(\"error\", (err) => {\n        this.emitter.emit(\"error\", err);\n      });\n\n      this.readable.on(\"end\", () => {\n        this.isStreamEnd = true;\n        this.emitter.emit(\"checkEnd\");\n      });\n\n      this.emitter.on(\"error\", (err) => {\n        this.isError = true;\n        this.readable.pause();\n        reject(err);\n      });\n\n      this.emitter.on(\"checkEnd\", () => {\n        if (this.outgoing.length > 0) {\n          this.triggerOutgoingHandlers();\n          return;\n        }\n\n        if (this.isStreamEnd && this.executingOutgoingHandlers === 0) {\n          if (this.unresolvedLength > 0 && this.unresolvedLength < this.bufferSize) {\n            this.outgoingHandler(this.shiftBufferFromUnresolvedDataArray(), this.offset)\n              .then(resolve)\n              .catch(reject);\n          } else if (this.unresolvedLength >= this.bufferSize) {\n            return;\n          } else {\n            resolve();\n          }\n        }\n      });\n    });\n  }\n\n  /**\n   * Insert a new data into unresolved array.\n   *\n   * @private\n   * @param {Buffer} data\n   * @memberof BufferScheduler\n   */\n  private appendUnresolvedData(data: Buffer) {\n    this.unresolvedDataArray.push(data);\n    this.unresolvedLength += data.length;\n  }\n\n  /**\n   * Try to shift a buffer with size in blockSize. The buffer returned may be less\n   * than blockSize when data in unresolvedDataArray is less than bufferSize.\n   *\n   * @private\n   * @returns {Buffer}\n   * @memberof BufferScheduler\n   */\n  private shiftBufferFromUnresolvedDataArray(): Buffer {\n    if (this.unresolvedLength >= this.bufferSize) {\n      if (this.bufferSize === this.unresolvedDataArray[0].length) {\n        this.unresolvedLength -= this.bufferSize;\n        return this.unresolvedDataArray.shift()!;\n      }\n\n      // Lazy concat because Buffer.concat highly drops performance\n      let merged = Buffer.concat(this.unresolvedDataArray, this.unresolvedLength);\n      const buffer = merged.slice(0, this.bufferSize);\n      merged = merged.slice(this.bufferSize);\n      this.unresolvedDataArray = [merged];\n      this.unresolvedLength -= buffer.length;\n      return buffer;\n    } else if (this.unresolvedLength > 0) {\n      const merged = Buffer.concat(this.unresolvedDataArray, this.unresolvedLength);\n      this.unresolvedDataArray = [];\n      this.unresolvedLength = 0;\n      return merged;\n    } else {\n      return Buffer.allocUnsafe(0);\n    }\n  }\n\n  /**\n   * Resolve data in unresolvedDataArray. For every buffer with size in blockSize\n   * shifted, it will try to get (or allocate a buffer) from incoming, and fill it,\n   * then push it into outgoing to be handled by outgoing handler.\n   *\n   * Return false when available buffers in incoming are not enough, else true.\n   *\n   * @private\n   * @returns {boolean} Return false when buffers in incoming are not enough, else true.\n   * @memberof BufferScheduler\n   */\n  private resolveData(): boolean {\n    while (this.unresolvedLength >= this.bufferSize) {\n      let buffer: Buffer;\n\n      if (this.incoming.length > 0) {\n        buffer = this.incoming.shift()!;\n      } else {\n        if (this.numBuffers < this.maxBuffers) {\n          buffer = Buffer.allocUnsafe(this.bufferSize);\n          this.numBuffers++;\n        } else {\n          // No available buffer, wait for buffer returned\n          return false;\n        }\n      }\n\n      buffer.fill(this.shiftBufferFromUnresolvedDataArray());\n      this.outgoing.push(buffer);\n      this.triggerOutgoingHandlers();\n    }\n    return true;\n  }\n\n  /**\n   * Try to trigger a outgoing handler for every buffer in outgoing. Stop when\n   * parallelism reaches.\n   *\n   * @private\n   * @memberof BufferScheduler\n   */\n  private async triggerOutgoingHandlers() {\n    let buffer: Buffer | undefined;\n    do {\n      if (this.executingOutgoingHandlers >= this.parallelism) {\n        return;\n      }\n\n      buffer = this.outgoing.shift();\n      if (buffer) {\n        this.triggerOutgoingHandler(buffer);\n      }\n    } while (buffer);\n  }\n\n  /**\n   * Trigger a outgoing handler for a buffer shifted from outgoing.\n   *\n   * @private\n   * @param {Buffer} buffer\n   * @returns {Promise<any>}\n   * @memberof BufferScheduler\n   */\n  private async triggerOutgoingHandler(buffer: Buffer): Promise<any> {\n    const bufferLength = buffer.length;\n\n    this.executingOutgoingHandlers++;\n    this.offset += bufferLength;\n\n    try {\n      await this.outgoingHandler(buffer, this.offset - bufferLength);\n    } catch (err) {\n      this.emitter.emit(\"error\", err);\n      return;\n    }\n\n    this.executingOutgoingHandlers--;\n    this.reuseBuffer(buffer);\n    this.emitter.emit(\"checkEnd\");\n  }\n\n  /**\n   * Return buffer used by outgoing handler into incoming.\n   *\n   * @private\n   * @param {Buffer} buffer\n   * @memberof BufferScheduler\n   */\n  private reuseBuffer(buffer: Buffer) {\n    this.incoming.push(buffer);\n    if (!this.isError && this.resolveData() && !this.isStreamEnd) {\n      this.readable.resume();\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport * as fs from \"fs\";\n\nimport {\n  generateUuid,\n  HttpRequestBody,\n  HttpResponse,\n  TransferProgressEvent,\n  TokenCredential,\n  isTokenCredential,\n  isNode\n} from \"@azure/core-http\";\n\nimport * as Models from \"./generated/lib/models\";\nimport { Aborter } from \"./Aborter\";\nimport { BlobClient } from \"./internal\";\nimport { BlockBlob } from \"./generated/lib/operations\";\nimport { BlobHTTPHeaders } from \"./generated/lib/models\";\nimport { Range, rangeToString } from \"./Range\";\nimport { BlobAccessConditions, Metadata } from \"./models\";\nimport { newPipeline, NewPipelineOptions, Pipeline } from \"./Pipeline\";\nimport {\n  setURLParameter,\n  extractConnectionStringParts,\n  generateBlockID\n} from \"./utils/utils.common\";\nimport { SharedKeyCredential } from \"./credentials/SharedKeyCredential\";\nimport { Credential } from \"./credentials/Credential\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport {\n  URLConstants,\n  BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES,\n  BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES,\n  BLOCK_BLOB_MAX_BLOCKS,\n  DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES\n} from \"./utils/constants\";\nimport { BufferScheduler } from \"./utils/BufferScheduler\";\nimport { Readable } from \"stream\";\nimport { Batch } from \"./utils/Batch\";\n\n/**\n * Options to configure Block Blob - Upload operation.\n *\n * @export\n * @interface BlockBlobUploadOptions\n */\nexport interface BlockBlobUploadOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof BlockBlobUploadOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * Conditions to meet when uploading to the block blob.\n   *\n   * @type {BlobAccessConditions}\n   * @memberof BlockBlobUploadOptions\n   */\n  accessConditions?: BlobAccessConditions;\n  /**\n   * HTTP headers to set when uploading to a block blob.\n   *\n   * @type {Models.BlobHTTPHeaders}\n   * @memberof BlockBlobUploadOptions\n   */\n  blobHTTPHeaders?: Models.BlobHTTPHeaders;\n  /**\n   * A collection of key-value string pair to associate with the blob when uploading to a block blob.\n   *\n   * @type {Metadata}\n   * @memberof BlockBlobUploadOptions\n   */\n  metadata?: Metadata;\n  /**\n   * Callback to receive events on the progress of upload operation.\n   *\n   * @memberof BlockBlobUploadOptions\n   */\n  progress?: (progress: TransferProgressEvent) => void;\n}\n\n/**\n * Options to configure Block Blob - Stage Block operation.\n *\n * @export\n * @interface BlockBlobStageBlockOptions\n */\nexport interface BlockBlobStageBlockOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof BlockBlobStageBlockOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * If specified, contains the lease id that must be matched and lease with this id\n   * must be active in order for the operation to succeed.\n   *\n   * @type {Models.LeaseAccessConditions}\n   * @memberof BlockBlobStageBlockOptions\n   */\n  leaseAccessConditions?: Models.LeaseAccessConditions;\n  /**\n   * Callback to receive events on the progress of stage block operation.\n   *\n   * @memberof BlockBlobStageBlockOptions\n   */\n  progress?: (progress: TransferProgressEvent) => void;\n  /**\n   * A Uint8Array holding the MD5 hash of the block content.\n   * It is only used to verify the integrity of the block during transport.\n   * It is not stored in with the blob.\n   *\n   * @type {Uint8Array}\n   * @memberof BlockBlobStageBlockOptions\n   */\n  transactionalContentMD5?: Uint8Array;\n}\n\n/**\n * Options to configure Block Blob - Stage Block from URL operation.\n *\n * @export\n * @interface BlockBlobStageBlockFromURLOptions\n */\nexport interface BlockBlobStageBlockFromURLOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof BlockBlobStageBlockFromURLOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * Specifies the bytes of the source Blob/File to upload.\n   * If not specified, the entire content is uploaded as a single block.\n   *\n   * @type {Range}\n   * @memberof BlockBlobStageBlockFromURLOptions\n   */\n  range?: Range;\n  /**\n   * If specified, contains the lease id that must be matched and lease with this id\n   * must be active in order for the operation to succeed.\n   *\n   * @type {Models.LeaseAccessConditions}\n   * @memberof BlockBlobStageBlockFromURLOptions\n   */\n  leaseAccessConditions?: Models.LeaseAccessConditions;\n  /**\n   * A Uint8Array holding the MD5 hash of the source block content.\n   * It is only used to verify the integrity of the block during transport.\n   * It is not stored in with the blob.\n   *\n   * @type {Uint8Array}\n   * @memberof BlockBlobStageBlockFromURLOptions\n   */\n  sourceContentMD5?: Uint8Array;\n}\n\n/**\n * Options to configure Block Blob - Commit Block List operation.\n *\n * @export\n * @interface BlockBlobCommitBlockListOptions\n */\nexport interface BlockBlobCommitBlockListOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof BlockBlobCommitBlockListOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * Conditions to meet when committing the block list.\n   *\n   * @type {BlobAccessConditions}\n   * @memberof BlockBlobCommitBlockListOptions\n   */\n  /**\n   * Conditions to meet when committing block list.\n   *\n   * @type {BlobAccessConditions}\n   * @memberof BlockBlobCommitBlockListOptions\n   */\n  accessConditions?: BlobAccessConditions;\n  /**\n   * HTTP headers to set when committing block list.\n   *\n   * @type {Models.BlobHTTPHeaders}\n   * @memberof BlockBlobCommitBlockListOptions\n   */\n  blobHTTPHeaders?: Models.BlobHTTPHeaders;\n  /**\n   * A collection of key-value string pair to associate with the blob when committing block list.\n   *\n   * @type {Metadata}\n   * @memberof BlockBlobCommitBlockListOptions\n   */\n  metadata?: Metadata;\n}\n\n/**\n * Options to configure Block Blob - Get Block List operation.\n *\n * @export\n * @interface BlockBlobGetBlockListOptions\n */\nexport interface BlockBlobGetBlockListOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof BlockBlobGetBlockListOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * If specified, contains the lease id that must be matched and lease with this id\n   * must be active in order for the operation to succeed.\n   *\n   * @type {Models.LeaseAccessConditions}\n   * @memberof BlockBlobGetBlockListOptions\n   */\n  leaseAccessConditions?: Models.LeaseAccessConditions;\n}\n\n/**\n * Option interface for uploadStream().\n *\n * @export\n * @interface UploadStreamToBlockBlobOptions\n */\nexport interface UploadStreamToBlockBlobOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof IUploadToBlockBlobOptions\n   */\n  abortSignal?: Aborter;\n\n  /**\n   * Blob HTTP Headers.\n   *\n   * @type {BlobHTTPHeaders}\n   * @memberof UploadStreamToBlockBlobOptions\n   */\n  blobHTTPHeaders?: BlobHTTPHeaders;\n\n  /**\n   * Metadata of block blob.\n   *\n   * @type {{ [propertyName: string]: string }}\n   * @memberof UploadStreamToBlockBlobOptions\n   */\n  metadata?: { [propertyName: string]: string };\n\n  /**\n   * Access conditions headers.\n   *\n   * @type {BlobAccessConditions}\n   * @memberof UploadStreamToBlockBlobOptions\n   */\n  accessConditions?: BlobAccessConditions;\n\n  /**\n   * Progress updater.\n   *\n   * @memberof UploadStreamToBlockBlobOptions\n   */\n  progress?: (progress: TransferProgressEvent) => void;\n}\n/**\n * Option interface for BlockBlobClient.uploadFile() and BlockBlobClient.uploadSeekableStream().\n *\n * @export\n * @interface UploadToBlockBlobOptions\n */\nexport interface UploadToBlockBlobOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof IUploadToBlockBlobOptions\n   */\n  abortSignal?: Aborter;\n\n  /**\n   * Destination block blob size in bytes.\n   *\n   * @type {number}\n   * @memberof UploadToBlockBlobOptions\n   */\n  blockSize?: number;\n\n  /**\n   * Blob size threshold in bytes to start concurrency uploading.\n   * Default value is 256MB, blob size less than this option will\n   * be uploaded via one I/O operation without concurrency.\n   * You can customize a value less equal than the default value.\n   *\n   * @type {number}\n   * @memberof UploadToBlockBlobOptions\n   */\n  maxSingleShotSize?: number;\n\n  /**\n   * Progress updater.\n   *\n   * @memberof UploadToBlockBlobOptions\n   */\n  progress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * Blob HTTP Headers.\n   *\n   * @type {IBlobHTTPHeaders}\n   * @memberof UploadToBlockBlobOptions\n   */\n  blobHTTPHeaders?: Models.BlobHTTPHeaders;\n\n  /**\n   * Metadata of block blob.\n   *\n   * @type {{ [propertyName: string]: string }}\n   * @memberof UploadToBlockBlobOptions\n   */\n  metadata?: { [propertyName: string]: string };\n\n  /**\n   * Access conditions headers.\n   *\n   * @type {BlobAccessConditions}\n   * @memberof UploadToBlockBlobOptions\n   */\n  blobAccessConditions?: BlobAccessConditions;\n\n  /**\n   * Concurrency of parallel uploading. Must be >= 0.\n   *\n   * @type {number}\n   * @memberof UploadToBlockBlobOptions\n   */\n  parallelism?: number;\n}\n\n/**\n * Type for BlockBlobClient.uploadFile(), BlockBlobClient.uploadStream() and BlockBlobClient.uploadBrowserDate().\n *\n * @export\n */\nexport type BlobUploadCommonResponse = Models.BlockBlobUploadHeaders & {\n  /**\n   * The underlying HTTP response.\n   *\n   * @type {HttpResponse}\n   * @memberof IBlobUploadCommonResponse\n   */\n  _response: HttpResponse;\n};\n\n/**\n * BlockBlobClient defines a set of operations applicable to block blobs.\n *\n * @export\n * @class BlockBlobClient\n * @extends {BlobClient}\n */\nexport class BlockBlobClient extends BlobClient {\n  /**\n   * blockBlobContext provided by protocol layer.\n   *\n   * @private\n   * @type {BlockBlobs}\n   * @memberof BlockBlobClient\n   */\n  private blockBlobContext: BlockBlob;\n\n  /**\n   * ONLY AVAILABLE IN NODE.JS RUNTIME.\n   *\n   * Creates an instance of BlockBlobClient.\n   *\n   * @param {string} connectionString Connection string for an Azure storage account.\n   * @param {string} containerName Container name.\n   * @param {string} blobName Blob name.\n   * @param {NewPipelineOptions} [options] Optional. Options to configure the HTTP pipeline.\n   * @memberof BlockBlobClient\n   */\n  constructor(\n    connectionString: string,\n    containerName: string,\n    blobName: string,\n    options?: NewPipelineOptions\n  );\n  /**\n   * Creates an instance of BlockBlobClient.\n   * This method accepts an encoded URL or non-encoded URL pointing to a block blob.\n   * Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   * If a blob name includes ? or %, blob name must be encoded in the URL.\n   *\n   * @param {string} url A URL string pointing to Azure Storage block blob, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer/blockblob\". You can\n   *                     append a SAS if using AnonymousCredential, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer/blockblob?sasString\".\n   *                     This method accepts an encoded URL or non-encoded URL pointing to a blob.\n   *                     Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   *                     However, if a blob name includes ? or %, blob name must be encoded in the URL.\n   *                     Such as a blob named \"my?blob%\", the URL should be \"https://myaccount.blob.core.windows.net/mycontainer/my%3Fblob%25\".\n   * @param {Credential | TokenCredential} credential Such as AnonymousCredential, SharedKeyCredential or TokenCredential.\n   * @param {NewPipelineOptions} [options] Optional. Options to configure the HTTP pipeline.\n   * @memberof BlockBlobClient\n   */\n  constructor(url: string, credential?: Credential | TokenCredential, options?: NewPipelineOptions);\n  /**\n   * Creates an instance of BlockBlobClient.\n   * This method accepts an encoded URL or non-encoded URL pointing to a block blob.\n   * Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   * If a blob name includes ? or %, blob name must be encoded in the URL.\n   *\n   * @param {string} url A URL string pointing to Azure Storage block blob, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer/blockblob\". You can\n   *                     append a SAS if using AnonymousCredential, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer/blockblob?sasString\".\n   *                     This method accepts an encoded URL or non-encoded URL pointing to a blob.\n   *                     Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   *                     However, if a blob name includes ? or %, blob name must be encoded in the URL.\n   *                     Such as a blob named \"my?blob%\", the URL should be \"https://myaccount.blob.core.windows.net/mycontainer/my%3Fblob%25\".\n   * @param {Pipeline} pipeline Call newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   * @memberof BlockBlobClient\n   */\n  constructor(url: string, pipeline: Pipeline);\n  constructor(\n    urlOrConnectionString: string,\n    credentialOrPipelineOrContainerName?: string | Credential | TokenCredential | Pipeline,\n    blobNameOrOptions?: string | NewPipelineOptions,\n    options?: NewPipelineOptions\n  ) {\n    // In TypeScript we cannot simply pass all parameters to super() like below so have to duplicate the code instead.\n    //   super(s, credentialOrPipelineOrContainerNameOrOptions, blobNameOrOptions, options);\n    let pipeline: Pipeline;\n    if (credentialOrPipelineOrContainerName instanceof Pipeline) {\n      pipeline = credentialOrPipelineOrContainerName;\n    } else if (\n      credentialOrPipelineOrContainerName instanceof Credential ||\n      isTokenCredential(credentialOrPipelineOrContainerName)\n    ) {\n      options = blobNameOrOptions as NewPipelineOptions;\n      pipeline = newPipeline(credentialOrPipelineOrContainerName, options);\n    } else if (\n      !credentialOrPipelineOrContainerName &&\n      typeof credentialOrPipelineOrContainerName !== \"string\"\n    ) {\n      // The second parameter is undefined. Use anonymous credential.\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    } else if (\n      credentialOrPipelineOrContainerName &&\n      typeof credentialOrPipelineOrContainerName === \"string\" &&\n      blobNameOrOptions &&\n      typeof blobNameOrOptions === \"string\"\n    ) {\n      if (isNode) {\n        const containerName = credentialOrPipelineOrContainerName;\n        const blobName = blobNameOrOptions;\n\n        const extractedCreds = extractConnectionStringParts(urlOrConnectionString);\n        const sharedKeyCredential = new SharedKeyCredential(\n          extractedCreds.accountName,\n          extractedCreds.accountKey\n        );\n        urlOrConnectionString = extractedCreds.url + \"/\" + containerName + \"/\" + blobName;\n        pipeline = newPipeline(sharedKeyCredential, options);\n      } else {\n        throw new Error(\"Connection string is only supported in Node.js environment\");\n      }\n    } else {\n      throw new Error(\"Expecting non-empty strings for containerName and blobName parameters\");\n    }\n    super(urlOrConnectionString, pipeline);\n    this.blockBlobContext = new BlockBlob(this.storageClientContext);\n  }\n\n  /**\n   * Creates a new BlockBlobClient object identical to the source but with the\n   * specified snapshot timestamp.\n   * Provide \"\" will remove the snapshot and return a URL to the base blob.\n   *\n   * @param {string} snapshot The snapshot timestamp.\n   * @returns {BlockBlobClient} A new BlockBlobClient object identical to the source but with the specified snapshot timestamp.\n   * @memberof BlockBlobClient\n   */\n  public withSnapshot(snapshot: string): BlockBlobClient {\n    return new BlockBlobClient(\n      setURLParameter(\n        this.url,\n        URLConstants.Parameters.SNAPSHOT,\n        snapshot.length === 0 ? undefined : snapshot\n      ),\n      this.pipeline\n    );\n  }\n\n  /**\n   * Creates a new block blob, or updates the content of an existing block blob.\n   * Updating an existing block blob overwrites any existing metadata on the blob.\n   * Partial updates are not supported; the content of the existing blob is\n   * overwritten with the new content. To perform a partial update of a block blob's,\n   * use stageBlock and commitBlockList.\n   *\n   * This is a non-parallel uploading method, please use uploadFile(),\n   * uploadStream() or uploadBrowserData() for better performance\n   * with concurrency uploading.\n   *\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n   *\n   * @param {HttpRequestBody} body Blob, string, ArrayBuffer, ArrayBufferView or a function\n   *                               which returns a new Readable stream whose offset is from data source beginning.\n   * @param {number} contentLength Length of body in bytes. Use Buffer.byteLength() to calculate body length for a\n   *                               string including non non-Base64/Hex-encoded characters.\n   * @param {BlockBlobUploadOptions} [options] Options to the Block Blob Upload operation.\n   * @returns {Promise<Models.BlockBlobUploadResponse>} Response data for the Block Blob Upload operation.\n   * @memberof BlockBlobClient\n   */\n  public async upload(\n    body: HttpRequestBody,\n    contentLength: number,\n    options: BlockBlobUploadOptions = {}\n  ): Promise<Models.BlockBlobUploadResponse> {\n    const aborter = options.abortSignal || Aborter.none;\n    options.accessConditions = options.accessConditions || {};\n    return this.blockBlobContext.upload(body, contentLength, {\n      abortSignal: aborter,\n      blobHTTPHeaders: options.blobHTTPHeaders,\n      leaseAccessConditions: options.accessConditions.leaseAccessConditions,\n      metadata: options.metadata,\n      modifiedAccessConditions: options.accessConditions.modifiedAccessConditions,\n      onUploadProgress: options.progress\n    });\n  }\n\n  /**\n   * Uploads the specified block to the block blob's \"staging area\" to be later\n   * committed by a call to commitBlockList.\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-block\n   *\n   * @param {string} blockId A 64-byte value that is base64-encoded\n   * @param {HttpRequestBody} body Data to upload to the staging area.\n   * @param {number} contentLength Number of bytes to upload.\n   * @param {BlockBlobStageBlockOptions} [options] Options to the Block Blob Stage Block operation.\n   * @returns {Promise<Models.BlockBlobStageBlockResponse>} Response data for the Block Blob Stage Block operation.\n   * @memberof BlockBlobClient\n   */\n  public async stageBlock(\n    blockId: string,\n    body: HttpRequestBody,\n    contentLength: number,\n    options: BlockBlobStageBlockOptions = {}\n  ): Promise<Models.BlockBlobStageBlockResponse> {\n    const aborter = options.abortSignal || Aborter.none;\n    return this.blockBlobContext.stageBlock(blockId, contentLength, body, {\n      abortSignal: aborter,\n      leaseAccessConditions: options.leaseAccessConditions,\n      onUploadProgress: options.progress,\n      transactionalContentMD5: options.transactionalContentMD5\n    });\n  }\n\n  /**\n   * The Stage Block From URL operation creates a new block to be committed as part\n   * of a blob where the contents are read from a URL.\n   * This API is available starting in version 2018-03-28.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/put-block-from-url\n   *\n   * @param {string} blockId A 64-byte value that is base64-encoded\n   * @param {string} sourceURL Specifies the URL of the blob. The value\n   *                           may be a URL of up to 2 KB in length that specifies a blob.\n   *                           The value should be URL-encoded as it would appear\n   *                           in a request URI. The source blob must either be public\n   *                           or must be authenticated via a shared access signature.\n   *                           If the source blob is public, no authentication is required\n   *                           to perform the operation. Here are some examples of source object URLs:\n   *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob\n   *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>\n   * @param {number} [offset] From which position of the blob to download, >= 0\n   * @param {number} [count] How much data to be downloaded, > 0. Will download to the end when undefined\n   * @param {BlockBlobStageBlockFromURLOptions} [options={}] Options to the Block Blob Stage Block From URL operation.\n   * @returns {Promise<Models.BlockBlobStageBlockFromURLResponse>} Response data for the Block Blob Stage Block From URL operation.\n   * @memberof BlockBlobClient\n   */\n  public async stageBlockFromURL(\n    blockId: string,\n    sourceURL: string,\n    offset: number = 0,\n    count?: number,\n    options: BlockBlobStageBlockFromURLOptions = {}\n  ): Promise<Models.BlockBlobStageBlockFromURLResponse> {\n    const aborter = options.abortSignal || Aborter.none;\n    return this.blockBlobContext.stageBlockFromURL(blockId, 0, sourceURL, {\n      abortSignal: aborter,\n      leaseAccessConditions: options.leaseAccessConditions,\n      sourceContentMD5: options.sourceContentMD5,\n      sourceRange: offset === 0 && !count ? undefined : rangeToString({ offset, count })\n    });\n  }\n\n  /**\n   * Writes a blob by specifying the list of block IDs that make up the blob.\n   * In order to be written as part of a blob, a block must have been successfully written\n   * to the server in a prior stageBlock operation. You can call commitBlockList to update a blob\n   * by uploading only those blocks that have changed, then committing the new and existing\n   * blocks together. Any blocks not specified in the block list and permanently deleted.\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-block-list\n   *\n   * @param {string[]} blocks  Array of 64-byte value that is base64-encoded\n   * @param {BlockBlobCommitBlockListOptions} [options] Options to the Block Blob Commit Block List operation.\n   * @returns {Promise<Models.BlockBlobCommitBlockListResponse>} Response data for the Block Blob Commit Block List operation.\n   * @memberof BlockBlobClient\n   */\n  public async commitBlockList(\n    blocks: string[],\n    options: BlockBlobCommitBlockListOptions = {}\n  ): Promise<Models.BlockBlobCommitBlockListResponse> {\n    const aborter = options.abortSignal || Aborter.none;\n    options.accessConditions = options.accessConditions || {};\n    return this.blockBlobContext.commitBlockList(\n      { latest: blocks },\n      {\n        abortSignal: aborter,\n        blobHTTPHeaders: options.blobHTTPHeaders,\n        leaseAccessConditions: options.accessConditions.leaseAccessConditions,\n        metadata: options.metadata,\n        modifiedAccessConditions: options.accessConditions.modifiedAccessConditions\n      }\n    );\n  }\n\n  /**\n   * Returns the list of blocks that have been uploaded as part of a block blob\n   * using the specified block list filter.\n   * @see https://docs.microsoft.com/rest/api/storageservices/get-block-list\n   *\n   * @param {Models.BlockListType} listType Specifies whether to return the list of committed blocks,\n   *                                        the list of uncommitted blocks, or both lists together.\n   * @param {BlockBlobGetBlockListOptions} [options] Options to the Block Blob Get Block List operation.\n   * @returns {Promise<Models.BlockBlobGetBlockListResponse>} Response data for the Block Blob Get Block List operation.\n   * @memberof BlockBlobClient\n   */\n  public async getBlockList(\n    listType: Models.BlockListType,\n    options: BlockBlobGetBlockListOptions = {}\n  ): Promise<Models.BlockBlobGetBlockListResponse> {\n    const aborter = options.abortSignal || Aborter.none;\n    const res = await this.blockBlobContext.getBlockList(listType, {\n      abortSignal: aborter,\n      leaseAccessConditions: options.leaseAccessConditions\n    });\n\n    if (!res.committedBlocks) {\n      res.committedBlocks = [];\n    }\n\n    if (!res.uncommittedBlocks) {\n      res.uncommittedBlocks = [];\n    }\n\n    return res;\n  }\n\n  // High level functions\n\n  /**\n   * ONLY AVAILABLE IN BROWSERS.\n   *\n   * Uploads a browser Blob/File/ArrayBuffer/ArrayBufferView object to block blob.\n   *\n   * When buffer length <= 256MB, this method will use 1 upload call to finish the upload.\n   * Otherwise, this method will call stageBlock to upload blocks, and finally call commitBlockList\n   * to commit the block list.\n   *\n   * @export\n   * @param {Blob | ArrayBuffer | ArrayBufferView} browserData Blob, File, ArrayBuffer or ArrayBufferView\n   * @param {UploadToBlockBlobOptions} [options] Options to upload browser data.\n   * @returns {Promise<BlobUploadCommonResponse>} Response data for the Blob Upload operation.\n   */\n  public async uploadBrowserData(\n    browserData: Blob | ArrayBuffer | ArrayBufferView,\n    options?: UploadToBlockBlobOptions\n  ): Promise<BlobUploadCommonResponse> {\n    const browserBlob = new Blob([browserData]);\n    return this.UploadSeekableBlob(\n      (offset: number, size: number): Blob => {\n        return browserBlob.slice(offset, offset + size);\n      },\n      browserBlob.size,\n      options\n    );\n  }\n\n  /**\n   * ONLY AVAILABLE IN BROWSERS.\n   *\n   * Uploads a browser Blob object to block blob. Requires a blobFactory as the data source,\n   * which need to return a Blob object with the offset and size provided.\n   *\n   * When buffer length <= 256MB, this method will use 1 upload call to finish the upload.\n   * Otherwise, this method will call stageBlock to upload blocks, and finally call commitBlockList\n   * to commit the block list.\n   *\n   * @param {(offset: number, size: number) => Blob} blobFactory\n   * @param {number} size size of the data to upload.\n   * @param {UploadToBlockBlobOptions} [options] Options to Upload to Block Blob operation.\n   * @returns {Promise<BlobUploadCommonResponse>} Response data for the Blob Upload operation.\n   */\n  private async UploadSeekableBlob(\n    blobFactory: (offset: number, size: number) => Blob,\n    size: number,\n    options: UploadToBlockBlobOptions = {}\n  ): Promise<BlobUploadCommonResponse> {\n    if (!options.blockSize) {\n      options.blockSize = 0;\n    }\n    if (options.blockSize < 0 || options.blockSize > BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES) {\n      throw new RangeError(\n        `blockSize option must be >= 0 and <= ${BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES}`\n      );\n    }\n\n    if (options.maxSingleShotSize !== 0 && !options.maxSingleShotSize) {\n      options.maxSingleShotSize = BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES;\n    }\n    if (\n      options.maxSingleShotSize < 0 ||\n      options.maxSingleShotSize > BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES\n    ) {\n      throw new RangeError(\n        `maxSingleShotSize option must be >= 0 and <= ${BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES}`\n      );\n    }\n\n    if (options.blockSize === 0) {\n      if (size > BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES * BLOCK_BLOB_MAX_BLOCKS) {\n        throw new RangeError(`${size} is too larger to upload to a block blob.`);\n      }\n      if (size > options.maxSingleShotSize) {\n        options.blockSize = Math.ceil(size / BLOCK_BLOB_MAX_BLOCKS);\n        if (options.blockSize < DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES) {\n          options.blockSize = DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES;\n        }\n      }\n    }\n    if (!options.blobHTTPHeaders) {\n      options.blobHTTPHeaders = {};\n    }\n    if (!options.blobAccessConditions) {\n      options.blobAccessConditions = {};\n    }\n\n    if (size <= options.maxSingleShotSize) {\n      return this.upload(blobFactory(0, size), size, options);\n    }\n\n    const numBlocks: number = Math.floor((size - 1) / options.blockSize) + 1;\n    if (numBlocks > BLOCK_BLOB_MAX_BLOCKS) {\n      throw new RangeError(\n        `The buffer's size is too big or the BlockSize is too small;` +\n          `the number of blocks must be <= ${BLOCK_BLOB_MAX_BLOCKS}`\n      );\n    }\n\n    const blockList: string[] = [];\n    const blockIDPrefix = generateUuid();\n    let transferProgress: number = 0;\n\n    const batch = new Batch(options.parallelism);\n    for (let i = 0; i < numBlocks; i++) {\n      batch.addOperation(\n        async (): Promise<any> => {\n          const blockID = generateBlockID(blockIDPrefix, i);\n          const start = options.blockSize! * i;\n          const end = i === numBlocks - 1 ? size : start + options.blockSize!;\n          const contentLength = end - start;\n          blockList.push(blockID);\n          await this.stageBlock(blockID, blobFactory(start, contentLength), contentLength, {\n            abortSignal: options.abortSignal,\n            leaseAccessConditions: options.blobAccessConditions!.leaseAccessConditions\n          });\n          // Update progress after block is successfully uploaded to server, in case of block trying\n          // TODO: Hook with convenience layer progress event in finer level\n          transferProgress += contentLength;\n          if (options.progress) {\n            options.progress!({\n              loadedBytes: transferProgress\n            });\n          }\n        }\n      );\n    }\n    await batch.do();\n\n    return this.commitBlockList(blockList, options);\n  }\n\n  /**\n   * ONLY AVAILABLE IN NODE.JS RUNTIME.\n   *\n   * Uploads a local file in blocks to a block blob.\n   *\n   * When file size <= 256MB, this method will use 1 upload call to finish the upload.\n   * Otherwise, this method will call stageBlock to upload blocks, and finally call commitBlockList\n   * to commit the block list.\n   *\n   * @param {string} filePath Full path of local file\n   * @param {UploadToBlockBlobOptions} [options] Options to Upload to Block Blob operation.\n   * @returns {(Promise<BlobUploadCommonResponse>)}  Response data for the Blob Upload operation.\n   */\n  public async uploadFile(\n    filePath: string,\n    options?: UploadToBlockBlobOptions\n  ): Promise<BlobUploadCommonResponse> {\n    const size = fs.statSync(filePath).size;\n    return this.uploadResetableStream(\n      (offset, count) =>\n        fs.createReadStream(filePath, {\n          autoClose: true,\n          end: count ? offset + count - 1 : Infinity,\n          start: offset\n        }),\n      size,\n      options\n    );\n  }\n\n  /**\n   * ONLY AVAILABLE IN NODE.JS RUNTIME.\n   *\n   * Uploads a Node.js Readable stream into block blob.\n   *\n   * PERFORMANCE IMPROVEMENT TIPS:\n   * * Input stream highWaterMark is better to set a same value with bufferSize\n   *    parameter, which will avoid Buffer.concat() operations.\n   *\n   * @param {Readable} stream Node.js Readable stream\n   * @param {BlockBlobClient} blockBlobClient A BlockBlobClient instance\n   * @param {number} bufferSize Size of every buffer allocated, also the block size in the uploaded block blob\n   * @param {number} maxBuffers Max buffers will allocate during uploading, positive correlation\n   *                            with max uploading concurrency\n   * @param {UploadStreamToBlockBlobOptions} [options] Options to Upload Stream to Block Blob operation.\n   * @returns {Promise<BlobUploadCommonResponse>} Response data for the Blob Upload operation.\n   */\n  public async uploadStream(\n    stream: Readable,\n    bufferSize: number,\n    maxBuffers: number,\n    options: UploadStreamToBlockBlobOptions = {}\n  ): Promise<BlobUploadCommonResponse> {\n    if (!options.blobHTTPHeaders) {\n      options.blobHTTPHeaders = {};\n    }\n    if (!options.accessConditions) {\n      options.accessConditions = {};\n    }\n\n    let blockNum = 0;\n    const blockIDPrefix = generateUuid();\n    let transferProgress: number = 0;\n    const blockList: string[] = [];\n\n    const scheduler = new BufferScheduler(\n      stream,\n      bufferSize,\n      maxBuffers,\n      async (buffer: Buffer) => {\n        const blockID = generateBlockID(blockIDPrefix, blockNum);\n        blockList.push(blockID);\n        blockNum++;\n\n        await this.stageBlock(blockID, buffer, buffer.length, {\n          leaseAccessConditions: options.accessConditions!.leaseAccessConditions\n        });\n\n        // Update progress after block is successfully uploaded to server, in case of block trying\n        transferProgress += buffer.length;\n        if (options.progress) {\n          options.progress({ loadedBytes: transferProgress });\n        }\n      },\n      // Parallelism should set a smaller value than maxBuffers, which is helpful to\n      // reduce the possibility when a outgoing handler waits for stream data, in\n      // this situation, outgoing handlers are blocked.\n      // Outgoing queue shouldn't be empty.\n      Math.ceil((maxBuffers / 4) * 3)\n    );\n    await scheduler.do();\n\n    return this.commitBlockList(blockList, options);\n  }\n\n  /**\n   * ONLY AVAILABLE IN NODE.JS RUNTIME.\n   *\n   * Accepts a Node.js Readable stream factory, and uploads in blocks to a block blob.\n   * The Readable stream factory must returns a Node.js Readable stream starting from the offset defined. The offset\n   * is the offset in the block blob to be uploaded.\n   *\n   * When buffer length <= 256MB, this method will use 1 upload call to finish the upload.\n   * Otherwise, this method will call stageBlock to upload blocks, and finally call commitBlockList\n   * to commit the block list.\n   *\n   * @export\n   * @param {(offset: number) => NodeJS.ReadableStream} streamFactory Returns a Node.js Readable stream starting\n   *                                                                  from the offset defined\n   * @param {number} size Size of the block blob\n   * @param {UploadToBlockBlobOptions} [options] Options to Upload to Block Blob operation.\n   * @returns {(Promise<BlobUploadCommonResponse>)}  Response data for the Blob Upload operation.\n   */\n  private async uploadResetableStream(\n    streamFactory: (offset: number, count?: number) => NodeJS.ReadableStream,\n    size: number,\n    options: UploadToBlockBlobOptions = {}\n  ): Promise<BlobUploadCommonResponse> {\n    if (!options.blockSize) {\n      options.blockSize = 0;\n    }\n    if (options.blockSize < 0 || options.blockSize > BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES) {\n      throw new RangeError(\n        `blockSize option must be >= 0 and <= ${BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES}`\n      );\n    }\n\n    if (options.maxSingleShotSize !== 0 && !options.maxSingleShotSize) {\n      options.maxSingleShotSize = BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES;\n    }\n    if (\n      options.maxSingleShotSize < 0 ||\n      options.maxSingleShotSize > BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES\n    ) {\n      throw new RangeError(\n        `maxSingleShotSize option must be >= 0 and <= ${BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES}`\n      );\n    }\n\n    if (options.blockSize === 0) {\n      if (size > BLOCK_BLOB_MAX_BLOCKS * BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES) {\n        throw new RangeError(`${size} is too larger to upload to a block blob.`);\n      }\n      if (size > options.maxSingleShotSize) {\n        options.blockSize = Math.ceil(size / BLOCK_BLOB_MAX_BLOCKS);\n        if (options.blockSize < DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES) {\n          options.blockSize = DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES;\n        }\n      }\n    }\n    if (!options.blobHTTPHeaders) {\n      options.blobHTTPHeaders = {};\n    }\n    if (!options.blobAccessConditions) {\n      options.blobAccessConditions = {};\n    }\n\n    if (size <= options.maxSingleShotSize) {\n      return this.upload(() => streamFactory(0), size, options);\n    }\n\n    const numBlocks: number = Math.floor((size - 1) / options.blockSize) + 1;\n    if (numBlocks > BLOCK_BLOB_MAX_BLOCKS) {\n      throw new RangeError(\n        `The buffer's size is too big or the BlockSize is too small;` +\n          `the number of blocks must be <= ${BLOCK_BLOB_MAX_BLOCKS}`\n      );\n    }\n\n    const blockList: string[] = [];\n    const blockIDPrefix = generateUuid();\n    let transferProgress: number = 0;\n\n    const batch = new Batch(options.parallelism);\n    for (let i = 0; i < numBlocks; i++) {\n      batch.addOperation(\n        async (): Promise<any> => {\n          const blockID = generateBlockID(blockIDPrefix, i);\n          const start = options.blockSize! * i;\n          const end = i === numBlocks - 1 ? size : start + options.blockSize!;\n          const contentLength = end - start;\n          blockList.push(blockID);\n          await this.stageBlock(blockID, () => streamFactory(start, contentLength), contentLength, {\n            abortSignal: options.abortSignal,\n            leaseAccessConditions: options.blobAccessConditions!.leaseAccessConditions\n          });\n          // Update progress after block is successfully uploaded to server, in case of block trying\n          transferProgress += contentLength;\n          if (options.progress) {\n            options.progress({ loadedBytes: transferProgress });\n          }\n        }\n      );\n    }\n    await batch.do();\n\n    return this.commitBlockList(blockList, options);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {\n  HttpRequestBody,\n  TransferProgressEvent,\n  TokenCredential,\n  isTokenCredential,\n  isNode\n} from \"@azure/core-http\";\n\nimport * as Models from \"./generated/lib/models\";\nimport { Aborter } from \"./Aborter\";\nimport { BlobClient } from \"./internal\";\nimport { PageBlob } from \"./generated/lib/operations\";\nimport { rangeToString } from \"./Range\";\nimport { BlobAccessConditions, Metadata, PageBlobAccessConditions } from \"./models\";\nimport { newPipeline, NewPipelineOptions, Pipeline } from \"./Pipeline\";\nimport { URLConstants } from \"./utils/constants\";\nimport { setURLParameter, extractConnectionStringParts } from \"./utils/utils.common\";\nimport { SharedKeyCredential } from \"./credentials/SharedKeyCredential\";\nimport { Credential } from \"./credentials/Credential\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\n\n/**\n * Options to configure Page Blob - Create operation.\n *\n * @export\n * @interface PageBlobCreateOptions\n */\nexport interface PageBlobCreateOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof PageBlobCreateOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * Conditions to meet when creating a page blob.\n   *\n   * @type {BlobAccessConditions}\n   * @memberof PageBlobCreateOptions\n   */\n  accessConditions?: BlobAccessConditions;\n  /**\n   * A user-controlled value that can be used to track requests.\n   * The value must be between 0 and 2^63 - 1. The default value is 0.\n   *\n   * @type {number}\n   * @memberof PageBlobCreateOptions\n   */\n  blobSequenceNumber?: number;\n  /**\n   * HTTP headers to set when creating a page blob.\n   *\n   * @type {Models.BlobHTTPHeaders}\n   * @memberof PageBlobCreateOptions\n   */\n  blobHTTPHeaders?: Models.BlobHTTPHeaders;\n  /**\n   * A collection of key-value string pair to associate with the blob when creating append blobs.\n   *\n   * @type {Metadata}\n   * @memberof PageBlobCreateOptions\n   */\n  metadata?: Metadata;\n}\n\n/**\n * Options to configure Page Blob - Upload Pages operation.\n *\n * @export\n * @interface PageBlobUploadPagesOptions\n */\nexport interface PageBlobUploadPagesOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof PageBlobUploadPagesOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * Conditions to meet when uploading pages.\n   *\n   * @type {PageBlobAccessConditions}\n   * @memberof PageBlobUploadPagesOptions\n   */\n  accessConditions?: PageBlobAccessConditions;\n  /**\n   * Callback to receive events on the progress of upload pages operation.\n   *\n   * @memberof PageBlobUploadPagesOptions\n   */\n  progress?: (progress: TransferProgressEvent) => void;\n  /**\n   * A Uint8Array holding the MD5 hash of the blob content.\n   * It is only used to verify the integrity of the block during transport.\n   * It is not stored in with the blob.\n   *\n   * @type {Uint8Array}\n   * @memberof PageBlobUploadPagesOptions\n   */\n  transactionalContentMD5?: Uint8Array;\n}\n\n/**\n * Options to configure Page Blob - Clear Pages operation.\n *\n * @export\n * @interface PageBlobClearPagesOptions\n */\nexport interface PageBlobClearPagesOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof PageBlobClearPagesOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * Conditions to meet when clearing pages.\n   *\n   * @type {PageBlobAccessConditions}\n   * @memberof PageBlobClearPagesOptions\n   */\n  accessConditions?: PageBlobAccessConditions;\n}\n\n/**\n * Options to configure Page Blob - Get Page Ranges operation.\n *\n * @export\n * @interface PageBlobGetPageRangesOptions\n */\nexport interface PageBlobGetPageRangesOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof PageBlobGetPageRangesOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * Conditions to meet when getting page ranges.\n   *\n   * @type {BlobAccessConditions}\n   * @memberof PageBlobGetPageRangesOptions\n   */\n  accessConditions?: BlobAccessConditions;\n}\n\n/**\n * Options to configure Page Blob - Get Ranges Diff operation.\n *\n * @export\n * @interface PageBlobGetPageRangesDiffOptions\n */\nexport interface PageBlobGetPageRangesDiffOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof PageBlobGetPageRangesDiffOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * Conditions to meet when getting page ranges diff.\n   *\n   * @type {BlobAccessConditions}\n   * @memberof PageBlobGetPageRangesDiffOptions\n   */\n  accessConditions?: BlobAccessConditions;\n  /**\n   * (unused)\n   *\n   * @type {string}\n   * @memberof PageBlobGetPageRangesDiffOptions\n   */\n  range?: string;\n}\n\n/**\n * Options to configure Page Blob - Resize operation.\n *\n * @export\n * @interface PageBlobResizeOptions\n */\nexport interface PageBlobResizeOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof PageBlobResizeOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * Conditions to meet when resizing a page blob.\n   *\n   * @type {BlobAccessConditions}\n   * @memberof PageBlobResizeOptions\n   */\n  accessConditions?: BlobAccessConditions;\n}\n\n/**\n * Options to configure Page Blob - Update Sequence Number operation.\n *\n * @export\n * @interface PageBlobUpdateSequenceNumberOptions\n */\nexport interface PageBlobUpdateSequenceNumberOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof PageBlobUpdateSequenceNumberOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * Conditions to meet when updating sequence number.\n   *\n   * @type {BlobAccessConditions}\n   * @memberof PageBlobUpdateSequenceNumberOptions\n   */\n  accessConditions?: BlobAccessConditions;\n}\n\n/**\n * Options to configure Page Blob - Start Copy Incremental operation.\n *\n * @export\n * @interface PageBlobStartCopyIncrementalOptions\n */\nexport interface PageBlobStartCopyIncrementalOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof PageBlobStartCopyIncrementalOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * Conditions to meet when startting copy incremental operation.\n   *\n   * @type {Models.ModifiedAccessConditions}\n   * @memberof PageBlobStartCopyIncrementalOptions\n   */\n  modifiedAccessConditions?: Models.ModifiedAccessConditions;\n}\n\n/**\n * PageBlobClient defines a set of operations applicable to page blobs.\n *\n * @export\n * @class PageBlobClient\n * @extends {BlobClient}\n */\nexport class PageBlobClient extends BlobClient {\n  /**\n   * pageBlobsContext provided by protocol layer.\n   *\n   * @private\n   * @type {PageBlobs}\n   * @memberof PageBlobClient\n   */\n  private pageBlobContext: PageBlob;\n\n  /**\n   * ONLY AVAILABLE IN NODE.JS RUNTIME.\n   *\n   * Creates an instance of PageBlobClient.\n   *\n   * @param {string} connectionString Connection string for an Azure storage account.\n   * @param {string} containerName Container name.\n   * @param {string} blobName Blob name.\n   * @param {NewPipelineOptions} [options] Optional. Options to configure the HTTP pipeline.\n   * @memberof PageBlobClient\n   */\n  constructor(\n    connectionString: string,\n    containerName: string,\n    blobName: string,\n    options?: NewPipelineOptions\n  );\n  /**\n   * Creates an instance of PageBlobClient.\n   * This method accepts an encoded URL or non-encoded URL pointing to a blob.\n   * Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   * If a blob name includes ? or %, blob name must be encoded in the URL.\n   *\n   * @param {string} url A Client string pointing to Azure Storage blob service, such as\n   *                     \"https://myaccount.blob.core.windows.net\". You can append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.blob.core.windows.net?sasString\".\n   * @param {Credential | TokenCredential} credential Such as AnonymousCredential, SharedKeyCredential, RawTokenCredential,\n   *                                                  or a TokenCredential from @azure/identity.\n   * @param {NewPipelineOptions} [options] Optional. Options to configure the HTTP pipeline.\n   * @memberof PageBlobClient\n   */\n  constructor(url: string, credential: Credential | TokenCredential, options?: NewPipelineOptions);\n  /**\n   * Creates an instance of PageBlobClient.\n   *\n   * @param {string} url A URL string pointing to Azure Storage blob, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer/blob\".\n   *                     You can append a SAS if using AnonymousCredential, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer/blob?sasString\".\n   *                     This method accepts an encoded URL or non-encoded URL pointing to a blob.\n   *                     Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   *                     However, if a blob name includes ? or %, blob name must be encoded in the URL.\n   *                     Such as a blob named \"my?blob%\", the URL should be \"https://myaccount.blob.core.windows.net/mycontainer/my%3Fblob%25\".\n   * @param {Pipeline} pipeline Call newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   * @memberof PageBlobClient\n   */\n  constructor(url: string, pipeline: Pipeline);\n  constructor(\n    urlOrConnectionString: string,\n    credentialOrPipelineOrContainerName: string | Credential | TokenCredential | Pipeline,\n    blobNameOrOptions?: string | NewPipelineOptions,\n    options?: NewPipelineOptions\n  ) {\n    // In TypeScript we cannot simply pass all parameters to super() like below so have to duplicate the code instead.\n    //   super(s, credentialOrPipelineOrContainerNameOrOptions, blobNameOrOptions, options);\n    let pipeline: Pipeline;\n    if (credentialOrPipelineOrContainerName instanceof Pipeline) {\n      pipeline = credentialOrPipelineOrContainerName;\n    } else if (\n      credentialOrPipelineOrContainerName instanceof Credential ||\n      isTokenCredential(credentialOrPipelineOrContainerName)\n    ) {\n      options = blobNameOrOptions as NewPipelineOptions;\n      pipeline = newPipeline(credentialOrPipelineOrContainerName, options);\n    } else if (\n      !credentialOrPipelineOrContainerName &&\n      typeof credentialOrPipelineOrContainerName !== \"string\"\n    ) {\n      // The second parameter is undefined. Use anonymous credential.\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    } else if (\n      credentialOrPipelineOrContainerName &&\n      typeof credentialOrPipelineOrContainerName === \"string\" &&\n      blobNameOrOptions &&\n      typeof blobNameOrOptions === \"string\"\n    ) {\n      if (isNode) {\n        const containerName = credentialOrPipelineOrContainerName;\n        const blobName = blobNameOrOptions;\n\n        const extractedCreds = extractConnectionStringParts(urlOrConnectionString);\n        const sharedKeyCredential = new SharedKeyCredential(\n          extractedCreds.accountName,\n          extractedCreds.accountKey\n        );\n        urlOrConnectionString = extractedCreds.url + \"/\" + containerName + \"/\" + blobName;\n        pipeline = newPipeline(sharedKeyCredential, options);\n      } else {\n        throw new Error(\"Connection string is only supported in Node.js environment\");\n      }\n    } else {\n      throw new Error(\"Expecting non-empty strings for containerName and blobName parameters\");\n    }\n    super(urlOrConnectionString, pipeline);\n    this.pageBlobContext = new PageBlob(this.storageClientContext);\n  }\n\n  /**\n   * Creates a new PageBlobClient object identical to the source but with the\n   * specified snapshot timestamp.\n   * Provide \"\" will remove the snapshot and return a Client to the base blob.\n   *\n   * @param {string} snapshot The snapshot timestamp.\n   * @returns {PageBlobClient} A new PageBlobClient object identical to the source but with the specified snapshot timestamp.\n   * @memberof PageBlobClient\n   */\n  public withSnapshot(snapshot: string): PageBlobClient {\n    return new PageBlobClient(\n      setURLParameter(\n        this.url,\n        URLConstants.Parameters.SNAPSHOT,\n        snapshot.length === 0 ? undefined : snapshot\n      ),\n      this.pipeline\n    );\n  }\n\n  /**\n   * Creates a page blob of the specified length. Call uploadPages to upload data\n   * data to a page blob.\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n   *\n   * @param {number} size size of the page blob.\n   * @param {PageBlobCreateOptions} [options] Options to the Page Blob Create operation.\n   * @returns {Promise<Models.PageBlobCreateResponse>} Response data for the Page Blob Create operation.\n   * @memberof PageBlobClient\n   */\n  public async create(\n    size: number,\n    options: PageBlobCreateOptions = {}\n  ): Promise<Models.PageBlobCreateResponse> {\n    const aborter = options.abortSignal || Aborter.none;\n    options.accessConditions = options.accessConditions || {};\n    return this.pageBlobContext.create(0, size, {\n      abortSignal: aborter,\n      blobHTTPHeaders: options.blobHTTPHeaders,\n      blobSequenceNumber: options.blobSequenceNumber,\n      leaseAccessConditions: options.accessConditions.leaseAccessConditions,\n      metadata: options.metadata,\n      modifiedAccessConditions: options.accessConditions.modifiedAccessConditions\n    });\n  }\n\n  /**\n   * Writes 1 or more pages to the page blob. The start and end offsets must be a multiple of 512.\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-page\n   *\n   * @param {HttpRequestBody} body Data to upload\n   * @param {number} offset Offset of destination page blob\n   * @param {number} count Content length of body, also how many bytes to be uploaded\n   * @param {PageBlobUploadPagesOptions} [options] Options to the Page Blob Upload Pages operation.\n   * @returns {Promise<Models.PageBlobsUploadPagesResponse>} Response data for the Page Blob Upload Pages operation.\n   * @memberof PageBlobClient\n   */\n  public async uploadPages(\n    body: HttpRequestBody,\n    offset: number,\n    count: number,\n    options: PageBlobUploadPagesOptions = {}\n  ): Promise<Models.PageBlobUploadPagesResponse> {\n    const aborter = options.abortSignal || Aborter.none;\n    options.accessConditions = options.accessConditions || {};\n    return this.pageBlobContext.uploadPages(body, count, {\n      abortSignal: aborter,\n      leaseAccessConditions: options.accessConditions.leaseAccessConditions,\n      modifiedAccessConditions: options.accessConditions.modifiedAccessConditions,\n      onUploadProgress: options.progress,\n      range: rangeToString({ offset, count }),\n      sequenceNumberAccessConditions: options.accessConditions.sequenceNumberAccessConditions,\n      transactionalContentMD5: options.transactionalContentMD5\n    });\n  }\n\n  /**\n   * Frees the specified pages from the page blob.\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-page\n   *\n   * @param {number} [offset] Starting byte position of the pages to clear.\n   * @param {number} [count] Number of bytes to clear.\n   * @param {PageBlobClearPagesOptions} [options] Options to the Page Blob Clear Pages operation.\n   * @returns {Promise<Models.PageBlobClearPagesResponse>} Response data for the Page Blob Clear Pages operation.\n   * @memberof PageBlobClient\n   */\n  public async clearPages(\n    offset: number = 0,\n    count?: number,\n    options: PageBlobClearPagesOptions = {}\n  ): Promise<Models.PageBlobClearPagesResponse> {\n    const aborter = options.abortSignal || Aborter.none;\n    options.accessConditions = options.accessConditions || {};\n    return this.pageBlobContext.clearPages(0, {\n      abortSignal: aborter,\n      leaseAccessConditions: options.accessConditions.leaseAccessConditions,\n      modifiedAccessConditions: options.accessConditions.modifiedAccessConditions,\n      range: rangeToString({ offset, count }),\n      sequenceNumberAccessConditions: options.accessConditions.sequenceNumberAccessConditions\n    });\n  }\n\n  /**\n   * Returns the list of valid page ranges for a page blob or snapshot of a page blob.\n   * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n   *\n   * @param {number} [offset] Starting byte position of the page ranges.\n   * @param {number} [count] Number of bytes to get.\n   * @param {PageBlobGetPageRangesOptions} [options] Options to the Page Blob Get Ranges operation.\n   * @returns {Promise<Models.PageBlobGetPageRangesResponse>} Response data for the Page Blob Get Ranges operation.\n   * @memberof PageBlobClient\n   */\n  public async getPageRanges(\n    offset: number = 0,\n    count?: number,\n    options: PageBlobGetPageRangesOptions = {}\n  ): Promise<Models.PageBlobGetPageRangesResponse> {\n    const aborter = options.abortSignal || Aborter.none;\n    options.accessConditions = options.accessConditions || {};\n    return this.pageBlobContext.getPageRanges({\n      abortSignal: aborter,\n      leaseAccessConditions: options.accessConditions.leaseAccessConditions,\n      modifiedAccessConditions: options.accessConditions.modifiedAccessConditions,\n      range: rangeToString({ offset, count })\n    });\n  }\n\n  /**\n   * Gets the collection of page ranges that differ between a specified snapshot and this page blob.\n   * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n   *\n   * @param {number} offset Starting byte position of the page blob\n   * @param {number} count Number of bytes to get ranges diff.\n   * @param {string} prevSnapshot Timestamp of snapshot to retrive the difference.\n   * @param {PageBlobGetPageRangesDiffOptions} [options] Options to the Page Blob Get Page Ranges Diff operation.\n   * @returns {Promise<Models.PageBlobGetPageRangesDiffResponse>} Response data for the Page Blob Get Page Range Diff operation.\n   * @memberof PageBlobClient\n   */\n  public async getPageRangesDiff(\n    offset: number,\n    count: number,\n    prevSnapshot: string,\n    options: PageBlobGetPageRangesDiffOptions = {}\n  ): Promise<Models.PageBlobGetPageRangesDiffResponse> {\n    const aborter = options.abortSignal || Aborter.none;\n    options.accessConditions = options.accessConditions || {};\n    return this.pageBlobContext.getPageRangesDiff({\n      abortSignal: aborter,\n      leaseAccessConditions: options.accessConditions.leaseAccessConditions,\n      modifiedAccessConditions: options.accessConditions.modifiedAccessConditions,\n      prevsnapshot: prevSnapshot,\n      range: rangeToString({ offset, count })\n    });\n  }\n\n  /**\n   * Resizes the page blob to the specified size (which must be a multiple of 512).\n   * @see https://docs.microsoft.com/rest/api/storageservices/set-blob-properties\n   *\n   * @param {number} size Target size\n   * @param {PageBlobResizeOptions} [options] Options to the Page Blob Resize operation.\n   * @returns {Promise<Models.PageBlobResizeResponse>} Response data for the Page Blob Resize operation.\n   * @memberof PageBlobClient\n   */\n  public async resize(\n    size: number,\n    options: PageBlobResizeOptions = {}\n  ): Promise<Models.PageBlobResizeResponse> {\n    const aborter = options.abortSignal || Aborter.none;\n    options.accessConditions = options.accessConditions || {};\n    return this.pageBlobContext.resize(size, {\n      abortSignal: aborter,\n      leaseAccessConditions: options.accessConditions.leaseAccessConditions,\n      modifiedAccessConditions: options.accessConditions.modifiedAccessConditions\n    });\n  }\n\n  /**\n   * Sets a page blob's sequence number.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties\n   *\n   * @param {Models.SequenceNumberActionType} sequenceNumberAction Indicates how the service should modify the blob's sequence number.\n   * @param {number} [sequenceNumber] Required if sequenceNumberAction is max or update\n   * @param {PageBlobUpdateSequenceNumberOptions} [options] Options to the Page Blob Update Sequence Number operation.\n   * @returns {Promise<Models.PageBlobUpdateSequenceNumberResponse>} Response data for the Page Blob Update Sequence Number operation.\n   * @memberof PageBlobClient\n   */\n  public async updateSequenceNumber(\n    sequenceNumberAction: Models.SequenceNumberActionType,\n    sequenceNumber?: number,\n    options: PageBlobUpdateSequenceNumberOptions = {}\n  ): Promise<Models.PageBlobUpdateSequenceNumberResponse> {\n    const aborter = options.abortSignal || Aborter.none;\n    options.accessConditions = options.accessConditions || {};\n    return this.pageBlobContext.updateSequenceNumber(sequenceNumberAction, {\n      abortSignal: aborter,\n      blobSequenceNumber: sequenceNumber,\n      leaseAccessConditions: options.accessConditions.leaseAccessConditions,\n      modifiedAccessConditions: options.accessConditions.modifiedAccessConditions\n    });\n  }\n\n  /**\n   * Begins an operation to start an incremental copy from one page blob's snapshot to this page blob.\n   * The snapshot is copied such that only the differential changes between the previously\n   * copied snapshot are transferred to the destination.\n   * The copied snapshots are complete copies of the original snapshot and can be read or copied from as usual.\n   * @see https://docs.microsoft.com/rest/api/storageservices/incremental-copy-blob\n   * @see https://docs.microsoft.com/en-us/azure/virtual-machines/windows/incremental-snapshots\n   *\n   * @param {string} copySource Specifies the name of the source page blob snapshot. For example,\n   *                            https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>\n   * @param {PageBlobStartCopyIncrementalOptions} [options] Options to the Page Blob Copy Incremental operation.\n   * @returns {Promise<Models.PageBlobCopyIncrementalResponse>} Response data for the Page Blob Copy Incremental operation.\n   * @memberof PageBlobClient\n   */\n  public async startCopyIncremental(\n    copySource: string,\n    options: PageBlobStartCopyIncrementalOptions = {}\n  ): Promise<Models.PageBlobCopyIncrementalResponse> {\n    const aborter = options.abortSignal || Aborter.none;\n    return this.pageBlobContext.copyIncremental(copySource, {\n      abortSignal: aborter,\n      modifiedAccessConditions: options.modifiedAccessConditions\n    });\n  }\n}\n","if (typeof Symbol === undefined || !(Symbol as any).asyncIterator) {\n  (Symbol as any).asyncIterator = Symbol.for(\"Symbol.asyncIterator\");\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nrequire(\"@azure/core-asynciterator-polyfill\");\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {\n  HttpRequestBody,\n  HttpResponse,\n  TokenCredential,\n  isTokenCredential,\n  isNode\n} from \"@azure/core-http\";\nimport * as Models from \"./generated/lib/models\";\nimport { Aborter } from \"./Aborter\";\nimport { Container } from \"./generated/lib/operations\";\nimport { ContainerAccessConditions, Metadata } from \"./models\";\nimport { newPipeline, NewPipelineOptions, Pipeline } from \"./Pipeline\";\nimport { ETagNone } from \"./utils/constants\";\nimport {\n  appendToURLPath,\n  truncatedISO8061Date,\n  extractConnectionStringParts\n} from \"./utils/utils.common\";\nimport {\n  AppendBlobClient,\n  BlobClient,\n  BlockBlobClient,\n  PageBlobClient,\n  StorageClient,\n  BlockBlobUploadOptions,\n  BlobDeleteOptions\n} from \"./internal\";\nimport { Credential } from \"./credentials/Credential\";\nimport { SharedKeyCredential } from \"./credentials/SharedKeyCredential\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { LeaseClient } from \"./LeaseClient\";\nimport \"@azure/core-paging\";\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\n\n/**\n * Options to configure Container - Create operation.\n *\n * @export\n * @interface ContainerCreateOptions\n */\nexport interface ContainerCreateOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof ContainerCreateOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * A collection of key-value string pair to associate with the container.\n   *\n   * @type {Metadata}\n   * @memberof ContainerCreateOptions\n   */\n  metadata?: Metadata;\n  /**\n   * Specifies whether data in the container may be accessed publicly and the level of access. Possible values include:\n   * - `container`: Specifies full public read access for container and blob data. Clients can enumerate blobs within the container via anonymous request, but cannot enumerate containers within the storage account.\n   * - `blob`: Specifies public read access for blobs. Blob data within this container can be read via anonymous request, but container data is not available. Clients cannot enumerate blobs within the container via anonymous request.\n   *\n   * @type {Models.PublicAccessType}\n   * @memberof ContainerCreateOptions\n   */\n  access?: Models.PublicAccessType;\n}\n\n/**\n * Options to configure Container - Get Properties operation.\n *\n * @export\n * @interface ContainerGetPropertiesOptions\n */\nexport interface ContainerGetPropertiesOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof ContainerGetPropertiesOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * If specified, contains the lease id that must be matched and lease with this id\n   * must be active in order for the operation to succeed.\n   *\n   * @type {Models.LeaseAccessConditions}\n   * @memberof ContainerGetPropertiesOptions\n   */\n  leaseAccessConditions?: Models.LeaseAccessConditions;\n}\n\n/**\n * Options to configure Container - Delete operation.\n *\n * @export\n * @interface ContainerDeleteMethodOptions\n */\nexport interface ContainerDeleteMethodOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof ContainerDeleteMethodOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * Conditions to meet when deleting the container.\n   *\n   * @type {ContainerAccessConditions}\n   * @memberof ContainerDeleteMethodOptions\n   */\n  containerAccessConditions?: ContainerAccessConditions;\n}\n\n/**\n * Options to configure Container - Set Metadata operation.\n *\n * @export\n * @interface ContainerSetMetadataOptions\n */\nexport interface ContainerSetMetadataOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof ContainerSetMetadataOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * If specified, contains the lease id that must be matched and lease with this id\n   * must be active in order for the operation to succeed.\n   *\n   * @type {ContainerAccessConditions}\n   * @memberof ContainerSetMetadataOptions\n   */\n  containerAccessConditions?: ContainerAccessConditions;\n}\n\n/**\n * Options to configure Container - Get Access Policy operation.\n *\n * @export\n * @interface ContainerGetAccessPolicyOptions\n */\nexport interface ContainerGetAccessPolicyOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof ContainerGetAccessPolicyOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * If specified, contains the lease id that must be matched and lease with this id\n   * must be active in order for the operation to succeed.\n   *\n   * @type {Models.LeaseAccessConditions}\n   * @memberof ContainerGetAccessPolicyOptions\n   */\n  leaseAccessConditions?: Models.LeaseAccessConditions;\n}\n\n/**\n * Signed identifier.\n *\n * @export\n * @interface SignedIdentifier\n */\nexport interface SignedIdentifier {\n  /**\n   * @member {string} id a unique id\n   */\n  id: string;\n  /**\n   * @member {AccessPolicy} accessPolicy\n   */\n  accessPolicy: {\n    /**\n     * @member {Date} start the date-time the policy is active. A validate ISO string format, or Date\n     */\n    start: Date;\n    /**\n     * @member {string} expiry the date-time the policy expires. A validate ISO string format, or Date\n     */\n    expiry: Date;\n    /**\n     * @member {string} permission the permissions for the acl policy\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-acl\n     */\n    permission: string;\n  };\n}\n\nexport declare type ContainerGetAccessPolicyResponse = {\n  signedIdentifiers: SignedIdentifier[];\n} & Models.ContainerGetAccessPolicyHeaders & {\n    /**\n     * The underlying HTTP response.\n     */\n    _response: HttpResponse & {\n      /**\n       * The parsed HTTP response headers.\n       */\n      parsedHeaders: Models.ContainerGetAccessPolicyHeaders;\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: Models.SignedIdentifier[];\n    };\n  };\n\n/**\n * Options to configure Container - Set Access Policy operation.\n *\n * @export\n * @interface ContainerSetAccessPolicyOptions\n */\nexport interface ContainerSetAccessPolicyOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof ContainerSetAccessPolicyOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * Conditions to meet when setting the access policy.\n   *\n   * @type {ContainerAccessConditions}\n   * @memberof ContainerSetAccessPolicyOptions\n   */\n  containerAccessConditions?: ContainerAccessConditions;\n}\n\n/**\n * Options to configure Container - Acquire Lease operation.\n *\n * @export\n * @interface ContainerAcquireLeaseOptions\n */\nexport interface ContainerAcquireLeaseOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof ContainerAcquireLeaseOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * Conditions to meet when acquiring the lease.\n   *\n   * @type {Models.ModifiedAccessConditions}\n   * @memberof ContainerAcquireLeaseOptions\n   */\n  modifiedAccessConditions?: Models.ModifiedAccessConditions;\n}\n\n/**\n * Options to configure Container - Release Lease operation.\n *\n * @export\n * @interface ContainerReleaseLeaseOptions\n */\nexport interface ContainerReleaseLeaseOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof ContainerReleaseLeaseOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * Conditions to meet when releasing the lease.\n   *\n   * @type {Models.ModifiedAccessConditions}\n   * @memberof ContainerReleaseLeaseOptions\n   */\n  modifiedAccessConditions?: Models.ModifiedAccessConditions;\n}\n\n/**\n * Options to configure Container - Renew Lease operation.\n *\n * @export\n * @interface ContainerRenewLeaseOptions\n */\nexport interface ContainerRenewLeaseOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof ContainerRenewLeaseOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * Conditions to meet when renewing the lease.\n   *\n   * @type {Models.ModifiedAccessConditions}\n   * @memberof ContainerRenewLeaseOptions\n   */\n  modifiedAccessConditions?: Models.ModifiedAccessConditions;\n}\n\n/**\n * Options to configure Container - Break Lease operation.\n *\n * @export\n * @interface ContainerBreakLeaseOptions\n */\nexport interface ContainerBreakLeaseOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof ContainerBreakLeaseOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * Conditions to meet when breaking the lease.\n   *\n   * @type {Models.ModifiedAccessConditions}\n   * @memberof ContainerBreakLeaseOptions\n   */\n  modifiedAccessConditions?: Models.ModifiedAccessConditions;\n}\n\n/**\n * Options to configure Container - Change Lease operation.\n *\n * @export\n * @interface ContainerChangeLeaseOptions\n */\nexport interface ContainerChangeLeaseOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof ContainerChangeLeaseOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * Conditions to meet when changing the lease.\n   *\n   * @type {Models.ModifiedAccessConditions}\n   * @memberof ContainerChangeLeaseOptions\n   */\n  modifiedAccessConditions?: Models.ModifiedAccessConditions;\n}\n\n/**\n * Options to configure Container - List Blobs Segment operation.\n *\n * @interface ContainerListBlobsSegmentOptions\n */\ninterface ContainerListBlobsSegmentOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof ContainerListBlobsSegmentOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * @member {string} [prefix] Filters the results to return only containers\n   * whose name begins with the specified prefix.\n   */\n  prefix?: string;\n  /**\n   * @member {number} [maxresults] Specifies the maximum number of containers\n   * to return. If the request does not specify maxresults, or specifies a\n   * value greater than 5000, the server will return up to 5000 items. Note\n   * that if the listing operation crosses a partition boundary, then the\n   * service will return a continuation token for retrieving the remainder of\n   * the results. For this reason, it is possible that the service will return\n   * fewer results than specified by maxresults, or than the default of 5000.\n   */\n  maxresults?: number;\n  /**\n   * @member {ListBlobsIncludeItem[]} [include] Include this parameter to\n   * specify one or more datasets to include in the response.\n   */\n  include?: Models.ListBlobsIncludeItem[];\n}\n\n/**\n * Options to configure Container - List Blobs operation.\n *\n * @export\n * @interface ContainerListBlobsOptions\n */\nexport interface ContainerListBlobsOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof ContainerListBlobsOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * @member {string} [prefix] Filters the results to return only containers\n   * whose name begins with the specified prefix.\n   */\n  prefix?: string;\n  /**\n   * @member {ListBlobsIncludeItem[]} [include] Include this parameter to\n   * specify one or more datasets to include in the response.\n   */\n  include?: Models.ListBlobsIncludeItem[];\n}\n\n/**\n * A ContainerClient represents a URL to the Azure Storage container allowing you to manipulate its blobs.\n *\n * @export\n * @class ContainerClient\n */\nexport class ContainerClient extends StorageClient {\n  /**\n   * containerContext provided by protocol layer.\n   *\n   * @private\n   * @type {Containers}\n   * @memberof ContainerClient\n   */\n  private containerContext: Container;\n\n  /**\n   * ONLY AVAILABLE IN NODE.JS RUNTIME.\n   *\n   * Creates an instance of ContainerClient.\n   *\n   * @param {string} connectionString Connection string for an Azure storage account.\n   * @param {string} containerName Container name.\n   * @param {NewPipelineOptions} [options] Optional. Options to configure the HTTP pipeline.\n   * @memberof ContainerClient\n   */\n  constructor(connectionString: string, containerName: string, options?: NewPipelineOptions);\n  /**\n   * Creates an instance of PageBlobClient.\n   * This method accepts an encoded URL or non-encoded URL pointing to a page blob.\n   * Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   * If a blob name includes ? or %, blob name must be encoded in the URL.\n   *\n   * @param {string} url A URL string pointing to Azure Storage page blob, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer/pageblob\". You can\n   *                     append a SAS if using AnonymousCredential, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer/pageblob?sasString\".\n   *                     This method accepts an encoded URL or non-encoded URL pointing to a blob.\n   *                     Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   *                     However, if a blob name includes ? or %, blob name must be encoded in the URL.\n   *                     Such as a blob named \"my?blob%\", the URL should be \"https://myaccount.blob.core.windows.net/mycontainer/my%3Fblob%25\".\n   * @param {Credential | TokenCredential} credential Such as AnonymousCredential, SharedKeyCredential, RawTokenCredential,\n   *                                                  or a TokenCredential from @azure/identity. If not specified,\n   *                                                  AnonymousCredential is used.\n   * @param {NewPipelineOptions} [options] Optional. Options to configure the HTTP pipeline.\n   * @memberof ContainerClient\n   */\n  constructor(url: string, credential?: Credential | TokenCredential, options?: NewPipelineOptions);\n  /**\n   * Creates an instance of PageBlobClient.\n   * This method accepts an encoded URL or non-encoded URL pointing to a page blob.\n   * Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   * If a blob name includes ? or %, blob name must be encoded in the URL.\n   *\n   * @param {string} url A URL string pointing to Azure Storage page blob, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer/pageblob\". You can\n   *                     append a SAS if using AnonymousCredential, such as\n   *                     \"https://myaccount.blob.core.windows.net/mycontainer/pageblob?sasString\".\n   *                     This method accepts an encoded URL or non-encoded URL pointing to a blob.\n   *                     Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.\n   *                     However, if a blob name includes ? or %, blob name must be encoded in the URL.\n\n   *                     Such as a blob named \"my?blob%\", the URL should be \"https://myaccount.blob.core.windows.net/mycontainer/my%3Fblob%25\".\n   * @param {Pipeline} pipeline Call newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   * @memberof ContainerClient\n   */\n  constructor(url: string, pipeline: Pipeline);\n  constructor(\n    urlOrConnectionString: string,\n    credentialOrPipelineOrContainerName?: string | Credential | TokenCredential | Pipeline,\n    options?: NewPipelineOptions\n  ) {\n    let pipeline: Pipeline;\n    if (credentialOrPipelineOrContainerName instanceof Pipeline) {\n      pipeline = credentialOrPipelineOrContainerName;\n    } else if (\n      credentialOrPipelineOrContainerName instanceof Credential ||\n      isTokenCredential(credentialOrPipelineOrContainerName)\n    ) {\n      pipeline = newPipeline(credentialOrPipelineOrContainerName, options);\n    } else if (\n      !credentialOrPipelineOrContainerName &&\n      typeof credentialOrPipelineOrContainerName !== \"string\"\n    ) {\n      // The second parameter is undefined. Use anonymous credential.\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    } else if (\n      credentialOrPipelineOrContainerName &&\n      typeof credentialOrPipelineOrContainerName === \"string\"\n    ) {\n      if (isNode) {\n        const containerName = credentialOrPipelineOrContainerName;\n\n        const extractedCreds = extractConnectionStringParts(urlOrConnectionString);\n        const sharedKeyCredential = new SharedKeyCredential(\n          extractedCreds.accountName,\n          extractedCreds.accountKey\n        );\n        urlOrConnectionString = extractedCreds.url + \"/\" + containerName + \"/\";\n        pipeline = newPipeline(sharedKeyCredential, options);\n      } else {\n        throw new Error(\"Connection string is only supported in Node.js environment\");\n      }\n    } else {\n      throw new Error(\"Expecting non-empty strings for containerName parameter\");\n    }\n    super(urlOrConnectionString, pipeline);\n    this.containerContext = new Container(this.storageClientContext);\n  }\n\n  /**\n   * Creates a new container under the specified account. If the container with\n   * the same name already exists, the operation fails.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-container\n   *\n   * @param {ContainerCreateOptions} [options] Options to Container Create operation.\n   * @returns {Promise<Models.ContainerCreateResponse>}\n   * @memberof ContainerClient\n   */\n  public async create(\n    options: ContainerCreateOptions = {}\n  ): Promise<Models.ContainerCreateResponse> {\n    if (!options.abortSignal) {\n      options.abortSignal = Aborter.none;\n    }\n    // Spread operator in destructuring assignments,\n    // this will filter out unwanted properties from the response object into result object\n    return this.containerContext.create({\n      ...options\n    });\n  }\n\n  /**\n   * Creates a BlobClient object.\n   *\n   * @param {string} blobName A blob name\n   * @returns {BlobClient} A new BlobClient object for the given blob name.\n   * @memberof BlobClient\n   */\n  public getBlobClient(blobName: string): BlobClient {\n    return new BlobClient(appendToURLPath(this.url, encodeURIComponent(blobName)), this.pipeline);\n  }\n\n  /**\n   * Creates a AppendBlobClient object.\n   *\n   * @param {string} blobName An append blob name\n   * @returns {AppendBlobClient}\n   * @memberof ContainerClient\n   */\n  public getAppendBlobClient(blobName: string): AppendBlobClient {\n    return new AppendBlobClient(\n      appendToURLPath(this.url, encodeURIComponent(blobName)),\n      this.pipeline\n    );\n  }\n\n  /**\n   * Creates a BlockBlobClient object.\n   *\n   * @param {string} blobName A block blob name\n   * @returns {BlockBlobClient}\n   * @memberof ContainerClient\n   */\n  public getBlockBlobClient(blobName: string): BlockBlobClient {\n    return new BlockBlobClient(\n      appendToURLPath(this.url, encodeURIComponent(blobName)),\n      this.pipeline\n    );\n  }\n\n  /**\n   * Creates a PageBlobClient object.\n   *\n   * @param {string} blobName A page blob name\n   * @returns {PageBlobClient}\n   * @memberof ContainerClient\n   */\n  public getPageBlobClient(blobName: string): PageBlobClient {\n    return new PageBlobClient(\n      appendToURLPath(this.url, encodeURIComponent(blobName)),\n      this.pipeline\n    );\n  }\n\n  /**\n   * Returns all user-defined metadata and system properties for the specified\n   * container. The data returned does not include the container's list of blobs.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-properties\n   *\n   * @param {ContainersGetPropertiesOptions} [options] Options to Container Get Properties operation.\n   * @returns {Promise<Models.ContainerGetPropertiesResponse>}\n   * @memberof ContainerClient\n   */\n  public async getProperties(\n    options: ContainerGetPropertiesOptions = {}\n  ): Promise<Models.ContainerGetPropertiesResponse> {\n    if (!options.leaseAccessConditions) {\n      options.leaseAccessConditions = {};\n    }\n\n    const aborter = options.abortSignal || Aborter.none;\n\n    return this.containerContext.getProperties({\n      abortSignal: aborter,\n      ...options.leaseAccessConditions\n    });\n  }\n\n  /**\n   * Marks the specified container for deletion. The container and any blobs\n   * contained within it are later deleted during garbage collection.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container\n   *\n   * @param {ContainerDeleteMethodOptions} [options] Options to Container Delete operation.\n   * @returns {Promise<Models.ContainerDeleteResponse>}\n   * @memberof ContainerClient\n   */\n  public async delete(\n    options: ContainerDeleteMethodOptions = {}\n  ): Promise<Models.ContainerDeleteResponse> {\n    const aborter = options.abortSignal || Aborter.none;\n\n    if (!options.containerAccessConditions) {\n      options.containerAccessConditions = {};\n    }\n\n    if (!options.containerAccessConditions.modifiedAccessConditions) {\n      options.containerAccessConditions.modifiedAccessConditions = {};\n    }\n\n    if (!options.containerAccessConditions.leaseAccessConditions) {\n      options.containerAccessConditions.leaseAccessConditions = {};\n    }\n\n    if (\n      (options.containerAccessConditions.modifiedAccessConditions.ifMatch &&\n        options.containerAccessConditions.modifiedAccessConditions.ifMatch !== ETagNone) ||\n      (options.containerAccessConditions.modifiedAccessConditions.ifNoneMatch &&\n        options.containerAccessConditions.modifiedAccessConditions.ifNoneMatch !== ETagNone)\n    ) {\n      throw new RangeError(\n        \"the IfMatch and IfNoneMatch access conditions must have their default\\\n        values because they are ignored by the service\"\n      );\n    }\n\n    return this.containerContext.deleteMethod({\n      abortSignal: aborter,\n      leaseAccessConditions: options.containerAccessConditions.leaseAccessConditions,\n      modifiedAccessConditions: options.containerAccessConditions.modifiedAccessConditions\n    });\n  }\n\n  /**\n   * Sets one or more user-defined name-value pairs for the specified container.\n   *\n   * If no option provided, or no metadata defined in the parameter, the container\n   * metadata will be removed.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-metadata\n   *\n   * @param {Metadata} [metadata] Replace existing metadata with this value.\n   *                               If no value provided the existing metadata will be removed.\n   * @param {ContainerSetMetadataOptions} [options] Options to Container Set Metadata operation.\n   * @returns {Promise<Models.ContainerSetMetadataResponse>}\n   * @memberof ContainerClient\n   */\n  public async setMetadata(\n    metadata?: Metadata,\n    options: ContainerSetMetadataOptions = {}\n  ): Promise<Models.ContainerSetMetadataResponse> {\n    const aborter = options.abortSignal || Aborter.none;\n\n    if (!options.containerAccessConditions) {\n      options.containerAccessConditions = {};\n    }\n\n    if (!options.containerAccessConditions.modifiedAccessConditions) {\n      options.containerAccessConditions.modifiedAccessConditions = {};\n    }\n\n    if (!options.containerAccessConditions.leaseAccessConditions) {\n      options.containerAccessConditions.leaseAccessConditions = {};\n    }\n\n    if (\n      options.containerAccessConditions.modifiedAccessConditions.ifUnmodifiedSince ||\n      (options.containerAccessConditions.modifiedAccessConditions.ifMatch &&\n        options.containerAccessConditions.modifiedAccessConditions.ifMatch !== ETagNone) ||\n      (options.containerAccessConditions.modifiedAccessConditions.ifNoneMatch &&\n        options.containerAccessConditions.modifiedAccessConditions.ifNoneMatch !== ETagNone)\n    ) {\n      throw new RangeError(\n        \"the IfUnmodifiedSince, IfMatch, and IfNoneMatch must have their default values\\\n        because they are ignored by the blob service\"\n      );\n    }\n\n    return this.containerContext.setMetadata({\n      abortSignal: aborter,\n      leaseAccessConditions: options.containerAccessConditions.leaseAccessConditions,\n      metadata,\n      modifiedAccessConditions: options.containerAccessConditions.modifiedAccessConditions\n    });\n  }\n\n  /**\n   * Gets the permissions for the specified container. The permissions indicate\n   * whether container data may be accessed publicly.\n   *\n   * WARNING: JavaScript Date will potential lost precision when parsing start and expiry string.\n   * For example, new Date(\"2018-12-31T03:44:23.8827891Z\").toISOString() will get \"2018-12-31T03:44:23.882Z\".\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-acl\n   *\n   * @param {ContainerGetAccessPolicyOptions} [options] Options to Container Get Access Policy operation.\n   * @returns {Promise<ContainerGetAccessPolicyResponse>}\n   * @memberof ContainerClient\n   */\n  public async getAccessPolicy(\n    options: ContainerGetAccessPolicyOptions = {}\n  ): Promise<ContainerGetAccessPolicyResponse> {\n    if (!options.leaseAccessConditions) {\n      options.leaseAccessConditions = {};\n    }\n    const aborter = options.abortSignal || Aborter.none;\n\n    const response = await this.containerContext.getAccessPolicy({\n      abortSignal: aborter,\n      leaseAccessConditions: options.leaseAccessConditions\n    });\n\n    const res: ContainerGetAccessPolicyResponse = {\n      _response: response._response,\n      blobPublicAccess: response.blobPublicAccess,\n      date: response.date,\n      eTag: response.eTag,\n      errorCode: response.errorCode,\n      lastModified: response.lastModified,\n      requestId: response.requestId,\n      signedIdentifiers: [],\n      version: response.version\n    };\n\n    for (const identifier of response) {\n      res.signedIdentifiers.push({\n        accessPolicy: {\n          expiry: new Date(identifier.accessPolicy.expiry),\n          permission: identifier.accessPolicy.permission,\n          start: new Date(identifier.accessPolicy.start)\n        },\n        id: identifier.id\n      });\n    }\n\n    return res;\n  }\n\n  /**\n   * Sets the permissions for the specified container. The permissions indicate\n   * whether blobs in a container may be accessed publicly.\n   *\n   * When you set permissions for a container, the existing permissions are replaced.\n   * If no access or containerAcl provided, the existing container ACL will be\n   * removed.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-acl\n   *\n   * @param {Models.PublicAccessType} [access] The level of public access to data in the container.\n   * @param {SignedIdentifier[]} [containerAcl] Array of elements each having a unique Id and details of the access policy.\n   * @param {ContainerSetAccessPolicyOptions} [options] Options to Container Set Access Policy operation.\n   * @returns {Promise<Models.ContainerSetAccessPolicyResponse>}\n   * @memberof ContainerClient\n   */\n  public async setAccessPolicy(\n    access?: Models.PublicAccessType,\n    containerAcl?: SignedIdentifier[],\n    options: ContainerSetAccessPolicyOptions = {}\n  ): Promise<Models.ContainerSetAccessPolicyResponse> {\n    const aborter = options.abortSignal || Aborter.none;\n    options.containerAccessConditions = options.containerAccessConditions || {};\n    const acl: Models.SignedIdentifier[] = [];\n    for (const identifier of containerAcl || []) {\n      acl.push({\n        accessPolicy: {\n          expiry: truncatedISO8061Date(identifier.accessPolicy.expiry),\n          permission: identifier.accessPolicy.permission,\n          start: truncatedISO8061Date(identifier.accessPolicy.start)\n        },\n        id: identifier.id\n      });\n    }\n\n    return this.containerContext.setAccessPolicy({\n      abortSignal: aborter,\n      access,\n      containerAcl: acl,\n      leaseAccessConditions: options.containerAccessConditions.leaseAccessConditions,\n      modifiedAccessConditions: options.containerAccessConditions.modifiedAccessConditions\n    });\n  }\n\n  /**\n   * Get a LeaseClient that manages leases on the container.\n   *\n   * @param {string} [proposeLeaseId] Initial proposed lease Id.\n   * @returns {LeaseClient} A new LeaseClient object for managing leases on the container.\n   * @memberof ContainerClient\n   */\n  public getLeaseClient(proposeLeaseId?: string): LeaseClient {\n    return new LeaseClient(this, proposeLeaseId);\n  }\n\n  /**\n   * Creates a new block blob, or updates the content of an existing block blob.\n   *\n   * Updating an existing block blob overwrites any existing metadata on the blob.\n   * Partial updates are not supported; the content of the existing blob is\n   * overwritten with the new content. To perform a partial update of a block blob's,\n   * use stageBlock and commitBlockList.\n   *\n   * This is a non-parallel uploading method, please use BlockBlobClient.uploadFile(),\n   * BlockBlobClient.uploadStream() or BlockBlobClient.uploadBrowserData() for better performance\n   * with concurrency uploading.\n   *\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n   *\n   * @param {string} blobName Name of the block blob to create or update.\n   * @param {HttpRequestBody} body Blob, string, ArrayBuffer, ArrayBufferView or a function\n   *                               which returns a new Readable stream whose offset is from data source beginning.\n   * @param {number} contentLength Length of body in bytes. Use Buffer.byteLength() to calculate body length for a\n   *                               string including non non-Base64/Hex-encoded characters.\n   * @param {BlockBlobUploadOptions} [options] Options to configure the Block Blob Upload operation.\n   * @returns {Promise<{ blockBlobClient: BlockBlobClient; response: Models.BlockBlobUploadResponse }>} Block Blob upload response data and the corresponding BlockBlobClient instance.\n   * @memberof ContainerClient\n   */\n  public async uploadBlockBlob(\n    blobName: string,\n    body: HttpRequestBody,\n    contentLength: number,\n    options?: BlockBlobUploadOptions\n  ): Promise<{ blockBlobClient: BlockBlobClient; response: Models.BlockBlobUploadResponse }> {\n    const blockBlobClient = this.getBlockBlobClient(blobName);\n    const response = await blockBlobClient.upload(body, contentLength, options);\n    return {\n      blockBlobClient,\n      response\n    };\n  }\n\n  /**\n   * Marks the specified blob or snapshot for deletion. The blob is later deleted\n   * during garbage collection. Note that in order to delete a blob, you must delete\n   * all of its snapshots. You can delete both at the same time with the Delete\n   * Blob operation.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob\n   *\n   * @param {string} blobName\n   * @param {BlobDeleteOptions} [options] Options to Blob Delete operation.\n   * @returns {Promise<Models.BlobDeleteResponse>} Block blob deletion response data.\n   * @memberof ContainerClient\n   */\n  public async deleteBlob(\n    blobName: string,\n    options?: BlobDeleteOptions\n  ): Promise<Models.BlobDeleteResponse> {\n    const blobClient = this.getBlobClient(blobName);\n    return await blobClient.delete(options);\n  }\n\n  /**\n   * listBlobFlatSegment returns a single segment of blobs starting from the\n   * specified Marker. Use an empty Marker to start enumeration from the beginning.\n   * After getting a segment, process it, and then call ListBlobsFlatSegment again\n   * (passing the the previously-returned Marker) to get the next segment.\n   * @see https://docs.microsoft.com/rest/api/storageservices/list-blobs\n   *\n   * @param {string} [marker] A string value that identifies the portion of the list to be returned with the next list operation.\n   * @param {ContainerListBlobsSegmentOptions} [options] Options to Container List Blob Flat Segment operation.\n   * @returns {Promise<Models.ContainerListBlobFlatSegmentResponse>}\n   * @memberof ContainerClient\n   */\n  private async listBlobFlatSegment(\n    marker?: string,\n    options: ContainerListBlobsSegmentOptions = {}\n  ): Promise<Models.ContainerListBlobFlatSegmentResponse> {\n    const aborter = options.abortSignal || Aborter.none;\n    return this.containerContext.listBlobFlatSegment({\n      abortSignal: aborter,\n      marker,\n      ...options\n    });\n  }\n\n  /**\n   * listBlobHierarchySegment returns a single segment of blobs starting from\n   * the specified Marker. Use an empty Marker to start enumeration from the\n   * beginning. After getting a segment, process it, and then call ListBlobsHierarchicalSegment\n   * again (passing the the previously-returned Marker) to get the next segment.\n   * @see https://docs.microsoft.com/rest/api/storageservices/list-blobs\n   *\n   * @param {string} delimiter The charactor or string used to define the virtual hierarchy\n   * @param {string} [marker] A string value that identifies the portion of the list to be returned with the next list operation.\n   * @param {ContainerListBlobsSegmentOptions} [options] Options to Container List Blob Hierarchy Segment operation.\n   * @returns {Promise<Models.ContainerListBlobHierarchySegmentResponse>}\n   * @memberof ContainerClient\n   */\n  private async listBlobHierarchySegment(\n    delimiter: string,\n    marker?: string,\n    options: ContainerListBlobsSegmentOptions = {}\n  ): Promise<Models.ContainerListBlobHierarchySegmentResponse> {\n    const aborter = options.abortSignal || Aborter.none;\n    return this.containerContext.listBlobHierarchySegment(delimiter, {\n      abortSignal: aborter,\n      marker,\n      ...options\n    });\n  }\n\n  /**\n   * Returns an AsyncIterableIterator for ContainerListBlobFlatSegmentResponse\n   *\n   * @private\n   * @param {string} [marker] A string value that identifies the portion of\n   *                          the list of blobs to be returned with the next listing operation. The\n   *                          operation returns the NextMarker value within the response body if the\n   *                          listing operation did not return all blobs remaining to be listed\n   *                          with the current page. The NextMarker value can be used as the value for\n   *                          the marker parameter in a subsequent call to request the next page of list\n   *                          items. The marker value is opaque to the client.\n   * @param {ContainerListBlobsSegmentOptions} [options] Options to list blobs operation.\n   * @returns {AsyncIterableIterator<Models.ContainerListBlobFlatSegmentResponse>}\n   * @memberof ContainerClient\n   */\n  private async *listSegments(\n    marker?: string,\n    options: ContainerListBlobsSegmentOptions = {}\n  ): AsyncIterableIterator<Models.ContainerListBlobFlatSegmentResponse> {\n    let listBlobsFlatSegmentResponse;\n    do {\n      listBlobsFlatSegmentResponse = await this.listBlobFlatSegment(marker, options);\n      marker = listBlobsFlatSegmentResponse.nextMarker;\n      yield await listBlobsFlatSegmentResponse;\n    } while (marker);\n  }\n\n  /**\n   * Returns an AsyncIterableIterator for Blob Items\n   *\n   * @private\n   * @param {ContainerListBlobsSegmentOptions} [options] Options to list blobs operation.\n   * @returns {AsyncIterableIterator<Models.BlobItem>}\n   * @memberof ContainerClient\n   */\n  private async *listItems(\n    options: ContainerListBlobsSegmentOptions = {}\n  ): AsyncIterableIterator<Models.BlobItem> {\n    let marker: string | undefined;\n    for await (const listBlobsFlatSegmentResponse of this.listSegments(marker, options)) {\n      yield* listBlobsFlatSegmentResponse.segment.blobItems;\n    }\n  }\n\n  /**\n   * Returns an async iterable iterator to list all the blobs\n   * under the specified account.\n   *\n   * .byPage() returns an async iterable iterator to list the blobs in pages.\n   *\n   * @example\n   *   let i = 1;\n   *   for await (const blob of containerClient.listBlobsFlat()) {\n   *     console.log(`Blob ${i++}: ${blob.name}`);\n   *   }\n   *\n   * @example\n   *   // Generator syntax .next()\n   *   let i = 1;\n   *   iter = containerClient.listBlobsFlat();\n   *   let blobItem = await iter.next();\n   *   while (!blobItem.done) {\n   *     console.log(`Blob ${i++}: ${blobItem.value.name}`);\n   *     blobItem = await iter.next();\n   *   }\n   *\n   * @example\n   *   // Example for .byPage()\n   *   // passing optional maxPageSize in the page settings\n   *   let i = 1;\n   *   for await (const response of containerClient.listBlobsFlat().byPage({ maxPageSize: 20 })) {\n   *     for (const blob of response.segment.blobItems) {\n   *       console.log(`Blob ${i++}: ${blob.name}`);\n   *     }\n   *   }\n   *\n   * @example\n   *   // Passing marker as an argument (similar to the previous example)\n   *   let i = 1;\n   *   let iterator = containerClient.listBlobsFlat().byPage({ maxPageSize: 2 });\n   *   let response = (await iterator.next()).value;\n   *   // Prints 2 blob names\n   *   for (const blob of response.segment.blobItems) {\n   *     console.log(`Blob ${i++}: ${blob.name}`);\n   *    }\n   *   // Gets next marker\n   *   let marker = response.nextMarker;\n   *    // Passing next marker as continuationToken\n   *   iterator = containerClient.listBlobsFlat().byPage({ continuationToken: marker, maxPageSize: 10 });\n   *   response = (await iterator.next()).value;\n   *   // Prints 10 blob names\n   *   for (const blob of response.segment.blobItems) {\n   *     console.log(`Blob ${i++}: ${blob.name}`);\n   *   }\n   *\n   * @param {ContainerListBlobsOptions} [options={}] Options to list blobs.\n   * @returns {PagedAsyncIterableIterator<Models.BlobItem, Models.ContainerListBlobFlatSegmentResponse>} An asyncIterableIterator that supports paging.\n   * @memberof ContainerClient\n   */\n  public listBlobsFlat(\n    options: ContainerListBlobsOptions = {}\n  ): PagedAsyncIterableIterator<Models.BlobItem, Models.ContainerListBlobFlatSegmentResponse> {\n    // AsyncIterableIterator to iterate over blobs\n    const iter = this.listItems(options);\n    return {\n      /**\n       * @member {Promise} [next] The next method, part of the iteration protocol\n       */\n      next() {\n        return iter.next();\n      },\n      /**\n       * @member {Symbol} [asyncIterator] The connection to the async iterator, part of the iteration protocol\n       */\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      /**\n       * @member {Function} [byPage] Return an AsyncIterableIterator that works a page at a time\n       */\n      byPage: (settings: PageSettings = {}) => {\n        return this.listSegments(settings.continuationToken, {\n          maxresults: settings.maxPageSize,\n          ...options\n        });\n      }\n    };\n  }\n\n  /**\n   * Returns an AsyncIterableIterator for ContainerListBlobHierarchySegmentResponse\n   *\n   * @private\n   * @param {string} [marker] A string value that identifies the portion of\n   *                          the list of blobs to be returned with the next listing operation. The\n   *                          operation returns the NextMarker value within the response body if the\n   *                          listing operation did not return all blobs remaining to be listed\n   *                          with the current page. The NextMarker value can be used as the value for\n   *                          the marker parameter in a subsequent call to request the next page of list\n   *                          items. The marker value is opaque to the client.\n   * @param {ContainerListBlobsSegmentOptions} [options] Options to list blobs operation.\n   * @returns {AsyncIterableIterator<Models.ContainerListBlobHierarchySegmentResponse>}\n   * @memberof ContainerClient\n   */ private async *listHierarchySegments(\n    delimiter: string,\n    marker?: string,\n    options: ContainerListBlobsSegmentOptions = {}\n  ): AsyncIterableIterator<Models.ContainerListBlobHierarchySegmentResponse> {\n    let listBlobsHierarchySegmentResponse;\n    do {\n      listBlobsHierarchySegmentResponse = await this.listBlobHierarchySegment(\n        delimiter,\n        marker,\n        options\n      );\n      marker = listBlobsHierarchySegmentResponse.nextMarker;\n      yield await listBlobsHierarchySegmentResponse;\n    } while (marker);\n  }\n\n  /**\n   * Returns an AsyncIterableIterator for BlobPrefixes and BlobItems\n   *\n   * @private\n   * @param {ContainerListBlobsSegmentOptions} [options] Options to list blobs operation.\n   * @returns {AsyncIterableIterator<{ kind: \"prefix\" } & Models.BlobPrefix | { kind: \"blob\" } & Models.BlobItem>}\n   * @memberof ContainerClient\n   */\n  private async *listItemsByHierarchy(\n    delimiter: string,\n    options: ContainerListBlobsSegmentOptions = {}\n  ): AsyncIterableIterator<\n    { kind: \"prefix\" } & Models.BlobPrefix | { kind: \"blob\" } & Models.BlobItem\n  > {\n    let marker: string | undefined;\n    for await (const listBlobsHierarchySegmentResponse of this.listHierarchySegments(\n      delimiter,\n      marker,\n      options\n    )) {\n      const segment = listBlobsHierarchySegmentResponse.segment;\n      if (segment.blobPrefixes) {\n        for (const prefix of segment.blobPrefixes) {\n          yield { kind: \"prefix\", ...prefix };\n        }\n      }\n      for (const blob of segment.blobItems) {\n        yield { kind: \"blob\", ...blob };\n      }\n    }\n  }\n\n  /**\n   * Returns an async iterable iterator to list all the blobs by hierarchy.\n   * under the specified account.\n   *\n   * .byPage() returns an async iterable iterator to list the blobs by hierarchy in pages.\n   *\n   * @example\n   *   for await (const item of containerClient.listBlobsByHierarchy(\"/\")) {\n   *     if (item.kind === \"prefix\") {\n   *       console.log(`\\tBlobPrefix: ${item.name}`);\n   *     } else {\n   *       console.log(`\\tBlobItem: name - ${item.name}, last modified - ${item.properties.lastModified}`);\n   *     }\n   *   }\n   *\n   * @example\n   * // Generator syntax .next() and passing a prefix\n   * let iter = await containerClient.listBlobsByHierarchy(\"/\", { prefix: \"prefix1/\" });\n   * let entity = await iter.next();\n   * while (!entity.done) {\n   *   let item = entity.value;\n   *   if (item.kind === \"prefix\") {\n   *     console.log(`\\tBlobPrefix: ${item.name}`);\n   *   } else {\n   *     console.log(`\\tBlobItem: name - ${item.name}, last modified - ${item.properties.lastModified}`);\n   *   }\n   *   entity = await iter.next();\n   * }\n   *\n   * @example\n   *   // byPage()\n   *   console.log(\"Listing blobs by hierarchy by page\");\n   *   for await (const response of containerClient.listBlobsByHierarchy(\"/\").byPage()) {\n   *     const segment = response.segment;\n   *     if (segment.blobPrefixes) {\n   *       for (const prefix of segment.blobPrefixes) {\n   *         console.log(`\\tBlobPrefix: ${prefix.name}`);\n   *       }\n   *     }\n   *     for (const blob of response.segment.blobItems) {\n   *       console.log(`\\tBlobItem: name - ${blob.name}, last modified - ${blob.properties.lastModified}`);\n   *     }\n   *   }\n   *\n   * @example\n   *   // 4. byPage() and passing a prefix and max page size\n   *   console.log(\"Listing blobs by hierarchy by page, specifying a prefix and a max page size\");\n   *   let i = 1;\n   *   for await (const response of containerClient.listBlobsByHierarchy(\"/\", { prefix: \"prefix2/sub1/\"}).byPage({ maxPageSize: 2 })) {\n   *     console.log(`Page ${i++}`);\n   *     const segment = response.segment;\n   *     if (segment.blobPrefixes) {\n   *       for (const prefix of segment.blobPrefixes) {\n   *         console.log(`\\tBlobPrefix: ${prefix.name}`);\n   *       }\n   *     }\n   *     for (const blob of response.segment.blobItems) {\n   *       console.log(`\\tBlobItem: name - ${blob.name}, last modified - ${blob.properties.lastModified}`);\n   *     }\n   *   }\n   *\n   * @param {string} delimiter The charactor or string used to define the virtual hierarchy\n   * @param {ContainerListBlobsOptions} [options={}] Options to list blobs operation.\n   * @returns {(PagedAsyncIterableIterator<\n   *   { kind: \"prefix\" } & Models.BlobPrefix | { kind: \"blob\" } & Models.BlobItem,\n   *     Models.ContainerListBlobHierarchySegmentResponse\n   *   >)}\n   * @memberof ContainerClient\n   */\n  public listBlobsByHierarchy(\n    delimiter: string,\n    options: ContainerListBlobsOptions = {}\n  ): PagedAsyncIterableIterator<\n    { kind: \"prefix\" } & Models.BlobPrefix | { kind: \"blob\" } & Models.BlobItem,\n    Models.ContainerListBlobHierarchySegmentResponse\n  > {\n    // AsyncIterableIterator to iterate over blob prefixes and blobs\n    const iter = this.listItemsByHierarchy(delimiter, options);\n    return {\n      /**\n       * @member {Promise} [next] The next method, part of the iteration protocol\n       */\n      async next() {\n        return iter.next();\n      },\n      /**\n       * @member {Symbol} [asyncIterator] The connection to the async iterator, part of the iteration protocol\n       */\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      /**\n       * @member {Function} [byPage] Return an AsyncIterableIterator that works a page at a time\n       */\n      byPage: (settings: PageSettings = {}) => {\n        return this.listHierarchySegments(delimiter, settings.continuationToken, {\n          maxresults: settings.maxPageSize,\n          ...options\n        });\n      }\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { TokenCredential, isTokenCredential } from \"@azure/core-http\";\nimport * as Models from \"./generated/lib/models\";\nimport { Aborter } from \"./Aborter\";\nimport { ListContainersIncludeType } from \"./generated/lib/models/index\";\nimport { Service } from \"./generated/lib/operations\";\nimport { newPipeline, NewPipelineOptions, Pipeline } from \"./Pipeline\";\nimport {\n  ContainerClient,\n  ContainerCreateOptions,\n  ContainerDeleteMethodOptions\n} from \"./ContainerClient\";\nimport { appendToURLPath, extractConnectionStringParts } from \"./utils/utils.common\";\nimport { Credential } from \"./credentials/Credential\";\nimport { SharedKeyCredential } from \"./credentials/SharedKeyCredential\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { StorageClient } from \"./internal\";\nimport \"@azure/core-paging\";\nimport { PageSettings, PagedAsyncIterableIterator } from \"@azure/core-paging\";\n\n/**\n * Options to configure the Service - Get Properties operation.\n *\n * @export\n * @interface ServiceGetPropertiesOptions\n */\nexport interface ServiceGetPropertiesOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof ServiceGetPropertiesOptions\n   */\n  abortSignal?: Aborter;\n}\n\n/**\n * Options to configure the Service - Set Properties operation.\n *\n * @export\n * @interface ServiceSetPropertiesOptions\n */\nexport interface ServiceSetPropertiesOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof ServiceSetPropertiesOptions\n   */\n  abortSignal?: Aborter;\n}\n\n/**\n * Options to configure the Service - Get Account Info operation.\n *\n * @export\n * @interface ServiceGetAccountInfoOptions\n */\nexport interface ServiceGetAccountInfoOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof ServiceGetAccountInfoOptions\n   */\n  abortSignal?: Aborter;\n}\n\n/**\n * Options to configure the Service - Get Statistics operation.\n *\n * @export\n * @interface ServiceGetStatisticsOptions\n */\nexport interface ServiceGetStatisticsOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof ServiceGetStatisticsOptions\n   */\n  abortSignal?: Aborter;\n}\n\n/**\n * Options to configure the Service - List Container Segment operation.\n *\n * @interface ServiceListContainersSegmentOptions\n */\ninterface ServiceListContainersSegmentOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof ServiceListContainersSegmentOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * @member {string} [prefix] Filters the results to return only containers\n   * whose name begins with the specified prefix.\n   */\n  prefix?: string;\n  /**\n   * @member {number} [maxresults] Specifies the maximum number of containers\n   * to return. If the request does not specify maxresults, or specifies a\n   * value greater than 5000, the server will return up to 5000 items. Note\n   * that if the listing operation crosses a partition boundary, then the\n   * service will return a continuation token for retrieving the remainder of\n   * the results. For this reason, it is possible that the service will return\n   * fewer results than specified by maxresults, or than the default of 5000.\n   */\n  maxresults?: number;\n  /**\n   * @member {ListContainersIncludeType} [include] Include this parameter to\n   * specify that the container's metadata be returned as part of the response\n   * body. Possible values include: 'metadata'\n   */\n  include?: ListContainersIncludeType;\n}\n\n/**\n * Options to configure the Service - List Containers operation.\n *\n * @export\n * @interface ServiceListContainersOptions\n */\nexport interface ServiceListContainersOptions {\n  /**\n   * Aborter instance to cancel request. It can be created with Aborter.none\n   * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples\n   * about request cancellation.\n   *\n   * @type {Aborter}\n   * @memberof ServiceListContainersOptions\n   */\n  abortSignal?: Aborter;\n  /**\n   * @member {string} [prefix] Filters the results to return only containers\n   * whose name begins with the specified prefix.\n   */\n  prefix?: string;\n  /**\n   * @member {ListContainersIncludeType} [include] Include this parameter to\n   * specify that the container's metadata be returned as part of the response\n   * body. Possible values include: 'metadata'\n   */\n  include?: ListContainersIncludeType;\n}\n\n/**\n * A BlobServiceClient represents a Client to the Azure Storage Blob service allowing you\n * to manipulate blob containers.\n *\n * @export\n * @class BlobServiceClient\n */\nexport class BlobServiceClient extends StorageClient {\n  /**\n   * serviceContext provided by protocol layer.\n   *\n   * @private\n   * @type {Service}\n   * @memberof BlobServiceClient\n   */\n  private serviceContext: Service;\n\n  /**\n   * ONLY AVAILABLE IN NODE.JS RUNTIME.\n   *\n   * Creates an instance of BlobServiceClient from connection string.\n   *\n   * @param {string} connectionString Connection string for an Azure storage account.\n   * @param {NewPipelineOptions} [options] Optional. Options to configure the HTTP pipeline.\n   * @memberof BlobServiceClient\n   */\n  public static fromConnectionString(connectionString: string, options?: NewPipelineOptions) {\n    const extractedCreds = extractConnectionStringParts(connectionString);\n    const sharedKeyCredential = new SharedKeyCredential(\n      extractedCreds.accountName,\n      extractedCreds.accountKey\n    );\n    const pipeline = newPipeline(sharedKeyCredential, options);\n    return new BlobServiceClient(extractedCreds.url, pipeline);\n  }\n\n  /**\n   * Creates an instance of BlobServiceClient.\n   *\n   * @param {string} url A Client string pointing to Azure Storage blob service, such as\n   *                     \"https://myaccount.blob.core.windows.net\". You can append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.blob.core.windows.net?sasString\".\n   * @param {Credential | TokenCredential} credential Such as AnonymousCredential, SharedKeyCredential, RawTokenCredential,\n   *                                                  or a TokenCredential from @azure/identity. If not specified,\n   *                                                  AnonymousCredential is used.\n   * @param {NewPipelineOptions} [options] Optional. Options to configure the HTTP pipeline.\n   * @memberof BlobServiceClient\n   */\n  constructor(url: string, credential?: Credential | TokenCredential, options?: NewPipelineOptions);\n  /**\n   * Creates an instance of BlobServiceClient.\n   *\n   * @param {string} url A Client string pointing to Azure Storage blob service, such as\n   *                     \"https://myaccount.blob.core.windows.net\". You can append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.blob.core.windows.net?sasString\".\n   * @param {Pipeline} pipeline Call newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   * @memberof BlobServiceClient\n   */\n  constructor(url: string, pipeline: Pipeline);\n  constructor(\n    url: string,\n    credentialOrPipeline?: Credential | TokenCredential | Pipeline,\n    options?: NewPipelineOptions\n  ) {\n    let pipeline: Pipeline;\n    if (credentialOrPipeline instanceof Pipeline) {\n      pipeline = credentialOrPipeline;\n    } else if (\n      credentialOrPipeline instanceof Credential ||\n      isTokenCredential(credentialOrPipeline)\n    ) {\n      pipeline = newPipeline(credentialOrPipeline, options);\n    } else {\n      // The second parameter is undefined. Use anonymous credential\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    }\n    super(url, pipeline);\n    this.serviceContext = new Service(this.storageClientContext);\n  }\n\n  /**\n   * Creates a ContainerClient object\n   *\n   * @param containerName A container name\n   * @returns {ContainerClient} A new ContainerClient object for the given container name.\n   * @memberof BlobServiceClient\n   */\n  public getContainerClient(containerName: string): ContainerClient {\n    return new ContainerClient(\n      appendToURLPath(this.url, encodeURIComponent(containerName)),\n      this.pipeline\n    );\n  }\n\n  /**\n   * Create a Blob container.\n   *\n   * @param {string} containerName Name of the container to create.\n   * @param {ContainerCreateOptions} [options] Options to configure Container Create operation.\n   * @returns {Promise<{ containerClient: ContainerClient; containerCreateResponse: Models.ContainerCreateResponse }>} Container creation response and the corresponding container client.\n   * @memberof BlobServiceClient\n   */\n  public async createContainer(\n    containerName: string,\n    options?: ContainerCreateOptions\n  ): Promise<{\n    containerClient: ContainerClient;\n    containerCreateResponse: Models.ContainerCreateResponse;\n  }> {\n    const containerClient = this.getContainerClient(containerName);\n    const containerCreateResponse = await containerClient.create(options);\n    return {\n      containerClient,\n      containerCreateResponse\n    };\n  }\n\n  /**\n   * Deletes a Blob container.\n   *\n   * @param {string} containerName Name of the container to delete.\n   * @param {ContainerDeleteMethodOptions} [options] Options to configure Container Delete operation.\n   * @returns {Promise<Models.ContainerDeleteResponse>} Container deletion response.\n   * @memberof BlobServiceClient\n   */\n  public async deleteContainer(\n    containerName: string,\n    options?: ContainerDeleteMethodOptions\n  ): Promise<Models.ContainerDeleteResponse> {\n    const containerClient = this.getContainerClient(containerName);\n    return await containerClient.delete(options);\n  }\n\n  /**\n   * Gets the properties of a storage account’s Blob service, including properties\n   * for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties}\n   *\n   * @param {ServiceGetPropertiesOptions} [options] Options to the Service Get Properties operation.\n   * @returns {Promise<Models.ServiceGetPropertiesResponse>} Response data for the Service Get Properties operation.\n   * @memberof BlobServiceClient\n   */\n  public async getProperties(\n    options: ServiceGetPropertiesOptions = {}\n  ): Promise<Models.ServiceGetPropertiesResponse> {\n    const aborter = options.abortSignal || Aborter.none;\n    return this.serviceContext.getProperties({\n      abortSignal: aborter || Aborter.none\n    });\n  }\n\n  /**\n   * Sets properties for a storage account’s Blob service endpoint, including properties\n   * for Storage Analytics, CORS (Cross-Origin Resource Sharing) rules and soft delete settings.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-service-properties}\n   *\n   * @param {Models.StorageServiceProperties} properties\n   * @param {ServiceSetPropertiesOptions} [options] Options to the Service Set Properties operation.\n   * @returns {Promise<Models.ServiceSetPropertiesResponse>} Response data for the Service Set Properties operation.\n   * @memberof BlobServiceClient\n   */\n  public async setProperties(\n    properties: Models.StorageServiceProperties,\n    options: ServiceSetPropertiesOptions = {}\n  ): Promise<Models.ServiceSetPropertiesResponse> {\n    const aborter = options.abortSignal || Aborter.none;\n    return this.serviceContext.setProperties(properties, {\n      abortSignal: aborter || Aborter.none\n    });\n  }\n\n  /**\n   * Retrieves statistics related to replication for the Blob service. It is only\n   * available on the secondary location endpoint when read-access geo-redundant\n   * replication is enabled for the storage account.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-stats}\n   *\n   * @param {ServiceGetStatisticsOptions} [options] Options to the Service Get Statistics operation.\n   * @returns {Promise<Models.ServiceGetStatisticsResponse>} Response data for the Service Get Statistics operation.\n   * @memberof BlobServiceClient\n   */\n  public async getStatistics(\n    options: ServiceGetStatisticsOptions = {}\n  ): Promise<Models.ServiceGetStatisticsResponse> {\n    const aborter = options.abortSignal || Aborter.none;\n    return this.serviceContext.getStatistics({\n      abortSignal: aborter || Aborter.none\n    });\n  }\n\n  /**\n   * The Get Account Information operation returns the sku name and account kind\n   * for the specified account.\n   * The Get Account Information operation is available on service versions beginning\n   * with version 2018-03-28.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-account-information\n   *\n   * @param {ServiceGetAccountInfoOptions} [options] Options to the Service Get Account Info operation.\n   * @returns {Promise<Models.ServiceGetAccountInfoResponse>} Response data for the Service Get Account Info operation.\n   * @memberof BlobServiceClient\n   */\n  public async getAccountInfo(\n    options: ServiceGetAccountInfoOptions = {}\n  ): Promise<Models.ServiceGetAccountInfoResponse> {\n    const aborter = options.abortSignal || Aborter.none;\n    return this.serviceContext.getAccountInfo({\n      abortSignal: aborter || Aborter.none\n    });\n  }\n\n  /**\n   * Returns a list of the containers under the specified account.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/list-containers2\n   *\n   * @param {Aborter} aborter Create a new Aborter instance with Aborter.none or Aborter.timeout(),\n   *                          goto documents of Aborter for more examples about request cancellation\n   * @param {string} [marker] A string value that identifies the portion of\n   *                          the list of containers to be returned with the next listing operation. The\n   *                          operation returns the NextMarker value within the response body if the\n   *                          listing operation did not return all containers remaining to be listed\n   *                          with the current page. The NextMarker value can be used as the value for\n   *                          the marker parameter in a subsequent call to request the next page of list\n   *                          items. The marker value is opaque to the client.\n   * @param {ServiceListContainersSegmentOptions} [options] Options to the Service List Container Segment operation.\n   * @returns {Promise<Models.ServiceListContainersSegmentResponse>} Response data for the Service List Container Segment operation.\n   * @memberof BlobServiceClient\n   */\n  private async listContainersSegment(\n    marker?: string,\n    options: ServiceListContainersSegmentOptions = {}\n  ): Promise<Models.ServiceListContainersSegmentResponse> {\n    const aborter = options.abortSignal || Aborter.none;\n    return this.serviceContext.listContainersSegment({\n      abortSignal: aborter,\n      marker,\n      ...options\n    });\n  }\n\n  /**\n   * Returns an AsyncIterableIterator for ServiceListContainersSegmentResponses\n   *\n   * @private\n   * @param {string} [marker] A string value that identifies the portion of\n   *                          the list of containers to be returned with the next listing operation. The\n   *                          operation returns the NextMarker value within the response body if the\n   *                          listing operation did not return all containers remaining to be listed\n   *                          with the current page. The NextMarker value can be used as the value for\n   *                          the marker parameter in a subsequent call to request the next page of list\n   *                          items. The marker value is opaque to the client.\n   * @param {ServiceListContainersSegmentOptions} [options] Options to list containers operation.\n   * @returns {AsyncIterableIterator<Models.ServiceListContainersSegmentResponse>}\n   * @memberof BlobServiceClient\n   */\n  private async *listSegments(\n    marker?: string,\n    options: ServiceListContainersSegmentOptions = {}\n  ): AsyncIterableIterator<Models.ServiceListContainersSegmentResponse> {\n    let listContainersSegmentResponse;\n    do {\n      listContainersSegmentResponse = await this.listContainersSegment(marker, options);\n      marker = listContainersSegmentResponse.nextMarker;\n      yield await listContainersSegmentResponse;\n    } while (marker);\n  }\n\n  /**\n   * Returns an AsyncIterableIterator for Container Items\n   *\n   * @private\n   * @param {ServiceListContainersSegmentOptions} [options] Options to list containers operation.\n   * @returns {AsyncIterableIterator<Models.ServiceListcontainersSegmentResponse>}\n   * @memberof BlobServiceClient\n   */\n  private async *listItems(\n    options: ServiceListContainersSegmentOptions = {}\n  ): AsyncIterableIterator<Models.ContainerItem> {\n    let marker: string | undefined;\n    for await (const segment of this.listSegments(marker, options)) {\n      yield* segment.containerItems;\n    }\n  }\n\n  /**\n   * Returns an async iterable iterator to list all the containers\n   * under the specified account.\n   *\n   * .byPage() returns an async iterable iterator to list the containers in pages.\n   *\n   * @example\n   *   let i = 1;\n   *   for await (const container of blobServiceClient.listContainers()) {\n   *     console.log(`Container ${i++}: ${container.name}`);\n   *   }\n   *\n   * @example\n   *   // Generator syntax .next()\n   *   let i = 1;\n   *   iter = blobServiceClient.listContainers();\n   *   let containerItem = await iter.next();\n   *   while (!containerItem.done) {\n   *     console.log(`Container ${i++}: ${containerItem.value.name}`);\n   *     containerItem = await iter.next();\n   *   }\n   *\n   * @example\n   *   // Example for .byPage()\n   *   // passing optional maxPageSize in the page settings\n   *   let i = 1;\n   *   for await (const response of blobServiceClient.listContainers().byPage({ maxPageSize: 20 })) {\n   *     if (response.containerItems) {\n   *       for (const container of response.containerItems) {\n   *         console.log(`Container ${i++}: ${container.name}`);\n   *       }\n   *     }\n   *   }\n   *\n   * @example\n   *   // Passing marker as an argument (similar to the previous example)\n   *   let i = 1;\n   *   let iterator = blobServiceClient.listContainers().byPage({ maxPageSize: 2 });\n   *   let response = (await iterator.next()).value;\n   *   // Prints 2 container names\n   *   if (response.containerItems) {\n   *     for (const container of response.containerItems) {\n   *       console.log(`Container ${i++}: ${container.name}`);\n   *     }\n   *   }\n   *   // Gets next marker\n   *   let marker = response.nextMarker;\n   *   // Passing next marker as continuationToken\n   *   iterator = blobServiceClient\n   *     .listContainers()\n   *     .byPage({ continuationToken: marker, maxPageSize: 10 });\n   *   response = (await iterator.next()).value;\n   *   // Prints 10 container names\n   *   if (response.containerItems) {\n   *     for (const container of response.containerItems) {\n   *        console.log(`Container ${i++}: ${container.name}`);\n   *     }\n   *   }\n   *\n   *\n   * @param {ServiceListContainersOptions} [options={}] Options to list containers.\n   * @returns {PagedAsyncIterableIterator<Models.ContainerItem, Models.ServiceListContainersSegmentResponse>} An asyncIterableIterator that supports paging.\n   * @memberof BlobServiceClient\n   */\n  public listContainers(\n    options: ServiceListContainersOptions = {}\n  ): PagedAsyncIterableIterator<Models.ContainerItem, Models.ServiceListContainersSegmentResponse> {\n    // AsyncIterableIterator to iterate over containers\n    const iter = this.listItems(options);\n    return {\n      /**\n       * @member {Promise} [next] The next method, part of the iteration protocol\n       */\n      next() {\n        return iter.next();\n      },\n      /**\n       * @member {Symbol} [asyncIterator] The connection to the async iterator, part of the iteration protocol\n       */\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      /**\n       * @member {Function} [byPage] Return an AsyncIterableIterator that works a page at a time\n       */\n      byPage: (settings: PageSettings = {}) => {\n        return this.listSegments(settings.continuationToken, {\n          maxresults: settings.maxPageSize,\n          ...options\n        });\n      }\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { TokenCredential, GetTokenOptions, AccessToken } from \"@azure/core-http\";\n\n/**\n * RawTokenCredential is a TokenCredential that always returns the given token.\n * Renew the token by setting a new token string value to token property.\n *\n * @example\n *  const rawTokenCredential = new RawTokenCredential(\"token\");\n *  const pipeline = newPipeline(tokenCredential);\n *\n *  const queueServiceClient = new QueueServiceClient(\"https://mystorageaccount.queue.core.windows.net\", pipeline);\n *\n *  // Set up a timer to refresh the token\n *  const timerID = setInterval(() => {\n *    // Update token by accessing to public tokenCredential.token\n *    tokenCredential.token = \"updatedToken\";\n *    // WARNING: Timer must be manually stopped! It will forbid GC of tokenCredential\n *    if (shouldStop()) {\n *      clearInterval(timerID);\n *    }\n *  }, 60 * 60 * 1000); // Set an interval time before your token expired\n * @export\n * @implements {TokenCredential}\n *\n */\nexport class RawTokenCredential implements TokenCredential {\n  /**\n   * Mutable token value. You can set a renewed token value to this property,\n   * for example, when an OAuth token is expired.\n   *\n   * @type {string}\n   */\n  public token: string;\n\n  /**\n   * Creates an instance of TokenCredential.\n   * @param {string} token\n   */\n  constructor(token: string) {\n    this.token = token;\n  }\n\n  /**\n   * Retrieves the token stored in this RawTokenCredential.\n   * \n   * @param _scopes Ignored since token is already known.\n   * @param _options Ignored since token is already known.\n   * @returns {AccessToken} The access token details.\n   */\n  async getToken(_scopes: string | string[], _options?: GetTokenOptions): Promise<AccessToken | null> {\n    return {\n      token: this.token,\n      expiresOnTimestamp: Date.now() + 2 * 60 * 1000 // 2 Minutes\n    };\n  }\n}\n"],"names":["getHeaderKey","headerName","toLowerCase","HttpHeaders","headerValue","this","_headersMap","name","value","toString","header","undefined","result","contains","headerKey","headers","push","headerNames","headersArray","i","length","headerValues","rawHeaders","JSON","stringify","toJson","set","encodeByteArray","str","String","fromCharCode","btoa","decodeString","byteString","atob","arr","Uint8Array","charCodeAt","getRandomValues","crypto","bind","window","msCrypto","rnds8","module","rnds","Array","r","Math","random","byteToHex","substr","buf","offset","bth","join","options","rng","ii","bytesToUuid","Constants","msRestVersion","HTTP","HTTPS","HTTP_PROXY","HTTPS_PROXY","HttpConstants","HttpVerbs","PUT","GET","DELETE","POST","MERGE","HEAD","PATCH","StatusCodes","TooManyRequests","HeaderConstants","AUTHORIZATION","AUTHORIZATION_SCHEME","RETRY_AFTER","USER_AGENT","isNode","process","version","versions","node","stripResponse","response","strippedResponse","body","bodyAsText","status","stripRequest","request","strippedRequest","clone","remove","isValidUuid","uuid","RegExp","test","generateUuid","uuidv4","delay","t","Promise","resolve","setTimeout","prepareXMLRootList","obj","elementName","isArray","validateISODuration","isDuration","replaceAll","searchValue","replaceValue","split","Serializer","mapper","objectName","failValidation","constraintName","constraintValue","Error","constraints","_a","ExclusiveMaximum","ExclusiveMinimum","InclusiveMaximum","InclusiveMinimum","MaxItems","MaxLength","MinItems","MinLength","MultipleOf","Pattern","UniqueItems","match","some","item","ar","indexOf","object","payload","mapperType","type","serializedName","defaultValue","isConstant","required","nullable","validateConstraints","typeName","valueOf","utils.isValidUuid","objectType","ArrayBuffer","isView","Blob","serializeBasicTypes","allowedValues","serializeEnumType","Date","isNaN","parse","toISOString","substring","toUTCString","d","floor","getTime","dateToUnixTime","utils.isDuration","serializeDateTypes","base64.encodeByteArray","serializeByteArrayType","buffer","ch","len","trimEnd","replace","bufferToBase64Url","serializeBase64UrlType","serializer","elementType","element","tempArray","serialize","serializeSequenceType","valueType","tempDictionary","Object","keys","_i","key","serializeDictionaryType","getPolymorphicDiscriminatorRecursively","getPolymorphicMapper","modelProps","resolveModelProperties","_b","propertyMapper","readOnly","propName","parentObject","isXML","xmlIsWrapped","xmlName","xmlElementName","paths","splitSerializeName","pop","paths_1","_c","pathName","propertyObjectName","toSerialize","polymorphicDiscriminator","clientName","serializedValue","xmlIsAttribute","$","additionalPropertiesMapper","additionalProperties","propNames","clientPropName","every","pn","serializeCompositeType","responseBody","instance","handledPropertyNames","headerCollectionPrefix","dictionary","startsWith","deserialize","unwrappedProperty","propertyInstance","res","paths_2","_d","isAdditionalProperty","responsePropName","_f","_e","includes","deserializeCompositeType","parseFloat","n","unixTimeToDate","base64.decodeString","base64UrlToByteArray","deserializeSequenceType","deserializeDictionaryType","modelMappers","prop","classes","partialclass","subwords_1","charAt","modelProperties","className","modelMapper","polymorphicPropertyName","discriminatorName","discriminatorValue","uberParent","indexDiscriminator","polymorphicMapper","discriminators","getPolymorphicDiscriminatorSafely","MapperType","o","o_1","strEnum","WebResource","method","url","pathTemplate","validMethods","toUpperCase","pathTemplate_1","pathParameters_1","baseUrl","url_1","endsWith","slice","segments","forEach","pathParamName","pathParam","encodeURIComponent","skipUrlEncoding","queryParameters","queryParams","queryParamName","query","queryParam","get","disableClientRequestId","bodyIsStream","serializationMapper","mappers","disableJsonStringifyOnBody","abortSignal","onDownloadProgress","onUploadProgress","streamResponseBody","withCredentials","timeout","formData","operationSpec","shouldDeserialize","operationResponseGetter","proxySettings","extendStatics","b","setPrototypeOf","__proto__","p","hasOwnProperty","__extends","__","constructor","prototype","create","__assign","assign","s","arguments","call","apply","__awaiter","thisArg","_arguments","P","generator","reject","fulfilled","step","next","e","rejected","done","then","__generator","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","__values","m","__await","__asyncGenerator","asyncIterator","q","a","resume","fulfill","settle","shift","__asyncDelegator","__asyncValues","tslib_1.__extends","RestError","message","code","statusCode","_super","_this","HttpPipelineLogLevel","XhrHttpClient","xhr","XMLHttpRequest","listener_1","abort","addEventListener","readyState","DONE","removeEventListener","addProgressListener","upload","requestForm_1","FormData","appendFormValue","append","formKey","formValue","j","contentType","open","setRequestHeader","responseType","send","HEADERS_RECEIVED","blobBody","rejectOnTerminalEvent","parseHeaders","responseText","listener","rawEvent","loadedBytes","loaded","responseHeaders","headerLines_1","getAllResponseHeaders","trim","line","index","REQUEST_SEND_ERROR","REQUEST_ABORTED_ERROR","isTokenCredential","credential","getToken","getPathStringFromParameter","parameter","getPathStringFromParameterPath","parameterPath","isStreamOperation","responses","operationResponse","bodyMapper","Stream","parser","DOMParser","parseXML","dom","parseFromString","errorNS","parserErrors","getElementsByTagNameNS","innerHTML","throwIfError","domToObject","childNodeCount","childNodes","firstChildNode","onlyChildTextValue","nodeType","Node","TEXT_NODE","nodeValue","elementWithAttributes","attributes","isElement","hasAttributes","attr","nodeName","child","childObject","err","getElementsByTagName","namespaceURI","ignored","doc","document","implementation","createDocument","XMLSerializer","stringifyXML","opts","buildNode","elem","createElement","textContent","obj_1","arrayElem","buildAttributes","setNamedItem","_h","_g","appendChild","rootName","serializeToString","attrs","createAttribute","BaseRequestPolicy","logLevel","_options","shouldLog","log","_nextPolicy","RequestPolicyOptions","_logger","OFF","minimumLogLevel","deserializationPolicy","deserializationContentTypes","nextPolicy","DeserializationPolicy","defaultJsonContentTypes","defaultXmlContentTypes","sendRequest","jsonContentTypes","xmlContentTypes","errorHandler","msg","errCode","PARSE_ERROR","text_1","contentComponents","map","component","parsedBody","catch","parsedResponse","shouldDeserializeResponse","expectedStatusCodes","hasNoExpectedStatusCodes","responseSpec","getOperationResponse","valueToDeserialize","Sequence","error","restError","utils.stripRequest","utils.stripResponse","httpMethod","headersMapper","parsedHeaders","defaultResponseSpec","default","initialErrorMessage","parsedErrorResponse","defaultResponseBodyMapper","internalError","defaultError","deserializeResponseBody","json","xml","ExponentialRetryPolicy","retry","retryCount","retryInterval","minRetryInterval","maxRetryInterval","isNumber","policy","retryData","requestError","innerError","incrementDelta","pow","min","updateRetryData","isAborted","aborted","shouldRetry","utils.delay","GenerateClientRequestIdPolicy","_requestIdHeaderName","utils.generateUuid","getDefaultUserAgentKey","getDefaultUserAgentHeaderName","getDefaultUserAgentValue","runtimeInfo","platformSpecificData","navigator","oscpu","platform","getPlatformSpecificData","telemetryInfo","keySeparator","valueSeparator","info","getUserAgentString","concat","UserAgentPolicy","addUserAgentHeader","URLQuery","_rawQuery","parameterName","parameterValue","newValue","parameterStrings","parameterValue_1","parameterValueElement","text","currentState","currentCharacter","URLBuilder","scheme","_scheme","host","_host","port","_port","path","_path","currentPath","getPath","_query","queryParameterName","queryParameterValue","startState","tokenizer","URLTokenizer","token","current","tokenPath","any","setScheme","getScheme","setHost","getHost","setPort","getPort","setPath","setQuery","getQuery","URLToken","_currentToken","hasCurrentCharacter","_currentState","readWhile","character","characterCode","isAlphaNumericCharacter","readWhileLetterOrDigit","nextScheme","schemeOrHost","readUntilCharacter","getCurrentCharacter","peekCharacters","nextSchemeOrHost","nextCharacter","nextHost","nextPort","nextPath","_currentIndex","_textLength","_text","readRemaining","nextQuery","state","charactersToPeek","endIndex","condition","terminatingCharacters","RedirectPolicy","handleRedirect","currentRetries","locationHeader","maxRetries","builder","RPRegistrationPolicy","rpName","matchRes","checkRPNotRegisteredError","urlPrefix","extractSubscriptionUrl","provider","originalRequest","postUrl","getUrl","reqOptions","getRequestEssentials","getRegistrationStatus","registrationState","_retryTimeout","registerRP","registrationStatus","registerIfNeeded","reuseUrlToo","SigningPolicy","authenticationProvider","signRequest","nextRequest","bearerTokenAuthenticationPolicy","scopes","BearerTokenAuthenticationPolicy","webResource","cachedToken","now","expiresOnTimestamp","QueryCollectionFormat","SystemErrorRetryPolicy","DEFAULT_CLIENT_RETRY_COUNT","DEFAULT_CLIENT_RETRY_INTERVAL","DEFAULT_CLIENT_MIN_RETRY_INTERVAL","DEFAULT_CLIENT_MAX_RETRY_INTERVAL","proxyNotSupportedInBrowser","ProxyPolicy","_request","ThrottlingRetryPolicy","httpRequest","_handleResponse","httpResponse","retryAfterHeader","delayInMs","parseRetryAfterHeader","retryAfterInSeconds","Number","parseDateRetryAfterHeader","diff","_defaultResponseHandler","ServiceClient","validateRequestProperties","prepare","httpPipeline","_httpClient","_requestPolicyFactories","_requestPolicyOptions","operationArguments","callback","baseUri","requestUrl","appendPath","urlParameters","urlParameter","urlParameterValue","getOperationArgumentValueFromParameter","skipEncoding","queryParameter","collectionFormat","Multi","setQueryParameter","requestContentType","headerParameters","headerParameter","customHeaders","customHeaderName","_withCredentials","serviceClient","requestBody","requestBodyParameterPathString","isStream","utils.prepareXMLRootList","formDataParameters","formDataParameter","formDataParameterValue","formDataParameterPropertyName","serializeRequestBody","_response","addOperationResponse","defineProperty","readableStreamBody","modelProperties_1","isPageableResponse","k","arrayResponse","flattenResponse","cb","credentials","requestPolicyFactories","httpClient","DefaultHttpClient","httpPipelineLogger","factories","generateClientRequestIdHeader","requestIdHeaderName","generateClientRequestIdPolicy","clientRequestIdHeaderName","isRequestPolicyFactory","signingPolicy","userAgentHeaderName","getValueOrFunctionResult","userAgentHeaderValue","userAgent","userAgentData","userAgentPolicy","maximumRetries","redirectPolicy","retryTimeout","rpRegistrationPolicy","rpRegistrationRetryTimeout","noRetryPolicy","exponentialRetryPolicy","systemErrorRetryPolicy","getDefaultProxySettings","createDefaultRequestPolicyFactories","newRequestPolicyFactories","defaultValueCreator","getOperationArgumentValueFromParameterPath","parameterMapper","propertySearchResult","getPropertyFromParameterPath","propertyFound","useDefaultValue","propertyValue","parameterPathString","propertyName","propertyPath","propertyPathString","parent","parameterPathPart","Aborter","_aborted","childCancelContext","children","parent_1","cancelTimer","onabort","abortEventListeners","cancelByParent","_type","splice","timer","clearTimeout","unref","StorageError","ListBlobsFlatSegmentResponse","serviceEndpoint","containerName","prefix","marker","maxResults","delimiter","segment","nextMarker","ListBlobsHierarchySegmentResponse","BlockList","committedBlocks","uncommittedBlocks","BlockLookupList","committed","uncommitted","latest","ListContainersSegmentResponse","containerItems","PageList","pageRange","clearRange","StorageServiceProperties","logging","hourMetrics","minuteMetrics","cors","defaultServiceVersion","deleteRetentionPolicy","staticWebsite","StorageServiceStats","geoReplication","ServiceSetPropertiesHeaders","requestId","errorCode","ServiceGetPropertiesHeaders","ServiceGetStatisticsHeaders","date","ServiceListContainersSegmentHeaders","ServiceGetAccountInfoHeaders","skuName","accountKind","ContainerCreateHeaders","eTag","lastModified","ContainerGetPropertiesHeaders","metadata","leaseDuration","leaseState","leaseStatus","blobPublicAccess","hasImmutabilityPolicy","hasLegalHold","ContainerDeleteHeaders","ContainerSetMetadataHeaders","ContainerGetAccessPolicyHeaders","ContainerSetAccessPolicyHeaders","ContainerAcquireLeaseHeaders","leaseId","ContainerReleaseLeaseHeaders","ContainerRenewLeaseHeaders","ContainerBreakLeaseHeaders","leaseTime","ContainerChangeLeaseHeaders","ContainerListBlobFlatSegmentHeaders","ContainerListBlobHierarchySegmentHeaders","ContainerGetAccountInfoHeaders","BlobDownloadHeaders","contentLength","contentRange","contentMD5","contentEncoding","cacheControl","contentDisposition","contentLanguage","blobSequenceNumber","blobType","copyCompletionTime","copyStatusDescription","copyId","copyProgress","copySource","copyStatus","acceptRanges","blobCommittedBlockCount","isServerEncrypted","blobContentMD5","BlobGetPropertiesHeaders","creationTime","isIncrementalCopy","destinationSnapshot","accessTier","accessTierInferred","archiveStatus","accessTierChangeTime","BlobDeleteHeaders","PageBlobCreateHeaders","AppendBlobCreateHeaders","BlockBlobUploadHeaders","BlobUndeleteHeaders","BlobSetHTTPHeadersHeaders","BlobSetMetadataHeaders","BlobAcquireLeaseHeaders","BlobReleaseLeaseHeaders","BlobRenewLeaseHeaders","BlobChangeLeaseHeaders","BlobBreakLeaseHeaders","BlobCreateSnapshotHeaders","snapshot","BlobStartCopyFromURLHeaders","BlobAbortCopyFromURLHeaders","BlobSetTierHeaders","BlobGetAccountInfoHeaders","BlockBlobStageBlockHeaders","BlockBlobStageBlockFromURLHeaders","BlockBlobCommitBlockListHeaders","BlockBlobGetBlockListHeaders","blobContentLength","PageBlobUploadPagesHeaders","PageBlobClearPagesHeaders","PageBlobGetPageRangesHeaders","PageBlobGetPageRangesDiffHeaders","PageBlobResizeHeaders","PageBlobUpdateSequenceNumberHeaders","PageBlobCopyIncrementalHeaders","AppendBlobAppendBlockHeaders","blobAppendOffset","properties","etag","publicAccess","allowedOrigins","allowedMethods","allowedHeaders","exposedHeaders","maxAgeInSeconds","lastSyncTime","deleteProperty","read","write","retentionPolicy","enabled","includeAPIs","days","indexDocument","errorDocument404Path","access","action0","action1","action2","action3","action4","blobCacheControl","blobContentDisposition","blobContentEncoding","blobContentLanguage","blobContentType","blockId","breakPeriod","comp0","comp10","comp11","comp14","comp15","comp2","comp3","comp4","comp5","duration","ifMatch","ifModifiedSince","ifNoneMatch","ifSequenceNumberEqualTo","ifSequenceNumberLessThan","ifSequenceNumberLessThanOrEqualTo","ifUnmodifiedSince","include1","coreHttp.QueryCollectionFormat","Csv","leaseId0","leaseId1","maxresults","nextPageLink","proposedLeaseId0","proposedLeaseId1","range","restype0","restype1","restype2","transactionalContentMD5","Service","storageServiceProperties","client","sendOperationRequest","setPropertiesOperationSpec","getPropertiesOperationSpec","getStatisticsOperationSpec","listContainersSegmentOperationSpec","getAccountInfoOperationSpec","listContainersSegmentNextOperationSpec","coreHttp.Serializer","Mappers","Parameters.url","Parameters.timeout","Parameters.restype0","Parameters.comp0","Parameters.version","Parameters.requestId","Mappers.StorageServiceProperties","202","Mappers.ServiceSetPropertiesHeaders","Mappers.StorageError","200","Mappers.ServiceGetPropertiesHeaders","Mappers.StorageServiceStats","Mappers.ServiceGetStatisticsHeaders","Parameters.prefix","Parameters.marker","Parameters.maxresults","Parameters.comp2","Mappers.ListContainersSegmentResponse","Mappers.ServiceListContainersSegmentHeaders","Parameters.restype1","Mappers.ServiceGetAccountInfoHeaders","Parameters.nextPageLink","start","expiry","permission","blobItems","blobPrefixes","deleted","serverEncrypted","incrementalCopy","deletedTime","remainingRetentionDays","id","accessPolicy","Container","createOperationSpec","deleteMethodOperationSpec","setMetadataOperationSpec","getAccessPolicyOperationSpec","setAccessPolicyOperationSpec","acquireLeaseOperationSpec","releaseLeaseOperationSpec","renewLeaseOperationSpec","breakLeaseOperationSpec","proposedLeaseId","changeLeaseOperationSpec","listBlobFlatSegmentOperationSpec","listBlobHierarchySegmentOperationSpec","listBlobFlatSegmentNextOperationSpec","listBlobHierarchySegmentNextOperationSpec","Parameters.restype2","Parameters.metadata","Parameters.access","201","Mappers.ContainerCreateHeaders","Parameters.leaseId0","Mappers.ContainerGetPropertiesHeaders","Parameters.ifModifiedSince","Parameters.ifUnmodifiedSince","Mappers.ContainerDeleteHeaders","Parameters.comp3","Mappers.ContainerSetMetadataHeaders","Parameters.comp4","Mappers.ContainerGetAccessPolicyHeaders","Mappers.ContainerSetAccessPolicyHeaders","Parameters.comp5","Parameters.duration","Parameters.proposedLeaseId0","Parameters.action0","Mappers.ContainerAcquireLeaseHeaders","Parameters.leaseId1","Parameters.action1","Mappers.ContainerReleaseLeaseHeaders","Parameters.action2","Mappers.ContainerRenewLeaseHeaders","Parameters.breakPeriod","Parameters.action3","Mappers.ContainerBreakLeaseHeaders","Parameters.proposedLeaseId1","Parameters.action4","Mappers.ContainerChangeLeaseHeaders","Parameters.include1","Mappers.ListBlobsFlatSegmentResponse","Mappers.ContainerListBlobFlatSegmentHeaders","Mappers.ListBlobsHierarchySegmentResponse","Mappers.ContainerListBlobHierarchySegmentHeaders","Mappers.ContainerGetAccountInfoHeaders","downloadOperationSpec","undeleteOperationSpec","setHTTPHeadersOperationSpec","createSnapshotOperationSpec","startCopyFromURLOperationSpec","abortCopyFromURLOperationSpec","tier","setTierOperationSpec","Parameters.snapshot","Parameters.range","Parameters.ifMatch","Parameters.ifNoneMatch","Mappers.BlobDownloadHeaders","206","Mappers.BlobGetPropertiesHeaders","Mappers.BlobDeleteHeaders","Mappers.BlobUndeleteHeaders","Parameters.blobCacheControl","Parameters.blobContentType","Parameters.blobContentMD5","Parameters.blobContentEncoding","Parameters.blobContentLanguage","Parameters.blobContentDisposition","Mappers.BlobSetHTTPHeadersHeaders","Mappers.BlobSetMetadataHeaders","Mappers.BlobAcquireLeaseHeaders","Mappers.BlobReleaseLeaseHeaders","Mappers.BlobRenewLeaseHeaders","Mappers.BlobChangeLeaseHeaders","Mappers.BlobBreakLeaseHeaders","Mappers.BlobCreateSnapshotHeaders","Parameters.copySource","Mappers.BlobStartCopyFromURLHeaders","204","Mappers.BlobAbortCopyFromURLHeaders","Mappers.BlobSetTierHeaders","Mappers.BlobGetAccountInfoHeaders","end","PageBlob","uploadPagesOperationSpec","clearPagesOperationSpec","getPageRangesOperationSpec","getPageRangesDiffOperationSpec","resizeOperationSpec","sequenceNumberAction","updateSequenceNumberOperationSpec","copyIncrementalOperationSpec","Parameters.contentLength","Parameters.blobContentLength","Parameters.blobSequenceNumber","Mappers.PageBlobCreateHeaders","Parameters.comp10","Parameters.transactionalContentMD5","Parameters.ifSequenceNumberLessThanOrEqualTo","Parameters.ifSequenceNumberLessThan","Parameters.ifSequenceNumberEqualTo","Mappers.PageBlobUploadPagesHeaders","Mappers.PageBlobClearPagesHeaders","Parameters.comp11","Mappers.PageList","Mappers.PageBlobGetPageRangesHeaders","Mappers.PageBlobGetPageRangesDiffHeaders","Mappers.PageBlobResizeHeaders","Mappers.PageBlobUpdateSequenceNumberHeaders","Mappers.PageBlobCopyIncrementalHeaders","AppendBlob","appendBlockOperationSpec","Mappers.AppendBlobCreateHeaders","Mappers.AppendBlobAppendBlockHeaders","size","BlockBlob","uploadOperationSpec","stageBlockOperationSpec","sourceUrl","stageBlockFromURLOperationSpec","blocks","commitBlockListOperationSpec","listType","getBlockListOperationSpec","Mappers.BlockBlobUploadHeaders","Parameters.blockId","Parameters.comp14","Mappers.BlockBlobStageBlockHeaders","Mappers.BlockBlobStageBlockFromURLHeaders","Parameters.comp15","Mappers.BlockLookupList","Mappers.BlockBlobCommitBlockListHeaders","Mappers.BlockList","Mappers.BlockBlobGetBlockListHeaders","BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES","BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES","BLOCK_BLOB_MAX_BLOCKS","DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES","URLConstants","Parameters","FORCE_BROWSER_NO_CACHE","SIGNATURE","SNAPSHOT","TIMEOUT","HTTPURLConnection","escapeURLPath","urlParsed","escape","appendToURLPath","setURLParameter","truncatedISO8061Date","withMilliseconds","dateString","generateBlockID","blockIDPrefix","blockIndex","maxSourceStringLength","content","Buffer","from","base64encode","currentString","targetLength","padString","padStart","repeat","sanitizeURL","safeURL","getQueryParameterValue","getURLParameter","sanitizeHeaders","originalHeader","BrowserPolicy","BrowserPolicyFactory","DEFAULT_REQUEST_LOG_OPTIONS","logWarningIfTryOverThreshold","LoggingPolicy","tryCount","requestStartTime","operationStartTime","INFO","requestEndTime","requestCompletionTime","operationDuration","currentLevel","logMessage","loggingOptions","WARNING","errorString","ERROR","messageInfo","err_1","RetryPolicyType","LoggingPolicyFactory","DEFAULT_RETRY_OPTIONS","maxRetryDelayInMs","maxTries","retryDelayInMs","retryPolicyType","EXPONENTIAL","secondaryHost","tryTimeoutInMs","RetryPolicy","attemptSendRequest","secondaryHas404","attempt","newRequest","isPrimaryRetry","retryOptions","setURLHost","logf","retriableErrors_1","retriableError","_level","_message","delayTimeInMs","FIXED","RetryPolicyFactory","TelemetryPolicy","telemetry","TelemetryPolicyFactory","telemetryString","UniqueRequestIDPolicy","UniqueRequestIDPolicyFactory","Pipeline","HTTPClient","logger","newPipeline","pipelineOptions","coreHttp.ServiceClient","defaultUserAgent","coreHttp.getDefaultUserAgentValue","packageName","pipeline","storageClientContext","StorageClientContext","toServiceClientOptions","rangeToString","iRange","RangeError","count","Credential","SharedKeyCredential","CredentialPolicy","AnonymousCredential","AnonymousCredentialPolicy","ReflectOwnKeys","R","Reflect","ReflectApply","target","receiver","args","Function","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","NumberIsNaN","EventEmitter","init","_events","_eventsCount","_maxListeners","defaultMaxListeners","$getMaxListeners","that","_addListener","prepend","events","existing","newListener","emit","unshift","warned","w","emitter","warning","console","warn","ProcessEmitWarning","_onceWrap","fired","wrapFn","wrapped","removeListener","_listeners","unwrap","evlistener","ret","unwrapListeners","arrayClone","listenerCount","copy","enumerable","arg","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","context","handler","listeners","on","addListener","prependListener","once","prependOnceListener","off","list","position","originalListener","spliceOne","removeAllListeners","rawListeners","eventNames","BatchStates","Batch","operation","operations","actives","completed","parallelExecute","error_1","concurrency","nextOperation","Good","LeaseClient","_leaseId","_url","aborter","none","_containerOrBlobOperation","acquireLease","modifiedAccessConditions","changeLease","releaseLease","renewLease","operationOptions","breakLease","clientContext","ContainerClient","StorageClient","BlobClient","AppendBlobClient","BlockBlobClient","PageBlobClient","blobAccessConditions","blobContext","download","leaseAccessConditions","progress","rangeGetContentMD5","maxRetryRequests","updatedOptions","getProperties","deleteMethod","deleteSnapshots","undelete","blobHTTPHeaders","setHTTPHeaders","setMetadata","proposeLeaseId","createSnapshot","sourceModifiedAccessConditions","startCopyFromURL","sourceIfMatch","sourceIfModifiedSince","sourceIfNoneMatch","sourceIfUnmodifiedSince","abortCopyFromURL","setTier","blockSize","transferProgress","batch","parallelism","addOperation","chunkEnd","maxRetryRequestsPerBlock","stream","encoding","pos","chunk","chunkLength","fill","streamToBuffer","do","filePath","rs","file","ws","fs.createWriteStream","env","STREAM_DEBUG","pipe","readStreamToLocalFile","blobDownloadStream","urlOrConnectionString","credentialOrPipelineOrContainerName","blobNameOrOptions","accessConditions","appendBlobContext","appendBlock","appendPositionAccessConditions","BufferScheduler","readable","data","appendUnresolvedData","resolveData","pause","isStreamEnd","isError","outgoing","triggerOutgoingHandlers","executingOutgoingHandlers","unresolvedLength","bufferSize","outgoingHandler","shiftBufferFromUnresolvedDataArray","unresolvedDataArray","merged","allocUnsafe","incoming","numBuffers","maxBuffers","triggerOutgoingHandler","bufferLength","reuseBuffer","blockBlobContext","stageBlock","sourceURL","stageBlockFromURL","sourceContentMD5","sourceRange","commitBlockList","getBlockList","browserData","browserBlob","UploadSeekableBlob","blobFactory","maxSingleShotSize","ceil","numBlocks","blockList","blockID","fs.statSync","uploadResetableStream","blockNum","streamFactory","pageBlobContext","uploadPages","sequenceNumberAccessConditions","clearPages","getPageRanges","prevSnapshot","getPageRangesDiff","prevsnapshot","resize","sequenceNumber","updateSequenceNumber","copyIncremental","for","exports","containerContext","blobName","containerAccessConditions","getAccessPolicy","signedIdentifiers","response_1","identifier","containerAcl","acl","setAccessPolicy","blockBlobClient","getBlockBlobClient","getBlobClient","delete","listBlobFlatSegment","listBlobHierarchySegment","listBlobsFlatSegmentResponse","tslib_1.__asyncValues","listSegments","tslib_1.__values","tslib_1.__asyncDelegator","iter","listItems","settings","continuationToken","maxPageSize","listBlobsHierarchySegmentResponse","listHierarchySegments","kind","blob","listItemsByHierarchy","BlobServiceClient","connectionString","extractedCreds","defaultEndpointsProtocol","accountName","accountKey","endpointSuffix","matchCredentials","protocol","extractConnectionStringParts","containerClient","getContainerClient","containerCreateResponse","serviceContext","setProperties","getStatistics","getAccountInfo","listContainersSegment","listContainersSegmentResponse","credentialOrPipeline","RawTokenCredential","_scopes"],"mappings":"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"}