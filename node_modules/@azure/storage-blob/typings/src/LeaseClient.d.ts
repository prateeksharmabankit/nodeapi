import { HttpResponse } from "@azure/core-http";
import * as Models from "../src/generated/lib/models";
import { Aborter } from "./Aborter";
import { ContainerClient } from "./ContainerClient";
import { BlobClient } from "./internal";
export interface Lease {
    /**
     * @member {string} [eTag] The ETag contains a value that you can use to
     * perform operations conditionally. If the request version is 2011-08-18 or
     * newer, the ETag value will be in quotes.
     */
    eTag?: string;
    /**
     * @member {Date} [lastModified] Returns the date and time the container was
     * last modified. Any operation that modifies the blob, including an update
     * of the blob's metadata or properties, changes the last-modified time of
     * the blob.
     */
    lastModified?: Date;
    /**
     * @member {string} [leaseId] Uniquely identifies a container's lease
     */
    leaseId?: string;
    /**
     * @member {number} [leaseTime] Approximate time remaining in the lease
     * period, in seconds.
     */
    leaseTime?: number;
    /**
     * @member {string} [requestId] This header uniquely identifies the request
     * that was made and can be used for troubleshooting the request.
     */
    requestId?: string;
    /**
     * @member {string} [version] Indicates the version of the Blob service used
     * to execute the request. This header is returned for requests made against
     * version 2009-09-19 and above.
     */
    version?: string;
    /**
     * @member {Date} [date] UTC date/time value generated by the service that
     * indicates the time at which the response was initiated
     */
    date?: Date;
    /**
     * @member {string} [errorCode]
     */
    errorCode?: string;
}
export declare type LeaseOperationResponse = Lease & {
    /**
     * The underlying HTTP response.
     */
    _response: HttpResponse & {
        /**
         * The parsed HTTP response headers.
         */
        parsedHeaders: Lease;
    };
};
/**
 * Configures lease operations.
 *
 * @export
 * @interface LeaseOperationOptions
 */
export interface LeaseOperationOptions {
    /**
     * Aborter instance to cancel request. It can be created with Aborter.none
     * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples
     * about request cancellation.
     *
     * @type {Aborter}
     * @memberof LeaseOperationOptions
     */
    abortSignal?: Aborter;
    /**
     * Conditions to meet when changing the lease.
     *
     * @type {Models.ModifiedAccessConditions}
     * @memberof LeaseOperationOptions
     */
    modifiedAccessConditions?: Models.ModifiedAccessConditions;
}
/**
 * A client that manages leases for a ContainerClient or a BlobClient.
 *
 * @export
 * @class LeaseClient
 */
export declare class LeaseClient {
    private _leaseId;
    private _url;
    private _containerOrBlobOperation;
    /**
     * Gets the lease Id.
     *
     * @readonly
     * @memberof LeaseClient
     */
    readonly leaseId: string;
    /**
     * Gets the url.
     *
     * @readonly
     * @memberof LeaseClient
     */
    readonly url: string;
    /**
     * Creates an instance of LeaseClient.
     * @param {(ContainerClient | BlobClient)} client The client to make the lease operation requests.
     * @param {string} leaseId Initial proposed lease id.
     * @memberof LeaseClient
     */
    constructor(client: ContainerClient | BlobClient, leaseId?: string);
    /**
     * Establishes and manages a lock on a container for delete operations, or on a blob
     * for write and delete operations.
     * The lock duration can be 15 to 60 seconds, or can be infinite.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
     * and
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
     *
     * @param {number} duration Must be between 15 to 60 seconds, or infinite (-1)
     * @param {LeaseOperationOptions} [options={}] option to configure lease management operations.
     * @returns {Promise<LeaseOperationResponse>} Response data for acquire lease operation.
     * @memberof LeaseClient
     */
    acquireLease(duration: number, options?: LeaseOperationOptions): Promise<LeaseOperationResponse>;
    /**
     * To change the ID of the lease.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
     * and
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
     *
     * @param {string} proposedLeaseId the proposed new lease Id.
     * @param {LeaseOperationOptions} [options={}] option to configure lease management operations.
     * @returns {Promise<LeaseOperationResponse>} Response data for change lease operation.
     * @memberof LeaseClient
     */
    chanageLease(proposedLeaseId: string, options?: LeaseOperationOptions): Promise<LeaseOperationResponse>;
    /**
     * To free the lease if it is no longer needed so that another client may
     * immediately acquire a lease against the container or the blob.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
     * and
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
     *
     * @param {LeaseOperationOptions} [options={}] option to configure lease management operations.
     * @returns {Promise<LeaseOperationResponse>} Response data for release lease operation.
     * @memberof LeaseClient
     */
    releaseLease(options?: LeaseOperationOptions): Promise<LeaseOperationResponse>;
    /**
     * To renew the lease.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
     * and
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
     *
     * @param {LeaseOperationOptions} [options={}] Optional option to configure lease management operations.
     * @returns {Promise<LeaseOperationResponse>} Response data for renew lease operation.
     * @memberof LeaseClient
     */
    renewLease(options?: LeaseOperationOptions): Promise<Lease>;
    /**
     * To end the lease but ensure that another client cannot acquire a new lease
     * until the current lease period has expired.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
     * and
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
     *
     * @static
     * @param {(ContainerClient | BlobClient)} client
     * @param {number} breakPeriod Break period
     * @param {LeaseOperationOptions} [options={}] Optional options to configure lease management operations.
     * @returns {Promise<LeaseOperationResponse>} Response data for break lease operation.
     * @memberof LeaseClient
     */
    breakLease(breakPeriod: number, options?: LeaseOperationOptions): Promise<LeaseOperationResponse>;
}
//# sourceMappingURL=LeaseClient.d.ts.map