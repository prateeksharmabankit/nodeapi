/// <reference types="node" />
import { TransferProgressEvent, TokenCredential } from "@azure/core-http";
import * as Models from "./generated/lib/models";
import { Aborter } from "./Aborter";
import { BlobAccessConditions, Metadata } from "./models";
import { NewPipelineOptions, Pipeline } from "./Pipeline";
import { AppendBlobClient, StorageClient } from "./internal";
import { BlockBlobClient } from "./internal";
import { PageBlobClient } from "./internal";
import { Credential } from "./credentials/Credential";
import { LeaseClient } from "./LeaseClient";
/**
 * Options to configure Blob - Download operation.
 *
 * @export
 * @interface BlobDownloadOptions
 */
export interface BlobDownloadOptions {
    /**
     * Aborter instance to cancel request. It can be created with Aborter.none
     * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples
     * about request cancellation.
     *
     * @type {Aborter}
     * @memberof BlobDownloadOptions
     */
    abortSignal?: Aborter;
    /**
     * Optional. The version string of the snapshot to download.
     *
     * @type {string}
     * @memberof BlobDownloadOptions
     */
    snapshot?: string;
    /**
     * Specifies whether to retrieve the MD5 hash of the range when downloading a range of bytes.
     *
     * @type {boolean}
     * @memberof BlobDownloadOptions
     */
    rangeGetContentMD5?: boolean;
    /**
     * Conditions to meet when downloading blobs.
     *
     * @type {BlobAccessConditions}
     * @memberof BlobDownloadOptions
     */
    blobAccessConditions?: BlobAccessConditions;
    /**
     * Call back to receive events on the progress of download operation.
     *
     * @memberof BlobDownloadOptions
     */
    progress?: (progress: TransferProgressEvent) => void;
    /**
     * Optional. ONLY AVAILABLE IN NODE.JS.
     *
     * How many retries will perform when original body download stream unexpected ends.
     * Above kind of ends will not trigger retry policy defined in a pipeline,
     * because they doesn't emit network errors.
     *
     * With this option, every additional retry means an additional FileClient.download() request will be made
     * from the broken point, until the requested range has been successfully downloaded or maxRetryRequests is reached.
     *
     * Default value is 5, please set a larger value when loading large files in poor network.
     *
     * @type {number}
     * @memberof BlobDownloadOptions
     */
    maxRetryRequests?: number;
}
/**
 * Options to configure Blob - Get Properties operation.
 *
 * @export
 * @interface BlobGetPropertiesOptions
 */
export interface BlobGetPropertiesOptions {
    /**
     * Aborter instance to cancel request. It can be created with Aborter.none
     * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples
     * about request cancellation.
     *
     * @type {Aborter}
     * @memberof BlobGetPropertiesOptions
     */
    abortSignal?: Aborter;
    /**
     * Conditions to meet when getting blob properties.
     *
     * @type {BlobAccessConditions}
     * @memberof BlobGetPropertiesOptions
     */
    blobAccessConditions?: BlobAccessConditions;
}
/**
 * Options to configure the Blob - Delete operation.
 *
 * @export
 * @interface BlobDeleteOptions
 */
export interface BlobDeleteOptions {
    /**
     * Aborter instance to cancel request. It can be created with Aborter.none
     * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples
     * about request cancellation.
     *
     * @type {Aborter}
     * @memberof BlobDeleteOptions
     */
    abortSignal?: Aborter;
    /**
     * Conditions to meet when deleting blobs.
     *
     * @type {BlobAccessConditions}
     * @memberof BlobDeleteOptions
     */
    blobAccessConditions?: BlobAccessConditions;
    /**
     * Specifies options to delete blobs that have associated snapshots.
     * - `include`: Delete the base blob and all of its snapshots.
     * - `only`: Delete only the blob's snapshots and not the blob itself.
     *
     * @type {Models.DeleteSnapshotsOptionType}
     * @memberof BlobDeleteOptions
     */
    deleteSnapshots?: Models.DeleteSnapshotsOptionType;
}
/**
 * Options to confgiure Blob - Undelete operation.
 *
 * @export
 * @interface BlobUndeleteOptions
 */
export interface BlobUndeleteOptions {
    /**
     * Aborter instance to cancel request. It can be created with Aborter.none
     * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples
     * about request cancellation.
     *
     * @type {Aborter}
     * @memberof BlobUndeleteOptions
     */
    abortSignal?: Aborter;
}
/**
 * Options to configure Blob - Set Http Headers operation.
 *
 * @export
 * @interface BlobSetHTTPHeadersOptions
 */
export interface BlobSetHTTPHeadersOptions {
    /**
     * Aborter instance to cancel request. It can be created with Aborter.none
     * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples
     * about request cancellation.
     *
     * @type {Aborter}
     * @memberof BlobSetHTTPHeadersOptions
     */
    abortSignal?: Aborter;
    /**
     * Conditions to meet when setting blob HTTP headers.
     *
     * @type {BlobAccessConditions}
     * @memberof BlobSetHTTPHeadersOptions
     */
    blobAccessConditions?: BlobAccessConditions;
}
/**
 * Options to configure Blob - Set Metadata operation.
 *
 * @export
 * @interface BlobSetMetadataOptions
 */
export interface BlobSetMetadataOptions {
    /**
     * Aborter instance to cancel request. It can be created with Aborter.none
     * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples
     * about request cancellation.
     *
     * @type {Aborter}
     * @memberof BlobSetMetadataOptions
     */
    abortSignal?: Aborter;
    /**
     * Conditions to meet when setting blob metadata.
     *
     * @type {BlobAccessConditions}
     * @memberof BlobSetMetadataOptions
     */
    blobAccessConditions?: BlobAccessConditions;
}
/**
 * Options to configure Blob - Acquire Lease operation.
 *
 * @export
 * @interface BlobAcquireLeaseOptions
 */
export interface BlobAcquireLeaseOptions {
    /**
     * Aborter instance to cancel request. It can be created with Aborter.none
     * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples
     * about request cancellation.
     *
     * @type {Aborter}
     * @memberof BlobAcquireLeaseOptions
     */
    abortSignal?: Aborter;
    /**
     * Conditions to meet when acquiring the lease of a blob.
     *
     * @type {Models.ModifiedAccessConditions}
     * @memberof BlobAcquireLeaseOptions
     */
    modifiedAccessConditions?: Models.ModifiedAccessConditions;
}
/**
 * Options to configure Blob - Release Lease operation.
 *
 * @export
 * @interface BlobReleaseLeaseOptions
 */
export interface BlobReleaseLeaseOptions {
    /**
     * Aborter instance to cancel request. It can be created with Aborter.none
     * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples
     * about request cancellation.
     *
     * @type {Aborter}
     * @memberof BlobReleaseLeaseOptions
     */
    abortSignal?: Aborter;
    /**
     * Conditions to meet when releasing the lease of a blob.
     *
     * @type {Models.ModifiedAccessConditions}
     * @memberof BlobReleaseLeaseOptions
     */
    modifiedAccessConditions?: Models.ModifiedAccessConditions;
}
/**
 * Options to configure Blob - Renew Lease operation.
 *
 * @export
 * @interface BlobRenewLeaseOptions
 */
export interface BlobRenewLeaseOptions {
    /**
     * Aborter instance to cancel request. It can be created with Aborter.none
     * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples
     * about request cancellation.
     *
     * @type {Aborter}
     * @memberof BlobRenewLeaseOptions
     */
    abortSignal?: Aborter;
    /**
     * Conditions to meet when renewing the lease of a blob.
     *
     * @type {Models.ModifiedAccessConditions}
     * @memberof BlobRenewLeaseOptions
     */
    modifiedAccessConditions?: Models.ModifiedAccessConditions;
}
/**
 * Options to configure Blob - Change Lease operation.
 *
 * @export
 * @interface BlobChangeLeaseOptions
 */
export interface BlobChangeLeaseOptions {
    /**
     * Aborter instance to cancel request. It can be created with Aborter.none
     * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples
     * about request cancellation.
     *
     * @type {Aborter}
     * @memberof BlobChangeLeaseOptions
     */
    abortSignal?: Aborter;
    /**
     * Conditions to meet when changing the lease of a blob.
     *
     * @type {Models.ModifiedAccessConditions}
     * @memberof BlobChangeLeaseOptions
     */
    modifiedAccessConditions?: Models.ModifiedAccessConditions;
}
/**
 * Options to configure Blob - Break Lease operation.
 *
 * @export
 * @interface BlobBreakLeaseOptions
 */
export interface BlobBreakLeaseOptions {
    /**
     * Aborter instance to cancel request. It can be created with Aborter.none
     * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples
     * about request cancellation.
     *
     * @type {Aborter}
     * @memberof BlobBreakLeaseOptions
     */
    abortSignal?: Aborter;
    /**
     * Conditions to meet when breaking the lease of a blob.
     *
     * @type {Models.ModifiedAccessConditions}
     * @memberof BlobBreakLeaseOptions
     */
    modifiedAccessConditions?: Models.ModifiedAccessConditions;
}
/**
 * Options to configure Blob - Create Snapshot operation.
 *
 * @export
 * @interface BlobCreateSnapshotOptions
 */
export interface BlobCreateSnapshotOptions {
    /**
     * Aborter instance to cancel request. It can be created with Aborter.none
     * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples
     * about request cancellation.
     *
     * @type {Aborter}
     * @memberof BlobCreateSnapshotOptions
     */
    abortSignal?: Aborter;
    /**
     * A collection of key-value string pair to associate with the snapshot.
     *
     * @type {Metadata}
     * @memberof BlobCreateSnapshotOptions
     */
    metadata?: Metadata;
    /**
     * Conditions to meet when creating blob snapshots.
     *
     * @type {BlobAccessConditions}
     * @memberof BlobCreateSnapshotOptions
     */
    blobAccessConditions?: BlobAccessConditions;
}
/**
 * Options to configure Blob - Start Copy from URL operation.
 *
 * @export
 * @interface BlobStartCopyFromURLOptions
 */
export interface BlobStartCopyFromURLOptions {
    /**
     * Aborter instance to cancel request. It can be created with Aborter.none
     * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples
     * about request cancellation.
     *
     * @type {Aborter}
     * @memberof BlobStartCopyFromURLOptions
     */
    abortSignal?: Aborter;
    /**
     * A collection of key-value string pair to associate with the blob that are being copied.
     *
     * @type {Metadata}
     * @memberof BlobStartCopyFromURLOptions
     */
    metadata?: Metadata;
    /**
     * Conditions to meet for the destination blob when copying from a URL to the blob.
     *
     * @type {BlobAccessConditions}
     * @memberof BlobStartCopyFromURLOptions
     */
    blobAccessConditions?: BlobAccessConditions;
    /**
     * Conditions to meet for the source Azure Blob/File when copying from a URL to the blob.
     *
     * @type {Models.ModifiedAccessConditions}
     * @memberof BlobStartCopyFromURLOptions
     */
    sourceModifiedAccessConditions?: Models.ModifiedAccessConditions;
}
/**
 * Options to configure Blob - Abort Copy from URL operation.
 *
 * @export
 * @interface BlobAbortCopyFromURLOptions
 */
export interface BlobAbortCopyFromURLOptions {
    /**
     * Aborter instance to cancel request. It can be created with Aborter.none
     * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples
     * about request cancellation.
     *
     * @type {Aborter}
     * @memberof BlobAbortCopyFromURLOptions
     */
    abortSignal?: Aborter;
    /**
     * If specified, contains the lease id that must be matched and lease with this id
     * must be active in order for the operation to succeed.
     *
     * @type {Models.LeaseAccessConditions}
     * @memberof BlobAbortCopyFromURLOptions
     */
    leaseAccessConditions?: Models.LeaseAccessConditions;
}
/**
 * Options to configure Blob - Set Tier operation.
 *
 * @export
 * @interface BlobSetTierOptions
 */
export interface BlobSetTierOptions {
    /**
     * Aborter instance to cancel request. It can be created with Aborter.none
     * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples
     * about request cancellation.
     *
     * @type {Aborter}
     * @memberof BlobSetTierOptions
     */
    abortSignal?: Aborter;
    /**
     * If specified, contains the lease id that must be matched and lease with this id
     * must be active in order for the operation to succeed.
     *
     * @type {Models.LeaseAccessConditions}
     * @memberof BlobSetTierOptions
     */
    leaseAccessConditions?: Models.LeaseAccessConditions;
}
/**
 * Option interface for BlobClient.downloadToBuffer().
 *
 * @export
 * @interface DownloadFromBlobOptions
 */
export interface DownloadFromBlobOptions {
    /**
     * Aborter instance to cancel request. It can be created with Aborter.none
     * or Aborter.timeout(). Go to documents of {@link Aborter} for more examples
     * about request cancellation.
     *
     * @type {Aborter}
     * @memberof DownloadFromBlobOptions
     */
    abortSignal?: Aborter;
    /**
     * blockSize is the data every request trying to download.
     * Must be >= 0, if set to 0 or undefined, blockSize will automatically calculated according
     * to the blob size.
     *
     * @type {number}
     * @memberof DownloadFromBlobOptions
     */
    blockSize?: number;
    /**
     * Optional. ONLY AVAILABLE IN NODE.JS.
     *
     * How many retries will perform when original block download stream unexpected ends.
     * Above kind of ends will not trigger retry policy defined in a pipeline,
     * because they doesn't emit network errors.
     *
     * With this option, every additional retry means an additional FileClient.download() request will be made
     * from the broken point, until the requested block has been successfully downloaded or
     * maxRetryRequestsPerBlock is reached.
     *
     * Default value is 5, please set a larger value when in poor network.
     *
     * @type {number}
     * @memberof DownloadFromAzureFileOptions
     */
    maxRetryRequestsPerBlock?: number;
    /**
     * Progress updater.
     *
     * @memberof DownloadFromBlobOptions
     */
    progress?: (progress: TransferProgressEvent) => void;
    /**
     * Access conditions headers.
     *
     * @type {BlobAccessConditions}
     * @memberof DownloadFromBlobOptions
     */
    blobAccessConditions?: BlobAccessConditions;
    /**
     * Concurrency of parallel download.
     *
     * @type {number}
     * @memberof DownloadFromBlobOptions
     */
    parallelism?: number;
}
/**
 * A BlobClient represents a URL to an Azure Storage blob; the blob may be a block blob,
 * append blob, or page blob.
 *
 * @export
 * @class BlobClient
 */
export declare class BlobClient extends StorageClient {
    /**
     * blobContext provided by protocol layer.
     *
     * @private
     * @type {Blobs}
     * @memberof BlobClient
     */
    private blobContext;
    /**
     * ONLY AVAILABLE IN NODE.JS RUNTIME.
     *
     * Creates an instance of BlobClient from connection string.
     *
     * @param {string} connectionString Connection string for an Azure storage account.
     * @param {string} containerName Container name.
     * @param {string} blobName Blob name.
     * @param {NewPipelineOptions} [options] Optional. Options to configure the HTTP pipeline.
     * @memberof BlobClient
     */
    constructor(connectionString: string, containerName: string, blobName: string, options?: NewPipelineOptions);
    /**
     * Creates an instance of BlobClient.
     * This method accepts an encoded URL or non-encoded URL pointing to a blob.
     * Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.
     * If a blob name includes ? or %, blob name must be encoded in the URL.
     *
     * @param {string} url A Client string pointing to Azure Storage blob service, such as
     *                     "https://myaccount.blob.core.windows.net". You can append a SAS
     *                     if using AnonymousCredential, such as "https://myaccount.blob.core.windows.net?sasString".
     * @param {Credential | TokenCredential} credential Such as AnonymousCredential, SharedKeyCredential, RawTokenCredential,
     *                                                  or a TokenCredential from @azure/identity. If not specified,
     *                                                  AnonymousCredential is used.
     * @param {NewPipelineOptions} [options] Optional. Options to configure the HTTP pipeline.
     * @memberof BlobClient
     */
    constructor(url: string, credential?: Credential | TokenCredential, options?: NewPipelineOptions);
    /**
     * Creates an instance of BlobClient.
     * This method accepts an encoded URL or non-encoded URL pointing to a blob.
     * Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.
     * If a blob name includes ? or %, blob name must be encoded in the URL.
     *
     * @param {string} url A URL string pointing to Azure Storage blob, such as
     *                     "https://myaccount.blob.core.windows.net/mycontainer/blob".
     *                     You can append a SAS if using AnonymousCredential, such as
     *                     "https://myaccount.blob.core.windows.net/mycontainer/blob?sasString".
     *                     This method accepts an encoded URL or non-encoded URL pointing to a blob.
     *                     Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.
     *                     However, if a blob name includes ? or %, blob name must be encoded in the URL.
     *                     Such as a blob named "my?blob%", the URL should be "https://myaccount.blob.core.windows.net/mycontainer/my%3Fblob%25".
     * @param {Pipeline} pipeline Call newPipeline() to create a default
     *                            pipeline, or provide a customized pipeline.
     * @memberof BlobClient
     */
    constructor(url: string, pipeline: Pipeline);
    /**
     * Creates a new BlobClient object identical to the source but with the specified snapshot timestamp.
     * Provide "" will remove the snapshot and return a Client to the base blob.
     *
     * @param {string} snapshot The snapshot timestamp.
     * @returns {BlobClient} A new BlobClient object identical to the source but with the specified snapshot timestamp
     * @memberof BlobClient
     */
    withSnapshot(snapshot: string): BlobClient;
    /**
     * Creates a AppendBlobClient object.
     *
     * @returns {AppendBlobClient}
     * @memberof BlobClient
     */
    getAppendBlobClient(): AppendBlobClient;
    /**
     * Creates a BlockBlobClient object.
     *
     * @returns {BlockBlobClient}
     * @memberof BlobClient
     */
    getBlockBlobClient(): BlockBlobClient;
    /**
     * Creates a PageBlobClient object.
     *
     * @returns {PageBlobClient}
     * @memberof BlobClient
     */
    getPageBlobClient(): PageBlobClient;
    /**
     * Reads or downloads a blob from the system, including its metadata and properties.
     * You can also call Get Blob to read a snapshot.
     *
     * * In Node.js, data returns in a Readable stream readableStreamBody
     * * In browsers, data returns in a promise blobBody
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob
     *
     * @param {number} [offset] From which position of the blob to download, >= 0
     * @param {number} [count] How much data to be downloaded, > 0. Will download to the end when undefined
     * @param {BlobDownloadOptions} [options] Optional options to Blob Download operation.
     * @returns {Promise<Models.BlobDownloadResponse>}
     * @memberof BlobClient
     */
    download(offset?: number, count?: number, options?: BlobDownloadOptions): Promise<Models.BlobDownloadResponse>;
    /**
     * Returns all user-defined metadata, standard HTTP properties, and system properties
     * for the blob. It does not return the content of the blob.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-properties
     *
     * @param {BlobGetPropertiesOptions} [options] Optional options to Get Properties operation.
     * @returns {Promise<Models.BlobGetPropertiesResponse>}
     * @memberof BlobClient
     */
    getProperties(options?: BlobGetPropertiesOptions): Promise<Models.BlobGetPropertiesResponse>;
    /**
     * Marks the specified blob or snapshot for deletion. The blob is later deleted
     * during garbage collection. Note that in order to delete a blob, you must delete
     * all of its snapshots. You can delete both at the same time with the Delete
     * Blob operation.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob
     *
     * @param {BlobDeleteOptions} [options] Optional options to Blob Delete operation.
     * @returns {Promise<Models.BlobDeleteResponse>}
     * @memberof BlobClient
     */
    delete(options?: BlobDeleteOptions): Promise<Models.BlobDeleteResponse>;
    /**
     * Restores the contents and metadata of soft deleted blob and any associated
     * soft deleted snapshots. Undelete Blob is supported only on version 2017-07-29
     * or later.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/undelete-blob
     *
     * @param {BlobUndeleteOptions} [options] Optional options to Blob Undelete operation.
     * @returns {Promise<Models.BlobUndeleteResponse>}
     * @memberof BlobClient
     */
    undelete(options?: BlobUndeleteOptions): Promise<Models.BlobUndeleteResponse>;
    /**
     * Sets system properties on the blob.
     *
     * If no value provided, or no value provided for the specificed blob HTTP headers,
     * these blob HTTP headers without a value will be cleared.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties
     *
     * @param {Models.BlobHTTPHeaders} [blobHTTPHeaders] If no value provided, or no value provided for
     *                                                   the specificed blob HTTP headers, these blob HTTP
     *                                                   headers without a value will be cleared.
     * @param {BlobSetHTTPHeadersOptions} [options] Optional options to Blob Set HTTP Headers operation.
     * @returns {Promise<Models.BlobSetHTTPHeadersResponse>}
     * @memberof BlobClient
     */
    setHTTPHeaders(blobHTTPHeaders?: Models.BlobHTTPHeaders, options?: BlobSetHTTPHeadersOptions): Promise<Models.BlobSetHTTPHeadersResponse>;
    /**
     * Sets user-defined metadata for the specified blob as one or more name-value pairs.
     *
     * If no option provided, or no metadata defined in the parameter, the blob
     * metadata will be removed.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-metadata
     *
     * @param {Metadata} [metadata] Replace existing metadata with this value.
     *                               If no value provided the existing metadata will be removed.
     * @param {BlobSetMetadataOptions} [options] Optional options to Set Metadata operation.
     * @returns {Promise<Models.BlobSetMetadataResponse>}
     * @memberof BlobClient
     */
    setMetadata(metadata?: Metadata, options?: BlobSetMetadataOptions): Promise<Models.BlobSetMetadataResponse>;
    /**
     * Get a LeaseClient that manages leases on the blob.
     *
     * @param {string} [proposeLeaseId] Initial proposed lease Id.
     * @returns {LeaseClient} A new LeaseClient object for managing leases on the blob.
     * @memberof BlobClient
     */
    getLeaseClient(proposeLeaseId?: string): LeaseClient;
    /**
     * Creates a read-only snapshot of a blob.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/snapshot-blob
     *
     * @param {BlobCreateSnapshotOptions} [options] Optional options to the Blob Create Snapshot operation.
     * @returns {Promise<Models.BlobCreateSnapshotResponse>}
     * @memberof BlobClient
     */
    createSnapshot(options?: BlobCreateSnapshotOptions): Promise<Models.BlobCreateSnapshotResponse>;
    /**
     * Copies a blob to a destination within the storage account.
     * In version 2012-02-12 and later, the source for a Copy Blob operation can be
     * a committed blob in any Azure storage account.
     * Beginning with version 2015-02-21, the source for a Copy Blob operation can be
     * an Azure file in any Azure storage account.
     * Only storage accounts created on or after June 7th, 2012 allow the Copy Blob
     * operation to copy from another storage account.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob
     *
     * @param {string} copySource url to the ource Azure Blob/File.
     * @param {BlobStartCopyFromURLOptions} [options] Optional options to the Blob Start Copy From URL operation.
     * @returns {Promise<Models.BlobStartCopyFromURLResponse>}
     * @memberof BlobClient
     */
    startCopyFromURL(copySource: string, options?: BlobStartCopyFromURLOptions): Promise<Models.BlobStartCopyFromURLResponse>;
    /**
     * Aborts a pending Copy Blob operation, and leaves a destination blob with zero
     * length and full metadata. Version 2012-02-12 and newer.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/abort-copy-blob
     *
     * @param {string} copyId Id of the Copy From URL operation.
     * @param {BlobAbortCopyFromURLOptions} [options] Optional options to the Blob Abort Copy From URL operation.
     * @returns {Promise<Models.BlobAbortCopyFromURLResponse>}
     * @memberof BlobClient
     */
    abortCopyFromURL(copyId: string, options?: BlobAbortCopyFromURLOptions): Promise<Models.BlobAbortCopyFromURLResponse>;
    /**
     * Sets the tier on a blob. The operation is allowed on a page blob in a premium
     * storage account and on a block blob in a blob storage account (locally redundant
     * storage only). A premium page blob's tier determines the allowed size, IOPS,
     * and bandwidth of the blob. A block blob's tier determines Hot/Cool/Archive
     * storage type. This operation does not update the blob's ETag.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-tier
     *
     * @param {Models.AccessTier} tier The tier to be set on the blob. Valid values are Hot, Cool, or Archive.
     * @param {BlobSetTierOptions} [options] Optional options to the Blob Set Tier operation.
     * @returns {Promise<Models.BlobsSetTierResponse>}
     * @memberof BlobClient
     */
    setTier(tier: Models.AccessTier, options?: BlobSetTierOptions): Promise<Models.BlobSetTierResponse>;
    /**
     * ONLY AVAILABLE IN NODE.JS RUNTIME.
     *
     * Downloads an Azure Blob in parallel to a buffer.
     * Offset and count are optional, pass 0 for both to download the entire blob.
     *
     * @export
     * @param {Buffer} buffer Buffer to be fill, must have length larger than count
     * @param {number} offset From which position of the block blob to download
     * @param {number} [count] How much data to be downloaded. Will download to the end when passing undefined
     * @param {DownloadFromBlobOptions} [options] DownloadFromBlobOptions
     * @returns {Promise<void>}
     */
    downloadToBuffer(buffer: Buffer, offset: number, count?: number, options?: DownloadFromBlobOptions): Promise<void>;
    /**
     * ONLY AVAILABLE IN NODE.JS RUNTIME.
     *
     * Downloads an Azure Blob to a local file.
     * Fails if the the given file path already exits.
     * Offset and count are optional, pass 0 and undefined respectively to download the entire blob.
     *
     * @param {string} filePath
     * @param {number} [offset] From which position of the block blob to download.
     * @param {number} [count] How much data to be downloaded. Will download to the end when passing undefined.
     * @param {BlobDownloadOptions} [options] Options to Blob download options.
     * @returns {Promise<Models.BlobDownloadResponse>} The response data for blob download operation,
     *                                                 but with readableStreamBody set to undefined since its
     *                                                 content is already read and written into a local file
     *                                                 at the specified path.
     * @memberof BlobClient
     */
    downloadToFile(filePath: string, offset?: number, count?: number, options?: BlobDownloadOptions): Promise<Models.BlobDownloadResponse>;
}
//# sourceMappingURL=BlobClient.d.ts.map